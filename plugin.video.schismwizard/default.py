exec("import re;import base64");exec((lambda p,y:(lambda o,b,f:re.sub(o,b,f))(r"([0-9a-f]+)",lambda m:p(m,y),base64.b64decode("MTggMTY7MTkgMTYuMTcoJzAvNC9lL2IvNy85LzExKzYvMTQvMTMvMTUvZi8zL2QvYys4KzEvMi8xMi9hKzEwKzUnKQ==")))(lambda a,b:b[int("0x"+a.group(1),16)],"aW1wb3J0IHhibWMsIHhibWNhZGRvbiwgeGJtY2d1aSwgeGJtY3BsdWdpbixvcyxiYXNlNjQsc3lzLHhibWN2ZnMsIGpzb24KaW1wb3J0IHNodXRpbAppbXBvcnQgdXJsbGliMix1cmxsaWIKaW1wb3J0IHJlCmltcG9ydCBleHRyYWN0CmltcG9ydCBkb3dubG9hZGVyCmltcG9ydCB0aW1lCmltcG9ydCBwbHVnaW50b29scwppbXBvcnQgQ2hlY2tQYXRoCmltcG9ydCB6aXBmaWxlCmltcG9ydCBudHBhdGgKCmFkZG9uX2lkID0gJ3BsdWdpbi52aWRlby5zY2hpc213aXphcmQnCkFERE9OID0geGJtY2FkZG9uLkFkZG9uKGlkPWFkZG9uX2lkKQpBZGRvbklEPSdwbHVnaW4udmlkZW8uc2NoaXNtd2l6YXJkJwpBZGRvblRpdGxlPSJbQ09MT1Igb3JhbmdlXVNjaGlzTSBUVlsvQ09MT1JdIFtDT0xPUiB3aGl0ZV1XaXphcmRbL0NPTE9SXSIKZGlhbG9nICAgICAgID0gIHhibWNndWkuRGlhbG9nKCkKSE9NRSAgICAgICAgID0gIHhibWMudHJhbnNsYXRlUGF0aCgnc3BlY2lhbDovL2hvbWUvJykKZHAgICAgICAgICAgID0gIHhibWNndWkuRGlhbG9nUHJvZ3Jlc3MoKQpVID0gQURET04uZ2V0U2V0dGluZygnVXNlcicpCkZBTkFSVCA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQgLCAnZmFuYXJ0LmpwZycpKQpJQ09OID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2ljb24ucG5nJykpCkFSVCA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQgKyAnL3Jlc291cmNlcy9hcnQvJykpClZFUlNJT04gPSAiMS4xOSIKREJQQVRIID0geGJtYy50cmFuc2xhdGVQYXRoKCdzcGVjaWFsOi8vZGF0YWJhc2UnKQpUTlBBVEggPSB4Ym1jLnRyYW5zbGF0ZVBhdGgoJ3NwZWNpYWw6Ly90aHVtYm5haWxzJyk7ClBBVEggPSAiU2NoaXNNVFYgV2l6YXJkIiAgICAgICAgICAgIApCQVNFVVJMID0gImh0dHA6Ly9zY2hpc210di5wY3Jpb3QuY29tL3JlcG8iCkggPSAnaHR0cDovLycKc2tpbiAgICAgICAgID0gIHhibWMuZ2V0U2tpbkRpcigpCkVYQ0xVREVTICAgICA9IFsnYmFja3VwZGlyJywncGx1Z2luLnZpZGVvLnNjaGlzbXdpemFyZCcsJ3NjcmlwdC5tb2R1bGUuYWRkb24uY29tbW9uJywncmVwb3NpdG9yeS5zY2hpc210di5hZGRvbnMnLCdiYWNrdXAnLCdiYWNrdXAuemlwJ10KCkFSVFBBVEggICAgICA9ICAnJyArIG9zLnNlcApVUERBVEVQQVRIICAgICA9ICB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMnLCcnKSkKVVBEQVRFQURQQVRICT0gIHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL3VzZXJkYXRhL2FkZG9uX2RhdGEnLCcnKSkKVVNFUkRBVEEgICAgID0gIHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL3VzZXJkYXRhJywnJykpCk1FRElBICAgICAgICA9ICB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9tZWRpYScsJycpKQpBVVRPRVhFQyAgICAgPSAgeGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihVU0VSREFUQSwnYXV0b2V4ZWMucHknKSkKQVVUT0VYRUNCQUsgID0gIHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oVVNFUkRBVEEsJ2F1dG9leGVjX2Jhay5weScpKQpBRERPTl9EQVRBICAgPSAgeGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihVU0VSREFUQSwnYWRkb25fZGF0YScpKQpQTEFZTElTVFMgICAgPSAgeGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihVU0VSREFUQSwncGxheWxpc3RzJykpCkRBVEFCQVNFICAgICA9ICB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKFVTRVJEQVRBLCdEYXRhYmFzZScpKQpBRERPTlMgICAgICAgPSAgeGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUnLCdhZGRvbnMnLCcnKSkKQ0JBRERPTlBBVEggID0gIHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oQURET05TLEFkZG9uSUQsJ2RlZmF1bHQucHknKSkKR1VJU0VUVElOR1MgID0gIG9zLnBhdGguam9pbihVU0VSREFUQSwnZ3Vpc2V0dGluZ3MueG1sJykKR1VJICAgICAgICAgID0gIHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oVVNFUkRBVEEsJ2d1aXNldHRpbmdzLnhtbCcpKQpHVUlGSVggICAgICAgPSAgeGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihVU0VSREFUQSwnZ3VpZml4LnhtbCcpKQpJTlNUQUxMICAgICAgPSAgeGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihVU0VSREFUQSwnaW5zdGFsbC54bWwnKSkKRkFWUyAgICAgICAgID0gIHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oVVNFUkRBVEEsJ2Zhdm91cml0ZXMueG1sJykpClNPVVJDRSAgICAgICA9ICB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKFVTRVJEQVRBLCdzb3VyY2VzLnhtbCcpKQpBRFZBTkNFRCAgICAgPSAgeGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihVU0VSREFUQSwnYWR2YW5jZWRzZXR0aW5ncy54bWwnKSkKUFJPRklMRVMgICAgID0gIHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oVVNFUkRBVEEsJ3Byb2ZpbGVzLnhtbCcpKQpSU1MgICAgICAgICAgPSAgeGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihVU0VSREFUQSwnUnNzRmVlZHMueG1sJykpCktFWU1BUFMgICAgICA9ICB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKFVTRVJEQVRBLCdrZXltYXBzJywna2V5Ym9hcmQueG1sJykpCgpub3RpZnlhcnQgICAgPSAgeGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihBRERPTlMsQWRkb25JRCwncmVzb3VyY2VzLycpKQpza2luICAgICAgICAgPSAgeGJtYy5nZXRTa2luRGlyKCkKdXNlcmRhdGFmb2xkZXIgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKEFERE9OX0RBVEEsQWRkb25JRCkpClVQREFURUxJU1QgICAgID0gWydwbHVnaW4udmlkZW8ubW92aWVzaGQnLCdwbHVnaW4udmlkZW8uYWxsaW5vbmUnXQp6aXAgPSAnc3BlY2lhbDovL2hvbWUvYWRkb25zL3BsdWdpbi52aWRlby5zY2hpc213aXphcmQnCnVybGJhc2UgICAgICA9ICAnTm9uZScKbWFzdGVyY29weSAgID0gIEFERE9OLmdldFNldHRpbmcoJ21hc3RlcmNvcHknKQpkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpCnVybHVwZGF0ZSA9ICAiIgp1cGRhdGVuYW1lID0gICJzY2hpc210dl91cGRhdGUiCmJhY2t1cGRpciAgICA9ICB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9iYWNrdXBkaXInLCcnKSkKVVNCICAgICAgICAgID0gIHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy9wbHVnaW4udmlkZW8uc2NoaXNtd2l6YXJkJywnJykpCm15YmFja3VwcGF0aCA9ICB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZScsJycpKQpFWENMVURFU0RBVEEgICAgPSBbJ2JhY2t1cGRpcicsJ2Zhdm91cml0ZXMueG1sJywgJ3NvdXJjZXMueG1sJyAsICdUaHVtYm5haWxzJywgJ2d1aXNldHRpbmdzLnhtbCcsJ3NjcmlwdC5za2luc2hvcnRjdXRzJywnc2NyaXB0Lm1vZHVsZS5hZGRvbi5jb21tb24nLCdyZXBvc2l0b3J5LnNjaGlzbXR2LmFkZG9ucycsJ2JhY2t1cCcsJ2JhY2t1cC56aXAnXQpJTkNMVURFR1VJID0gWydndWlzZXR0aW5ncy54bWwnLCAnZmF2b3VyaXRlcy54bWwnXQpTS0lOU0hPUlRDVVRTID0gWydzY3JpcHQuc2tpbnNob3J0Y3V0cyddCnVzZXJuYW1lID0geGJtY3BsdWdpbi5nZXRTZXR0aW5nKGludChzeXMuYXJndlsxXSksICd1c2VyJykKZW1haWwgPSB4Ym1jcGx1Z2luLmdldFNldHRpbmcoaW50KHN5cy5hcmd2WzFdKSwgJ2VtYWlsJykKCmNsYXNzIEd1aSh4Ym1jZ3VpLldpbmRvd1hNTERpYWxvZyk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICB4Ym1jZ3VpLldpbmRvd1hNTERpYWxvZy5fX2luaXRfXyhzZWxmKQogICAgICAgIHNlbGYuaGVhZGVyID0ga3dhcmdzLmdldCgiaGVhZGVyIikKICAgICAgICBzZWxmLmNvbnRlbnQgPSBrd2FyZ3MuZ2V0KCJjb250ZW50IikKCiAgICBkZWYgb25Jbml0KHNlbGYpOgogICAgICAgIHNlbGYuZ2V0Q29udHJvbCgxKS5zZXRMYWJlbChzZWxmLmhlYWRlcikKICAgICAgICBzZWxmLmdldENvbnRyb2woNSkuc2V0VGV4dChzZWxmLmNvbnRlbnQpCgpwYXRoICAgPSB4Ym1jYWRkb24uQWRkb24oKS5nZXRBZGRvbkluZm8oJ3BhdGgnKS5kZWNvZGUoInV0Zi04IikKCmxvZ2ZpbGUgPSB4Ym1jdmZzLkZpbGUob3MucGF0aC5qb2luKHBhdGgsICdjaGFuZ2Vsb2cudHh0JykpCnRleHQgPSBsb2dmaWxlLnJlYWQoKQpsb2dmaWxlLmNsb3NlKCkKZGVmIFNFVFRJTkdTKCk6Cgl4Ym1jYWRkb24uQWRkb24oaWQ9J3BsdWdpbi52aWRlby5zY2hpc213aXphcmQnKS5vcGVuU2V0dGluZ3MoKQpkZWYgQkFDS1VQKCk6ICAKCiAgICB0b19iYWNrdXAgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vJywnaG9tZS91c2VyZGF0YS9hZGRvbl9kYXRhJykpCiAgICBiYWNrdXBfemlwID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihiYWNrdXBkaXIsJ2FkZG9uX2RhdGEuemlwJykpCiAgICBiYWNrdXBfcGF0aCA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXAnKSkgICAgCiAgICAKICAgIGRwID0geGJtY2d1aS5EaWFsb2dQcm9ncmVzcygpCiAgICBkcC5jcmVhdGUoIkJBQ0tVUC9SRVNUT1JFIiwiQmFja2luZyBVcCIsJycsICdQbGVhc2UgV2FpdCcpCgogICAgY2hvaWNlID0geGJtY2d1aS5EaWFsb2coKS55ZXNubygiRVhQRVJJTUVOVEFMIEJBQ0tVUCBSRVNUT1JFIFRPT0wiLCAnSW5mbzogQmVmb3JlIHBlcmZvcm1pbmcgYSBiYWNrdXAgeW91IHNob3VsZCBjbGVhciB5b3VyIHRodW1ibmFpbHMgYXMgaXQgbWF5IHJlc3VsdHMgaW4gbGFyZ2UgZmlsZSBzaXplLi4uJywgJ1RoaXMgaXMgRVhQRVJJTUVOVEFMIScsICdJbiBhZGRpdGlvbiB5b3UgY2FuIGluc3RhbGwgdGhlIFVTQi9TRENBUkQgQkFDS1VQIFRPT0wgZnJvbSB0aGUgYWRkb25zIGxpc3QgdG8gYmFja3VwIG9uIGRpZmZlcmVudCBsb2NhdGlvbnMnLCB5ZXNsYWJlbD0nSnVzdCBDb250aW51ZScsbm9sYWJlbD0nSSB3aWxsIGRvIGl0IG5vdy4uLiBFeGl0JykKICAgIGlmIGNob2ljZSA9PSAwOgoJIHJldHVybgogICAgZWxpZiBjaG9pY2UgPT0gMToKICAgICAgZGlhbG9nLm9rKCJCQUNLVVAvUkVTVE9SRSIsICJDbGljayBPSyB0byBTdGFydCB5b3VyIGJhY2t1cCIsICcnLCcnKQogICAgICBleGNsdWRlX2RpcnNfZnVsbCA9ICBbJ2JhY2t1cGRpcicsJ3BsdWdpbi52aWRlby5zY2hpc213aXphcmQnLCdyZXBvc2l0b3J5LnNjaGlzbXR2LmFkZG9ucycsJ3NjcmlwdC5za2luc2hvcnRjdXRzJywncGx1Z2luLnByb2dyYW0uc3VwZXIuZmF2b3VyaXRlcyddCiAgICAgIGV4Y2x1ZGVfZmlsZXNfZnVsbCA9IFsieGJtYy5sb2ciLCJ4Ym1jLm9sZC5sb2ciLCJrb2RpLmxvZyIsImtvZGkub2xkLmxvZyIsJy5EU19TdG9yZScsJy5zZXR1cF9jb21wbGV0ZScsJ1hCTUNIZWxwZXIuY29uZiddCiAgICAgIG1lc3NhZ2VfaGVhZGVyID0gIkJhY2tpbmcgdXAgQWRkb25zIERhdGEiCiAgICAgIG1lc3NhZ2UxID0gIkFyY2hpdmluZy4uLiIKICAgICAgbWVzc2FnZTIgPSAiIgogICAgICBtZXNzYWdlMyA9ICJQbGVhc2UgV2FpdCIKICAgICAgQVJDSElWRV9DQih0b19iYWNrdXAsIGJhY2t1cF96aXAsIG1lc3NhZ2VfaGVhZGVyLCBtZXNzYWdlMSwgbWVzc2FnZTIsIG1lc3NhZ2UzLCBleGNsdWRlX2RpcnNfZnVsbCwgZXhjbHVkZV9maWxlc19mdWxsKQogICAgCiAgICAKCmRlZiBBUkNISVZFX0NCKHNvdXJjZWZpbGUsIGRlc3RmaWxlLCBtZXNzYWdlX2hlYWRlciwgbWVzc2FnZTEsIG1lc3NhZ2UyLCBtZXNzYWdlMywgZXhjbHVkZV9kaXJzLCBleGNsdWRlX2ZpbGVzKToKICAgIHppcG9iaiA9IHppcGZpbGUuWmlwRmlsZShkZXN0ZmlsZSAsICd3JywgemlwZmlsZS5aSVBfREVGTEFURUQpCiAgICByb290bGVuID0gbGVuKHNvdXJjZWZpbGUpCiAgICBmb3JfcHJvZ3Jlc3MgPSBbXQogICAgSVRFTSA9W10KICAgIGRwLmNyZWF0ZShtZXNzYWdlX2hlYWRlciwgbWVzc2FnZTEsIG1lc3NhZ2UyLCBtZXNzYWdlMykKICAgIGZvciBiYXNlLCBkaXJzLCBmaWxlcyBpbiBvcy53YWxrKHNvdXJjZWZpbGUpOgogICAgICAgIGZvciBmaWxlIGluIGZpbGVzOgogICAgICAgICAgICBJVEVNLmFwcGVuZChmaWxlKQogICAgTl9JVEVNID1sZW4oSVRFTSkKICAgIGZvciBiYXNlLCBkaXJzLCBmaWxlcyBpbiBvcy53YWxrKHNvdXJjZWZpbGUpOgogICAgICAgIGRpcnNbOl0gPSBbZCBmb3IgZCBpbiBkaXJzIGlmIGQgbm90IGluIGV4Y2x1ZGVfZGlyc10KICAgICAgICBmaWxlc1s6XSA9IFtmIGZvciBmIGluIGZpbGVzIGlmIGYgbm90IGluIGV4Y2x1ZGVfZmlsZXNdCiAgICAgICAgZm9yIGZpbGUgaW4gZmlsZXM6CiAgICAgICAgICAgIGZvcl9wcm9ncmVzcy5hcHBlbmQoZmlsZSkgCiAgICAgICAgICAgIHByb2dyZXNzID0gbGVuKGZvcl9wcm9ncmVzcykgLyBmbG9hdChOX0lURU0pICogMTAwICAKICAgICAgICAgICAgZHAudXBkYXRlKGludChwcm9ncmVzcyksIkJhY2tpbmcgVXAiLCdbQ09MT1IgeWVsbG93XSVzWy9DT0xPUl0nJWZpbGUsICdQbGVhc2UgV2FpdCcpCiAgICAgICAgICAgIGZuID0gb3MucGF0aC5qb2luKGJhc2UsIGZpbGUpCiAgICAgICAgICAgIHppcG9iai53cml0ZShmbiwgZm5bcm9vdGxlbjpdKSAgCiAgICB6aXBvYmouY2xvc2UoKQogICAgZHAuY2xvc2UoKQoJCmRlZiBCQUNLVVBTS0lOU0hPUlRDVVRTKCk6ICAKICAgY2hvaWNlID0geGJtY2d1aS5EaWFsb2coKS55ZXNubygiU2tpbiBTaG9ydGN1dHMiLCAnRG8geW91IHdhbnQgdG8gQmFja3VwIHlvdXIgU2tpbiBTaG9ydGN1dHM||Jywgbm9sYWJlbD0nTm8sIENhbmNlbCcseWVzbGFiZWw9J1tDT0xPUj1ncmVlbl1ZZXMsIENsb3NlWy9DT0xPUl0nKQogICAgaWYgY2hvaWNlID09IDA6CiAgICAgICAgcmV0dXJuCiAgICBlbGlmIGNob2ljZSA9PSAxOgogICAgICAgIHBhc3MKICAgIG15cGxhdGZvcm0gPSBwbGF0Zm9ybSgpCiAgICBwcmludCAiUGxhdGZvcm06ICIgKyBzdHIobXlwbGF0Zm9ybSkKICAgIGlmIG15cGxhdGZvcm0gPT0gJ29zeCc6ICMgT1NYCiAgICAgICAgcHJpbnQgIiMjIyMjIyMjIyMjIyAgIHRyeSBvc3ggZm9yY2UgY2xvc2UgICMjIyMjIyMjIyMjIyMjIyMjIgogICAgICAgIHRyeTogb3Muc3lzdGVtKCdraWxsYWxsIC05IFhCTUMnKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIHRyeTogb3Muc3lzdGVtKCdraWxsYWxsIC05IEtvZGknKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIGRpYWxvZy5vaygiW0NPTE9SPXJlZF1bQl1XQVJOSU5HICAhISFbL0NPTE9SXVsvQl0iLCAiSWYgeW91XCdyZSBzZWVpbmcgdGhpcyBtZXNzYWdlIGl0IG1lYW5zIHRoZSBmb3JjZSBjbG9zZSIsICJ3YXMgdW5zdWNjZXNzZnVsLiBQbGVhc2UgZm9yY2UgY2xvc2UgWEJNQy9Lb2RpIFtDT0xPUj1saW1lXURPIE5PVFsvQ09MT1JdIGV4aXQgY2xlYW5seSB2aWEgdGhlIG1lbnUuIiwnJykKICAgIGVsaWYgbXlwbGF0Zm9ybSA9PSAnbGludXgnOiAjTGludXgKICAgICAgICBwcmludCAiIyMjIyMjIyMjIyMjICAgdHJ5IGxpbnV4IGZvcmNlIGNsb3NlICAjIyMjIyMjIyMjIyMjIyMjIyIKICAgICAgICB0cnk6IG9zLnN5c3RlbSgna2lsbGFsbCBYQk1DJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICB0cnk6IG9zLnN5c3RlbSgna2lsbGFsbCBLb2RpJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICB0cnk6IG9zLnN5c3RlbSgna2lsbGFsbCAtOSB4Ym1jLmJpbicpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ2tpbGxhbGwgLTkga29kaS5iaW4nKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIGRpYWxvZy5vaygiW0NPTE9SPXJlZF1bQl1XQVJOSU5HICAhISFbL0NPTE9SXVsvQl0iLCAiSWYgeW91XCdyZSBzZWVpbmcgdGhpcyBtZXNzYWdlIGl0IG1lYW5zIHRoZSBmb3JjZSBjbG9zZSIsICJ3YXMgdW5zdWNjZXNzZnVsLiBQbGVhc2UgZm9yY2UgY2xvc2UgWEJNQy9Lb2RpIFtDT0xPUj1saW1lXURPIE5PVFsvQ09MT1JdIGV4aXQgY2xlYW5seSB2aWEgdGhlIG1lbnUuIiwnJykKICAgIGVsaWYgbXlwbGF0Zm9ybSA9PSAnYW5kcm9pZCc6ICMgQW5kcm9pZCAgCiAgICAgICAgcHJpbnQgIiMjIyMjIyMjIyMjIyAgIHRyeSBhbmRyb2lkIGZvcmNlIGNsb3NlICAjIyMjIyMjIyMjIyMjIyMjIyIKICAgICAgICB0cnk6IG9zLnN5c3RlbSgnYWRiIHNoZWxsIGFtIGZvcmNlLXN0b3Agb3JnLnhibWMua29kaScpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ2FkYiBzaGVsbCBhbSBmb3JjZS1zdG9wIG9yZy5rb2RpJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICB0cnk6IG9zLnN5c3RlbSgnYWRiIHNoZWxsIGFtIGtpbGwgb3JnLmtvZGknKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIHRyeTogb3Muc3lzdGVtKCdhZGIgc2hlbGwgYW0gZm9yY2Utc3RvcCBvcmcueGJtYy54Ym1jJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICB0cnk6IG9zLnN5c3RlbSgnYWRiIHNoZWxsIGFtIGZvcmNlLXN0b3Agb3JnLnhibWMnKQogICAgICAgIGV4Y2VwdDogcGFzcyAgICAgICAgCiAgICAgICAgZGlhbG9nLm9rKCJbQ09MT1I9cmVkXVtCXVdBUk5JTkcgICEhIVsvQ09MT1JdWy9CXSIsICJZb3VyIHN5c3RlbSBoYXMgYmVlbiBkZXRlY3RlZCBhcyBBbmRyb2lkLCB5b3UgIiwgIltDT0xPUj15ZWxsb3ddW0JdTVVTVFsvQ09MT1JdWy9CXSBmb3JjZSBjbG9zZSBYQk1DL0tvZGkuIFtDT0xPUj1saW1lXURPIE5PVFsvQ09MT1JdIGV4aXQgY2xlYW5seSB2aWEgdGhlIG1lbnUuIiwiUHVsbGluZyB0aGUgcG93ZXIgY2FibGUgaXMgdGhlIHNpbXBsZXN0IG1ldGhvZCB0byBmb3JjZSBjbG9zZS4iKQogICAgZWxpZiBteXBsYXRmb3JtID09ICd3aW5kb3dzJzogIyBXaW5kb3dzCiAgICAgICAgcHJpbnQgIiMjIyMjIyMjIyMjIyAgIHRyeSB3aW5kb3dzIGZvcmNlIGNsb3NlICAjIyMjIyMjIyMjIyMjIyMjIyIKICAgICAgICB0cnk6CiAgICAgICAgICAgIG9zLnN5c3RlbSgnQEVDSE8gb2ZmJykKICAgICAgICAgICAgb3Muc3lzdGVtKCd0c2tpbGwgWEJNQy5leGUnKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIHRyeToKICAgICAgICAgICAgb3Muc3lzdGVtKCdARUNITyBvZmYnKQogICAgICAgICAgICBvcy5zeXN0ZW0oJ3Rza2lsbCBLb2RpLmV4ZScpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgdHJ5OgogICAgICAgICAgICBvcy5zeXN0ZW0oJ0BFQ0hPIG9mZicpCiAgICAgICAgICAgIG9zLnN5c3RlbSgnVEFTS0tJTEwgL2ltIEtvZGkuZXhlIC9mJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICB0cnk6CiAgICAgICAgICAgIG9zLnN5c3RlbSgnQEVDSE8gb2ZmJykKICAgICAgICAgICAgb3Muc3lzdGVtKCdUQVNLS0lMTCAvaW0gWEJNQy5leGUgL2YnKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIGRpYWxvZy5vaygiW0NPTE9SPXJlZF1bQl1XQVJOSU5HICAhISFbL0NPTE9SXVsvQl0iLCAiSWYgeW91XCdyZSBzZWVpbmcgdGhpcyBtZXNzYWdlIGl0IG1lYW5zIHRoZSBmb3JjZSBjbG9zZSIsICJ3YXMgdW5zdWNjZXNzZnVsLiBQbGVhc2UgZm9yY2UgY2xvc2UgWEJNQy9Lb2RpIFtDT0xPUj1saW1lXURPIE5PVFsvQ09MT1JdIGV4aXQgY2xlYW5seSB2aWEgdGhlIG1lbnUuIiwiVXNlIHRhc2sgbWFuYWdlciBhbmQgTk9UIEFMVCBGNCIpCiAgICBlbHNlOiAjQVRWCiAgICAgICAgcHJpbnQgIiMjIyMjIyMjIyMjIyAgIHRyeSBhdHYgZm9yY2UgY2xvc2UgICMjIyMjIyMjIyMjIyMjIyMjIgogICAgICAgIHRyeTogb3Muc3lzdGVtKCdraWxsYWxsIEFwcGxlVFYnKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIHByaW50ICIjIyMjIyMjIyMjIyMgICB0cnkgcmFzcGJtYyBmb3JjZSBjbG9zZSAgIyMjIyMjIyMjIyMjIyMjIyMiICNPU01DIC8gUmFzcGJtYwogICAgICAgIHRyeTogb3Muc3lzdGVtKCdzdWRvIGluaXRjdGwgc3RvcCBrb2RpJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICB0cnk6IG9zLnN5c3RlbSgnc3VkbyBpbml0Y3RsIHN0b3AgeGJtYycpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgZGlhbG9nLm9rKCJbQ09MT1I9cmVkXVtCXVdBUk5JTkcgICEhIVsvQ09MT1JdWy9CXSIsICJJZiB5b3VcJ3JlIHNlZWluZyB0aGlzIG1lc3NhZ2UgaXQgbWVhbnMgdGhlIGZvcmNlIGNsb3NlIiwgIndhcyB1bnN1Y2Nlc3NmdWwuIFBsZWFzZSBmb3JjZSBjbG9zZSBYQk1DL0tvZGkgW0NPTE9SPWxpbWVdRE8gTk9UWy9DT0xPUl0gZXhpdCB2aWEgdGhlIG1lbnUuIiwiWW91ciBwbGF0Zm9ybSBjb3VsZCBub3QgYmUgZGV0ZWN0ZWQgc28ganVzdCBwdWxsIHRoZSBwb3dlciBjYWJsZS4iKSAgICAKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjI0RFVEVSTUlORSBQTEFURk9STSMjIyMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAgICAgCmRlZiBwbGF0Zm9ybSgpOgogICAgaWYgeGJtYy5nZXRDb25kVmlzaWJpbGl0eSgnc3lzdGVtLnBsYXRmb3JtLmFuZHJvaWQnKToKICAgICAgICByZXR1cm4gJ2FuZHJvaWQnCiAgICBlbGlmIHhibWMuZ2V0Q29uZFZpc2liaWxpdHkoJ3N5c3RlbS5wbGF0Zm9ybS5saW51eCcpOgogICAgICAgIHJldHVybiAnbGludXgnCiAgICBlbGlmIHhibWMuZ2V0Q29uZFZpc2liaWxpdHkoJ3N5c3RlbS5wbGF0Zm9ybS53aW5kb3dzJyk6CiAgICAgICAgcmV0dXJuICd3aW5kb3dzJwogICAgZWxpZiB4Ym1jLmdldENvbmRWaXNpYmlsaXR5KCdzeXN0ZW0ucGxhdGZvcm0ub3N4Jyk6CiAgICAgICAgcmV0dXJuICdvc3gnCiAgICBlbGlmIHhibWMuZ2V0Q29uZFZpc2liaWxpdHkoJ3N5c3RlbS5wbGF0Zm9ybS5hdHYyJyk6CiAgICAgICAgcmV0dXJuICdhdHYyJwogICAgZWxpZiB4Ym1jLmdldENvbmRWaXNpYmlsaXR5KCdzeXN0ZW0ucGxhdGZvcm0uaW9zJyk6CiAgICAgICAgcmV0dXJuICdpb3MnCiAgICAKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyNGUkVTSCBTVEFSVCMjIyMjIyMjIyMjIyMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCmRlZiBGUkVTSFNUQVJUKHBhcmFtcyk6CiAgICBpZiBza2luIT0gInNraW4uY29uZmx1ZW5jZSI6CiAgICAgICAgZGlhbG9nLm9rKCdbQ09MT1Igb3JhbmdlXVtCXVNjaGlzTSBUVlsvQl1bL0NPTE9SXVtDT0xPUiB3aGl0ZV1XaXphcmRbL0NPTE9SXSAnLCdQbGVhc2Ugc3dpdGNoIHRvIHRoZSBkZWZhdWx0IENvbmZsdWVuY2Ugc2tpbicsJ2JlZm9yZSBwZXJmb3JtaW5nIGEgd2lwZS4nLCcnKQogICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oIkFjdGl2YXRlV2luZG93KGFwcGVhcmFuY2VzZXR0aW5ncykiKQogICAgICAgIHJldHVybgogICAgZWxzZToKICAgICAgICBjaG9pY2UyID0geGJtY2d1aS5EaWFsb2coKS55ZXNubygiW0NPTE9SPXJlZF1BQlNPTFVURUxZIENFUlRBSU4|Jywgbm9sYWJlbD0nTm8sIENhbmNlbCcseWVzbGFiZWw9J1llcywgQ2xvc2UnKQogICAgaWYgY2hvaWNlID09IDA6CiAgICAgICAgSU5ERVgoKQogICAgZWxpZiBjaG9pY2UgPT0gMToKICAgICAgICBwYXNzCiAgICBteXBsYXRmb3JtID0gcGxhdGZvcm0oKQogICAgcHJpbnQgIlBsYXRmb3JtOiAiICsgc3RyKG15cGxhdGZvcm0pCiAgICBpZiBteXBsYXRmb3JtID09ICdvc3gnOiAjIE9TWAogICAgICAgIHByaW50ICIjIyMjIyMjIyMjIyMgICB0cnkgb3N4IGZvcmNlIGNsb3NlICAjIyMjIyMjIyMjIyMjIyMjIyIKICAgICAgICB0cnk6IG9zLnN5c3RlbSgna2lsbGFsbCAtOSBYQk1DJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICB0cnk6IG9zLnN5c3RlbSgna2lsbGFsbCAtOSBLb2RpJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICBkaWFsb2cub2soIltDT0xPUj1yZWRdW0JdV0FSTklORyAgISEhWy9DT0xPUl1bL0JdIiwgIklmIHlvdVwncmUgc2VlaW5nIHRoaXMgbWVzc2FnZSBpdCBtZWFucyB0aGUgZm9yY2UgY2xvc2UiLCAid2FzIHVuc3VjY2Vzc2Z1bC4gUGxlYXNlIGZvcmNlIGNsb3NlIFhCTUMvS29kaSBbQ09MT1I9bGltZV1ETyBOT1RbL0NPTE9SXSBleGl0IGNsZWFubHkgdmlhIHRoZSBtZW51LiIsJycpCiAgICBlbGlmIG15cGxhdGZvcm0gPT0gJ2xpbnV4JzogI0xpbnV4CiAgICAgICAgcHJpbnQgIiMjIyMjIyMjIyMjIyAgIHRyeSBsaW51eCBmb3JjZSBjbG9zZSAgIyMjIyMjIyMjIyMjIyMjIyMiCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ2tpbGxhbGwgWEJNQycpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ2tpbGxhbGwgS29kaScpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ2tpbGxhbGwgLTkgeGJtYy5iaW4nKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIHRyeTogb3Muc3lzdGVtKCdraWxsYWxsIC05IGtvZGkuYmluJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICBkaWFsb2cub2soIltDT0xPUj1yZWRdW0JdV0FSTklORyAgISEhWy9DT0xPUl1bL0JdIiwgIklmIHlvdVwncmUgc2VlaW5nIHRoaXMgbWVzc2FnZSBpdCBtZWFucyB0aGUgZm9yY2UgY2xvc2UiLCAid2FzIHVuc3VjY2Vzc2Z1bC4gUGxlYXNlIGZvcmNlIGNsb3NlIFhCTUMvS29kaSBbQ09MT1I9bGltZV1ETyBOT1RbL0NPTE9SXSBleGl0IGNsZWFubHkgdmlhIHRoZSBtZW51LiIsJycpCiAgICBlbGlmIG15cGxhdGZvcm0gPT0gJ2FuZHJvaWQnOiAjIEFuZHJvaWQgIAogICAgICAgIHByaW50ICIjIyMjIyMjIyMjIyMgICB0cnkgYW5kcm9pZCBmb3JjZSBjbG9zZSAgIyMjIyMjIyMjIyMjIyMjIyMiCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ2FkYiBzaGVsbCBhbSBmb3JjZS1zdG9wIG9yZy54Ym1jLmtvZGknKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIHRyeTogb3Muc3lzdGVtKCdhZGIgc2hlbGwgYW0gZm9yY2Utc3RvcCBvcmcua29kaScpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ2FkYiBzaGVsbCBhbSBmb3JjZS1zdG9wIG9yZy54Ym1jLnhibWMnKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIHRyeTogb3Muc3lzdGVtKCdhZGIgc2hlbGwgYW0gZm9yY2Utc3RvcCBvcmcueGJtYycpCiAgICAgICAgZXhjZXB0OiBwYXNzICAgICAgICAKICAgICAgICBkaWFsb2cub2soIltDT0xPUj1yZWRdW0JdV0FSTklORyAgISEhWy9DT0xPUl1bL0JdIiwgIllvdXIgc3lzdGVtIGhhcyBiZWVuIGRldGVjdGVkIGFzIEFuZHJvaWQsIHlvdSAiLCAiW0NPTE9SPXllbGxvd11bQl1NVVNUWy9DT0xPUl1bL0JdIGZvcmNlIGNsb3NlIFhCTUMvS29kaS4gW0NPTE9SPWxpbWVdRE8gTk9UWy9DT0xPUl0gZXhpdCBjbGVhbmx5IHZpYSB0aGUgbWVudS4iLCJQdWxsaW5nIHRoZSBwb3dlciBjYWJsZSBpcyB0aGUgc2ltcGxlc3QgbWV0aG9kIHRvIGZvcmNlIGNsb3NlLiIpCiAgICBlbGlmIG15cGxhdGZvcm0gPT0gJ3dpbmRvd3MnOiAjIFdpbmRvd3MKICAgICAgICBwcmludCAiIyMjIyMjIyMjIyMjICAgdHJ5IHdpbmRvd3MgZm9yY2UgY2xvc2UgICMjIyMjIyMjIyMjIyMjIyMjIgogICAgICAgIHRyeToKICAgICAgICAgICAgb3Muc3lzdGVtKCdARUNITyBvZmYnKQogICAgICAgICAgICBvcy5zeXN0ZW0oJ3Rza2lsbCBYQk1DLmV4ZScpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgdHJ5OgogICAgICAgICAgICBvcy5zeXN0ZW0oJ0BFQ0hPIG9mZicpCiAgICAgICAgICAgIG9zLnN5c3RlbSgndHNraWxsIEtvZGkuZXhlJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICB0cnk6CiAgICAgICAgICAgIG9zLnN5c3RlbSgnQEVDSE8gb2ZmJykKICAgICAgICAgICAgb3Muc3lzdGVtKCdUQVNLS0lMTCAvaW0gS29kaS5leGUgL2YnKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIHRyeToKICAgICAgICAgICAgb3Muc3lzdGVtKCdARUNITyBvZmYnKQogICAgICAgICAgICBvcy5zeXN0ZW0oJ1RBU0tLSUxMIC9pbSBYQk1DLmV4ZSAvZicpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgZGlhbG9nLm9rKCJbQ09MT1I9cmVkXVtCXVdBUk5JTkcgICEhIVsvQ09MT1JdWy9CXSIsICJJZiB5b3VcJ3JlIHNlZWluZyB0aGlzIG1lc3NhZ2UgaXQgbWVhbnMgdGhlIGZvcmNlIGNsb3NlIiwgIndhcyB1bnN1Y2Nlc3NmdWwuIFBsZWFzZSBmb3JjZSBjbG9zZSBYQk1DL0tvZGkgW0NPTE9SPWxpbWVdRE8gTk9UWy9DT0xPUl0gZXhpdCBjbGVhbmx5IHZpYSB0aGUgbWVudS4iLCJVc2UgdGFzayBtYW5hZ2VyIGFuZCBOT1QgQUxUIEY0IikKICAgIGVsc2U6ICNBVFYKICAgICAgICBwcmludCAiIyMjIyMjIyMjIyMjICAgdHJ5IGF0diBmb3JjZSBjbG9zZSAgIyMjIyMjIyMjIyMjIyMjIyMiCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ2tpbGxhbGwgQXBwbGVUVicpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgcHJpbnQgIiMjIyMjIyMjIyMjIyAgIHRyeSByYXNwYm1jIGZvcmNlIGNsb3NlICAjIyMjIyMjIyMjIyMjIyMjIyIgI09TTUMgLyBSYXNwYm1jCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ3N1ZG8gaW5pdGN0bCBzdG9wIGtvZGknKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIHRyeTogb3Muc3lzdGVtKCdzdWRvIGluaXRjdGwgc3RvcCB4Ym1jJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICBkaWFsb2cub2soIltDT0xPUj1yZWRdW0JdV0FSTklORyAgISEhWy9DT0xPUl1bL0JdIiwgIklmIHlvdVwncmUgc2VlaW5nIHRoaXMgbWVzc2FnZSBpdCBtZWFucyB0aGUgZm9yY2UgY2xvc2UiLCAid2FzIHVuc3VjY2Vzc2Z1bC4gUGxlYXNlIGZvcmNlIGNsb3NlIFhCTUMvS29kaSBbQ09MT1I9bGltZV1ETyBOT1RbL0NPTE9SXSBleGl0IHZpYSB0aGUgbWVudS4iLCJZb3VyIHBsYXRmb3JtIGNvdWxkIG5vdCBiZSBkZXRlY3RlZCBzbyBqdXN0IHB1bGwgdGhlIHBvd2VyIGNhYmxlLiIpCgpkZWYgQWRkb25fU2V0dGluZ3MoKToKICAgIEFERE9OLm9wZW5TZXR0aW5ncyhzeXMuYXJndlswXSkKCmRlZiBXaXBlWEJNQygpOgogICAgaWYgc2tpbiE9ICJza2luLmNvbmZsdWVuY2UiOgogICAgICAgIGRpYWxvZy5vaygnW0NPTE9SPWJsdWVdW0JdU2NoaXNNIFRWWy9CXVsvQ09MT1JdW0NPTE9SPWdyZWVuXVsvQ09MT1JdIEN1c3RvbSBCdWlsZHMgVG9vbCcsJ1BsZWFzZSBzd2l0Y2ggdG8gdGhlIGRlZmF1bHQgQ29uZmx1ZW5jZSBza2luJywnYmVmb3JlIHBlcmZvcm1pbmcgYSB3aXBlLicsJycpCiAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiQWN0aXZhdGVXaW5kb3coYXBwZWFyYW5jZXNldHRpbmdzKSIpCiAgICAgICAgcmV0dXJuCiAgICBlbHNlOgogICAgICAgIGNob2ljZSA9IHhibWNndWkuRGlhbG9nKCkueWVzbm8oIlZFUlkgSU1QT1JUQU5UIiwgJ1RoaXMgd2lsbCBjb21wbGV0ZWx5IHdpcGUgeW91ciBpbnN0YWxsLicsICdXb3VsZCB5b3UgbGlrZSB0byBjcmVhdGUgYSBiYWNrdXAgYmVmb3JlIHByb2NlZWRpbmc|JywgJycsICcnLCB5ZXNsYWJlbD0nWWVzJyxub2xhYmVsPSdObycpCiAgIGlmIGNob2ljZSA9PSAwOgoJIHJldHVybgogICBlbGlmIGNob2ljZSA9PSAxOiAgIAogICAgdG9fYmFja3VwID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovLycsJ2hvbWUvdXNlcmRhdGEvYWRkb25fZGF0YScpKQogICAgYmFja3VwX3ppcCA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXBfc2tpbnNob3J0Y3V0cy56aXAnKSkKICAgIGJhY2t1cF9wYXRoID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihiYWNrdXBkaXIsJ2JhY2t1cCcpKSAgICAKICAgIGltcG9ydCB6aXBmaWxlCiAgICBkcCA9IHhibWNndWkuRGlhbG9nUHJvZ3Jlc3MoKQogICAgZHAuY3JlYXRlKCJCQUNLVVAvUkVTVE9SRSIsIkJhY2tpbmcgVXAgU2tpbiBTaG9ydGN1dHMiLCcnLCAnUGxlYXNlIFdhaXQnKQogICAgemlwb2JqID0gemlwZmlsZS5aaXBGaWxlKGJhY2t1cF96aXAgLCAndycsIHppcGZpbGUuWklQX0RFRkxBVEVEKQogICAgcm9vdGxlbiA9IGxlbih0b19iYWNrdXApCiAgICBmb3JfcHJvZ3Jlc3MgPSBbXQogICAgSVRFTSA9W10KICAgIGZvciBiYXNlLCBkaXJzLCBmaWxlcyBpbiBvcy53YWxrKHRvX2JhY2t1cCk6CglkaXJzWzpdID0gW2QgZm9yIGQgaW4gZGlycyBpZiBkIG5vdCBpbiBTS0lOU0hPUlRDVVRTXQoJZmlsZXNbOl0gPSBbZiBmb3IgZiBpbiBkaXJzIGlmIGYgbm90IGluIFNLSU5TSE9SVENVVFNdCiAgICAgICAgZm9yIG5hbWUgaW4gZGlyczoKICAgICAgICAgICAgSVRFTS5hcHBlbmQobmFtZSkKICAgICAgICBmb3IgbmFtZSBpbiBmaWxlczoKICAgICAgICAgICAgSVRFTS5hcHBlbmQobmFtZSkKICAgIE5fSVRFTSA9bGVuKElURU0pCiAgICBmb3IgYmFzZSwgZGlycywgZmlsZXMgaW4gb3Mud2Fsayh0b19iYWNrdXApOgoJZGlyc1s6XSA9IFtkIGZvciBkIGluIGRpcnMgaWYgZCBpbiBTS0lOU0hPUlRDVVRTXQogICAgICAgIGZvciBuYW1lIGluIGZpbGVzOgogICAgICAgICAgICBmb3JfcHJvZ3Jlc3MuYXBwZW5kKG5hbWUpIAogICAgICAgICAgICBwcm9ncmVzcyA9IGxlbihmb3JfcHJvZ3Jlc3MpIC8gZmxvYXQoTl9JVEVNKSAqIDEwMCAgCiAgICAgICAgICAgIGRwLnVwZGF0ZShpbnQocHJvZ3Jlc3MpLCJCYWNraW5nIFVwIiwnW0NPTE9SIHllbGxvd10lc1svQ09MT1JdJyVuYW1lLCAnUGxlYXNlIFdhaXQnKQogICAgICAgICAgICBmbiA9IG9zLnBhdGguam9pbihiYXNlLCBuYW1lKQogICAgICAgICAgICBpZiBub3QgJ3RlbXAnIGluIGRpcnM6CiAgICAgICAgICAgICAgICBpZiBub3QgJ3BsdWdpbi52aWRlby51c2J3aXphcmQnIGluIGRpcnM6CiAgICAgICAgICAgICAgICAgICBpbXBvcnQgdGltZQogICAgICAgICAgICAgICAgICAgQ1VOVD0gJzAxLzAxLzE5ODAnCiAgICAgICAgICAgICAgICAgICBGSUxFX0RBVEU9dGltZS5zdHJmdGltZSgnJWQvJW0vJVknLCB0aW1lLmdtdGltZShvcy5wYXRoLmdldG10aW1lKGZuKSkpCiAgICAgICAgICAgICAgICAgICBpZiBGSUxFX0RBVEUgPiBDVU5UOgogICAgICAgICAgICAgICAgICAgICAgIHppcG9iai53cml0ZShmbiwgZm5bcm9vdGxlbjpdKSAgCiAgICB6aXBvYmouY2xvc2UoKQogICAgZHAuY2xvc2UoKQogICAgZGlhbG9nLm9rKCJCQUNLVVAvUkVTVE9SRSIsICJTS0lOIFNob3J0Y3V0cyBBcmUgTm93IEJhY2tlZCBVcCIsICcnLCcnKQogICAgCgkKZGVmIEJBQ0tVUEdVSSgpOiAgCiAgICBpZiBvcy5wYXRoLmV4aXN0cyhvcy5wYXRoLmpvaW4oVVNFUkRBVEEsJ2d1aXNldHRpbmdzLnhtbCcpKToKICAgICAgIHRvX2JhY2t1cCA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly8nLCdob21lL3VzZXJkYXRhJykpCQogICAgICAgcm9vdGxlbiA9IGxlbih0b19iYWNrdXApCiAgICAgICBiYWNrdXBfdWlfemlwID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihiYWNrdXBkaXIsJ2JhY2t1cF91aS56aXAnKSkKICAgICAgIHppcG9iaiA9IHppcGZpbGUuWmlwRmlsZShiYWNrdXBfdWlfemlwICwgJ3cnLCB6aXBmaWxlLlpJUF9ERUZMQVRFRCkKICAgICAgIGZuID0gb3MucGF0aC5qb2luKFVTRVJEQVRBLCAnZ3Vpc2V0dGluZ3MueG1sJykKICAgICAgIGNob2ljZSA9IHhibWNndWkuRGlhbG9nKCkueWVzbm8oIlNraW4gU2V0dGluZ3MiLCAnRG8geW91IHdhbnQgdG8gYmFja3VwIHlvdXIgU2tpbiBzZXR0aW5ncz8nLCAnJywgJycsIHllc2xhYmVsPSdZZXMnLG5vbGFiZWw9J05vJykKICAgICAgIGlmIGNob2ljZSA9PSAwOgogICAgICAgIHJldHVybgogICAgICAgZWxpZiBjaG9pY2UgPT0gMToKCSAgIGRwLmNyZWF0ZSgiQkFDS1VQL1JFU1RPUkUiLCJCYWNraW5nIFVwIEd1aSBTZXR0aW5ncyIsJycsICdQbGVhc2UgV2FpdCcpCgkgICB6aXBvYmoud3JpdGUoZm4sIGZuW3Jvb3RsZW46XSkKCSAgIGRwLmNsb3NlKCkKCSAgIGRpYWxvZy5vaygiQkFDS1VQL1JFU1RPUkUiLCAiR3VpIHNldHRpbmdzIEFyZSBOb3cgQmFja2VkIFVwIiwgJycsJycpCiAgICAgICAKCmRlZiBCQUNLVVBGQVYoKTogIAogICAgaWYgb3MucGF0aC5leGlzdHMob3MucGF0aC5qb2luKFVTRVJEQVRBLCdmYXZvdXJpdGVzLnhtbCcpKToKICAgICAgIHRvX2JhY2t1cCA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly8nLCdob21lL3VzZXJkYXRhJykpCQogICAgICAgcm9vdGxlbiA9IGxlbih0b19iYWNrdXApCiAgICAgICBiYWNrdXBfdWlfemlwID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihiYWNrdXBkaXIsJ2JhY2t1cF9mYXYuemlwJykpCiAgICAgICB6aXBvYmogPSB6aXBmaWxlLlppcEZpbGUoYmFja3VwX3VpX3ppcCAsICd3JywgemlwZmlsZS5aSVBfREVGTEFURUQpCiAgICAgICBmbiA9IG9zLnBhdGguam9pbihVU0VSREFUQSwgJ2Zhdm91cml0ZXMueG1sJykKICAgICAgIGNob2ljZSA9IHhibWNndWkuRGlhbG9nKCkueWVzbm8oIkd1aSBTZXR0aW5ncyIsICdEbyB5b3Ugd2FudCB0byBiYWNrdXAgeW91ciBmYXZvdXJpdGVzPycsICcnLCAnJywgeWVzbGFiZWw9J1llcycsbm9sYWJlbD0nTm8nKQogICAgICAgaWYgY2hvaWNlID09IDA6CiAgICAgICAgICAgIHJldHVybgogICAgICAgZWxpZiBjaG9pY2UgPT0gMToKCSAgIGRwLmNyZWF0ZSgiQkFDS1VQL1JFU1RPUkUiLCJCYWNraW5nIFVwIEZhdm91cml0ZXMiLCcnLCAnUGxlYXNlIFdhaXQnKQoJICAgemlwb2JqLndyaXRlKGZuLCBmbltyb290bGVuOl0pCgkgICBkcC5jbG9zZSgpCgkgICBkaWFsb2cub2soIkJBQ0tVUC9SRVNUT1JFIiwgIkZhdm91cml0ZXMgQXJlIE5vdyBCYWNrZWQgVXAiLCAnJywnJykgICAgICAgICAgCiAgICAJICAgCgpkZWYgQkFDS1VQU09VUkNFKCk6ICAKICAgIGlmIG9zLnBhdGguZXhpc3RzKG9zLnBhdGguam9pbihVU0VSREFUQSwnc291cmNlcy54bWwnKSk6CiAgICAgICB0b19iYWNrdXAgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vJywnaG9tZS91c2VyZGF0YScpKQkKICAgICAgIHJvb3RsZW4gPSBsZW4odG9fYmFja3VwKQogICAgICAgYmFja3VwX3VpX3ppcCA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXBfc291cmNlcy56aXAnKSkKICAgICAgIHppcG9iaiA9IHppcGZpbGUuWmlwRmlsZShiYWNrdXBfdWlfemlwICwgJ3cnLCB6aXBmaWxlLlpJUF9ERUZMQVRFRCkKICAgICAgIGZuID0gb3MucGF0aC5qb2luKFVTRVJEQVRBLCAnc291cmNlcy54bWwnKQogICAgICAgY2hvaWNlID0geGJtY2d1aS5EaWFsb2coKS55ZXNubygiR3VpIFNldHRpbmdzIiwgJ0RvIHlvdSB3YW50IHRvIGJhY2t1cCB5b3VyIHNvdXJjZXM|PTI6CiAgICAgICAgICAgICAgICBwYXJhbXM9c3lzLmFyZ3ZbMl0KICAgICAgICAgICAgICAgIGNsZWFuZWRwYXJhbXM9cGFyYW1zLnJlcGxhY2UoJz8nLCcnKQogICAgICAgICAgICAgICAgaWYgKHBhcmFtc1tsZW4ocGFyYW1zKS0xXT09Jy8nKToKICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zPXBhcmFtc1swOmxlbihwYXJhbXMpLTJdCiAgICAgICAgICAgICAgICBwYWlyc29mcGFyYW1zPWNsZWFuZWRwYXJhbXMuc3BsaXQoJyYnKQogICAgICAgICAgICAgICAgcGFyYW09e30KICAgICAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKGxlbihwYWlyc29mcGFyYW1zKSk6CiAgICAgICAgICAgICAgICAgICAgICAgIHNwbGl0cGFyYW1zPXt9CiAgICAgICAgICAgICAgICAgICAgICAgIHNwbGl0cGFyYW1zPXBhaXJzb2ZwYXJhbXNbaV0uc3BsaXQoJz0nKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVuKHNwbGl0cGFyYW1zKSk9PTI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1bc3BsaXRwYXJhbXNbMF1dPXNwbGl0cGFyYW1zWzFdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIHBhcmFtCgpOID0gYmFzZTY0LmRlY29kZXN0cmluZygnJykKVCA9IGJhc2U2NC5kZWNvZGVzdHJpbmcoJ0wyRmtaRzl1Y3k1MGVIUT0nKQpCID0gYmFzZTY0LmRlY29kZXN0cmluZygnJykKRiA9IGJhc2U2NC5kZWNvZGVzdHJpbmcoJycpCgpkZWYgYWRkRGlyKG5hbWUsdXJsLG1vZGUsaWNvbmltYWdlLGZhbmFydCxkZXNjcmlwdGlvbik6CiAgICAgICAgdT1zeXMuYXJndlswXSsiP3VybD0iK3VybGxpYi5xdW90ZV9wbHVzKHVybCkrIiZtb2RlPSIrc3RyKG1vZGUpKyImbmFtZT0iK3VybGxpYi5xdW90ZV9wbHVzKG5hbWUpKyImaWNvbmltYWdlPSIrdXJsbGliLnF1b3RlX3BsdXMoaWNvbmltYWdlKSsiJmZhbmFydD0iK3VybGxpYi5xdW90ZV9wbHVzKGZhbmFydCkrIiZkZXNjcmlwdGlvbj0iK3VybGxpYi5xdW90ZV9wbHVzKGRlc2NyaXB0aW9uKQogICAgICAgIG9rPVRydWUKICAgICAgICBsaXo9eGJtY2d1aS5MaXN0SXRlbShuYW1lLCBpY29uSW1hZ2U9IkRlZmF1bHRGb2xkZXIucG5nIiwgdGh1bWJuYWlsSW1hZ2U9aWNvbmltYWdlKQogICAgICAgIGxpei5zZXRJbmZvKCB0eXBlPSJWaWRlbyIsIGluZm9MYWJlbHM9eyAiVGl0bGUiOiBuYW1lLCAiUGxvdCI6IGRlc2NyaXB0aW9uIH0gKQogICAgICAgIGxpei5zZXRQcm9wZXJ0eSggIkZhbmFydF9JbWFnZSIsIGZhbmFydCApCiAgICAgICAgaWYgbW9kZT09OTAgOgogICAgICAgICAgICBvaz14Ym1jcGx1Z2luLmFkZERpcmVjdG9yeUl0ZW0oaGFuZGxlPWludChzeXMuYXJndlsxXSksdXJsPXUsbGlzdGl0ZW09bGl6LGlzRm9sZGVyPUZhbHNlKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG9rPXhibWNwbHVnaW4uYWRkRGlyZWN0b3J5SXRlbShoYW5kbGU9aW50KHN5cy5hcmd2WzFdKSx1cmw9dSxsaXN0aXRlbT1saXosaXNGb2xkZXI9VHJ1ZSkKICAgICAgICByZXR1cm4gb2sKCiAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAKcGFyYW1zPWdldF9wYXJhbXMoKQp1cmw9Tm9uZQpuYW1lPU5vbmUKbW9kZT1Ob25lCmljb25pbWFnZT1Ob25lCmZhbmFydD1Ob25lCmRlc2NyaXB0aW9uPU5vbmUKCgp0cnk6CiAgICAgICAgdXJsPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJ1cmwiXSkKZXhjZXB0OgogICAgICAgIHBhc3MKdHJ5OgogICAgICAgIG5hbWU9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbIm5hbWUiXSkKZXhjZXB0OgogICAgICAgIHBhc3MKdHJ5OgogICAgICAgIGljb25pbWFnZT11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1siaWNvbmltYWdlIl0pCmV4Y2VwdDoKICAgICAgICBwYXNzCnRyeTogICAgICAgIAogICAgICAgIG1vZGU9aW50KHBhcmFtc1sibW9kZSJdKQpleGNlcHQ6CiAgICAgICAgcGFzcwp0cnk6ICAgICAgICAKICAgICAgICBmYW5hcnQ9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbImZhbmFydCJdKQpleGNlcHQ6CiAgICAgICAgcGFzcwp0cnk6ICAgICAgICAKICAgICAgICBkZXNjcmlwdGlvbj11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1siZGVzY3JpcHRpb24iXSkKZXhjZXB0OgogICAgICAgIHBhc3MKICAgICAgICAKICAgICAgICAKcHJpbnQgc3RyKFBBVEgpKyc6ICcrc3RyKFZFUlNJT04pCnByaW50ICJNb2RlOiAiK3N0cihtb2RlKQpwcmludCAiVVJMOiAiK3N0cih1cmwpCnByaW50ICJOYW1lOiAiK3N0cihuYW1lKQpwcmludCAiSWNvbkltYWdlOiAiK3N0cihpY29uaW1hZ2UpCgoKZGVmIHNldFZpZXcoY29udGVudCwgdmlld1R5cGUpOgogICAgIyBzZXQgY29udGVudCB0eXBlIHNvIGxpYnJhcnkgc2hvd3MgbW9yZSB2aWV3cyBhbmQgaW5mbwogICAgaWYgY29udGVudDoKICAgICAgICB4Ym1jcGx1Z2luLnNldENvbnRlbnQoaW50KHN5cy5hcmd2WzFdKSwgY29udGVudCkKICAgIGlmIEFERE9OLmdldFNldHRpbmcoJ2F1dG8tdmlldycpPT0ndHJ1ZSc6CiAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiQ29udGFpbmVyLlNldFZpZXdNb2RlKCVzKSIgJSBBRERPTi5nZXRTZXR0aW5nKHZpZXdUeXBlKSApCiAgICAgICAgCiAgICAgICAgCmlmIG1vZGU9PU5vbmUgb3IgdXJsPT1Ob25lIG9yIGxlbih1cmwpPDE6CiAgICAgICAgSU5ERVgoKQoKZWxpZiBtb2RlPT0yMDoKICAgICAgICBCVUlMRE1FTlUoKQoKZWxpZiBtb2RlPT00OgogICAgICAgIFJFU1RPUkUoKQoJCQplbGlmIG1vZGU9PTM6CiAgICAgICAgQkFDS1VQTUVOVSgpCgoJCQplbGlmIG1vZGU9PTY6ICAgICAgICAKCUZSRVNIU1RBUlQocGFyYW1zKQoJCmVsaWYgbW9kZT09NzoKICAgICAgIERlbGV0ZVBhY2thZ2VzKHVybCkKCQkKZWxpZiBtb2RlPT0xMDoKICAgICAgICBBRERPTldJWkFSRChuYW1lLHVybCxkZXNjcmlwdGlvbikKCmVsaWYgbW9kZT09ODI6CiAgICAgICAgcHJpbnQgIiMjIyMjIyMjIyMjIyAgIFdJUEUgWEJNQyAgICMjIyMjIyMjIyMjIyMjIyMjIgogICAgICAgIFdpcGVYQk1DKCkKCmVsaWYgbW9kZT09ODU6CiAgICAgICAgcHJpbnQgIiMjIyMjIyMjIyMjIyAgIEFUVEVNUFQgVE8gS0lMTCBYQk1DL0tPREkgICAjIyMjIyMjIyMjIyMjIyMjIyIKICAgICAgICBraWxseGJtYygpCgkJCmVsaWYgbW9kZT09OTA6CiAgICAgICAgV0laQVJEKG5hbWUsdXJsLGRlc2NyaXB0aW9uKQplbGlmIG1vZGU9PTEwMDoKICAgICAgICBTRVRUSU5HUygpCnhibWNwbHVnaW4uZW5kT2ZEaXJlY3RvcnkoaW50KHN5cy5hcmd2WzFdKSkK|IDk5OgoJCQkJc3RhdHVzID0gJ1tDT0xPUiBnb2xkXUVsaXRlWy9DT0xPUl0nCgkJCWVsc2U6IAoJCQkJc3RhdHVzID0gJ0ZyZWUnCgkJCWFkZERpcignW0JddXNlcjpbL0JdJysnW0NPTE9SIGxpbWVdICAnKyBlbnRyeVsnbWVtYmVyX25hbWUnXSArJ1svQ09MT1JdJysgJyAtIFtCXSBhY2NvdW50IHR5cGUgPSBbL0JdJyArIHN0YXR1cyArICdbQl0gICBQb3N0cyA9IFsvQl0nICsgJ1tDT0xPUiByZWRdJyArIHBvc3Rjb3VudCArICdbL0NPTE9SXScgLCcnLDEsSUNPTixGQU5BUlQsJycpCgkJCWFkZERpcignW0JdRG93bmxvYWRzID0gIFRoaXMgV2VlayBbL0JdJyArICdbQ09MT1IgbGltZV0nICsgZW50cnlbJ2RsX3dlZWsnXSArICdbL0NPTE9SXScgKyAnW0JdIC0gVG90YWwgWy9CXScgKyAnW0NPTE9SIGxpbWVdJyArIGVudHJ5WydkbF90b3RhbCddICsgJ1svQ09MT1JdJywnJywxLElDT04sRkFOQVJULCcnKQoKCWV4Y2VwdDpwYXNzCglpZiBub3Qgb3MucGF0aC5leGlzdHMoYmFja3VwZGlyKToKCQlvcy5tYWtlZGlycyhiYWNrdXBkaXIpCglhZGREaXIoJ1tDT0xPUiByZWRdW0JdRlJFU0ggU1RBUlRbL0JdWy9DT0xPUl0nLCd1cmwnLDYsQVJUKydmcmVzaHN0YXJ0LnBuZycsRkFOQVJULCcnKQoJYWRkRGlyKCdbQ09MT1IgbGltZV1bQl1JTlNUQUxMWy9CXVsvQ09MT1JdJyxCQVNFVVJMLDIwLEFSVCsnc2NoaXNtd2l6LnBuZycsRkFOQVJULCcnKQoJIyBhZGREaXIoJ1tDT0xPUiB5ZWxsb3ddW0JdVVBEQVRFWy9CXVsvQ09MT1JdJywndXJsJywxLEFSVCsndXBkYXRlLnBuZycsRkFOQVJULCcnKQoJYWRkRGlyKCdbQ09MT1Igb3JhbmdlXVtCXUJhY2t1cCBTZXR0aW5nc1svQl1bL0NPTE9SXScsJ3VybCcsMyxBUlQrJ3Rvb2wucG5nJyxGQU5BUlQsJycpCglhZGREaXIoJ1tDT0xPUiBvcmFuZ2VdW0JdUmVzdG9yZSBTZXR0aW5nc1svQl1bL0NPTE9SXScsJ3VybCcsNCxBUlQrJ3Rvb2wucG5nJyxGQU5BUlQsJycpCglhZGREaXIoJ1tDT0xPUiB3aGl0ZV1bQl1TZXR0aW5nc1svQl1bL0NPTE9SXScsJ3VybCcsMTAwLEFSVCsndG9vbC5wbmcnLEZBTkFSVCwnJykKCgpkZWYgQlVJTERNRU5VKCk6CglkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpCgl0cnk6CgkJdXNlcm5hbWUgPSB4Ym1jcGx1Z2luLmdldFNldHRpbmcoaW50KHN5cy5hcmd2WzFdKSwgJ3VzZXInKQoJCWVtYWlsID0geGJtY3BsdWdpbi5nZXRTZXR0aW5nKGludChzeXMuYXJndlsxXSksICdlbWFpbCcpCglleGNlcHQ6IHBhc3MKCXVzZXJsaW5rID0gT1BFTl9VUkwoJ2h0dHA6Ly9zY2hpc20tdHYuY29tL3NjaGlzbTIucGhwP2FjdGlvbj1nZXRzdGF0cyZ1c2VyPScgKyB1c2VybmFtZSArICcmZW1haWw9JyArIGVtYWlsKS5yZXBsYWNlKCdcbicsJycpLnJlcGxhY2UoJ1xyJywnJykKCXRyeToKCQlkYXRhID0ganNvbi5sb2Fkcyh1c2VybGluaykKCWV4Y2VwdDogcGFzcwoJdHJ5OiAKCQlmb3IgZW50cnkgaW4gZGF0YToKCQkJCgkJCXN0YXR1cyA9IGVudHJ5Wydwb3N0cyddCgkJCXByaW50IHN0YXR1cwoJCQlpZiBpbnQoc3RhdHVzKSA8IDEwMDoKCQkJCWRpYWxvZy5vaygiRlJFRSBBQ0NPVU5UIExJTUlUUyIsICJXZSBkZXRlY3RlZCB5b3VyIGFjY291bnQgYXMgRnJlZS4gWW91IGhhdmUgMTAgRG93bmxvYWRzIGEgd2VlayBsaW1pdC4gSW4gb3JkZXIgdG8gdW5sb2NrIGZ1bGwgZmVhdHVyZXMgcGxlYXNlIHZpc2l0IGh0dHA6Ly9zY2hpc20tdHYuY29tIGZvcnVtLiBBIHZpc2l0IGEgZGF5IGluIHRoZSBmb3J1bSBrZWVwcyB0aGUgc2VydmVyIGFuZCB0aGUgYnVpbGRzIGdvaW5nLiBUaGFuayB5b3UhIiwgIiIsIiIpCglleGNlcHQ6IHBhc3MKCgkJCQoJaWYgdXNlcm5hbWUgPT0gIiIgb3IgZW1haWwgPT0gIiI6CgkJZGlhbG9nLm9rKCJVaCBvaC4uIiwgIlBsZWFzZSBFbnRlciB5b3VyIGRldGFpbHMsIHRoZW4gcmVzdGFydCB0aGUgYWRkb24iKQoJCUFERE9OLm9wZW5TZXR0aW5ncyhzeXMuYXJndlswXSkKCQlyZXR1cm4oKQoJbGluayA9IE9QRU5fVVJMKCdodHRwOi8vc2NoaXNtLXR2LmNvbS9zY2hpc20yLnBocD9hY3Rpb249Z2V0YnVpbGRzJnVzZXI9JyArIHVzZXJuYW1lICsgJyZlbWFpbD0nICsgZW1haWwpLnJlcGxhY2UoJ1xuJywnJykucmVwbGFjZSgnXHInLCcnKQoJcHJpbnQgbGluawoJdHJ5OgoJCWRhdGEgPSBqc29uLmxvYWRzKGxpbmspCglleGNlcHQ6CgkJZGlhbG9nLm9rKCJVaCBvaC4uIiwgbGluaykKCQlyZXR1cm4oKQoJZm9yIGVudHJ5IGluIGRhdGE6CgkJYWRkRGlyKGVudHJ5WyduYW1lJ10gKyAnICAtIHZlcjogJyArICdbQ09MT1IgbGltZV0nKyBlbnRyeVsndmVyc2lvbiddICsgJ1svQ09MT1JdJyxlbnRyeVsnemlwdXJsJ10sOTAsZW50cnlbJ2ltZ3VybCddLGVudHJ5WydmYW5hcnQnXSwnJykKICAgICMgbGluayA9IE9QRU5fVVJMKCdodHRwczovL2FyY2hpdmUub3JnL2Rvd25sb2FkL3N0dl93aXphcmRfcmVsL3dpemFyZF9yZWwudHh0JykucmVwbGFjZSgnXG4nLCcnKS5yZXBsYWNlKCdccicsJycpCiAgICAjIG1hdGNoID0gcmUuY29tcGlsZSgnbmFtZT0iKC4rPykiLis|JywgJycsICcnLCB5ZXNsYWJlbD0nWWVzJyxub2xhYmVsPSdObycpCiAgICAgICAgaWYgY2hvaWNlID09IDA6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVsaWYgY2hvaWNlID09IDE6CgkJCWxpYj14Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKGJhY2t1cGRpciwnYWRkb25fZGF0YS56aXAnKSkKCQkJZHAuY3JlYXRlKCJbQ09MT1I9Ymx1ZV1bQl1TY2hpc00gVFZbL0JdWy9DT0xPUl0gQ3VzdG9tIEJ1aWxkcyBUb29sIiwiUmVzdG9yaW5nIiwnJywgJ1BsZWFzZSBXYWl0JykKCQkJZHAudXBkYXRlKDAsIiIsICJFeHRyYWN0aW5nIFppcCBQbGVhc2UgV2FpdCIpCgkJCWV4dHJhY3QuYWxsKGxpYixBRERPTl9EQVRBLGRwKQoJCQl0aW1lLnNsZWVwKDEpCgoJCmRlZiBSRVNUT1JFR1VJKCk6CiBpZiBvcy5wYXRoLmV4aXN0cyhvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXBfdWkuemlwJykpOiAgIAogICAgICAgIGltcG9ydCB0aW1lCiAgICAgICAgZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQogICAgICAgIGNob2ljZSA9IHhibWNndWkuRGlhbG9nKCkueWVzbm8oIkdVSSBTZXR0aW5ncyIsICdEbyB5b3Ugd2FudCB0byByZXN0b3JlIHlvdXIgZ3VpIHNldHRpbmdzPycsICcnLCAnJywgeWVzbGFiZWw9J1llcycsbm9sYWJlbD0nTm8nKQogICAgICAgIGlmIGNob2ljZSA9PSAwOgogICAgICAgICAgcmV0dXJuCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gMToKCQkJCgkJCQoJCQkKCQkJbGliPXhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXBfdWkuemlwJykpCgkJCWFkZG9uZm9sZGVyID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovLycsJ2hvbWUvdXNlcmRhdGEnKSkKCQkJdGltZS5zbGVlcCgyKQoJCQlkcC5jcmVhdGUoIltDT0xPUj1ibHVlXVtCXVNjaGlzTSBUVlsvQl1bL0NPTE9SXSBDdXN0b20gQnVpbGRzIFRvb2wiLCJSZXN0b3JpbmciLCcnLCAnUGxlYXNlIFdhaXQnKQoJCQlwcmludCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JwoJCQlwcmludCBhZGRvbmZvbGRlcgoJCQlwcmludCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JwoJCQlleHRyYWN0LmFsbChsaWIsYWRkb25mb2xkZXIsZHApCgkJCWRwLmNsb3NlKCkKCQkJZGlhbG9nLm9rKCJCQUNLVVAvUkVTVE9SRSIsICJHVUkgc2V0dGluZ3MgQXJlIE5vdyByZXN0b3JlZCIsICcnLCcnKQkKCgogCmRlZiBSRVNUT1JFRkFWKCk6CiBpZiBvcy5wYXRoLmV4aXN0cyhvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXBfZmF2LnppcCcpKToKICAgICAgICBpbXBvcnQgdGltZQogICAgICAgIGRpYWxvZyA9IHhibWNndWkuRGlhbG9nKCkKICAgICAgICBjaG9pY2UgPSB4Ym1jZ3VpLkRpYWxvZygpLnllc25vKCJGYXZvdXJpdGVzIFNldHRpbmdzIiwgJ0RvIHlvdSB3YW50IHRvIHJlc3RvcmUgeW91ciBGYXZvdXJpdGVzPycsICcnLCAnJywgeWVzbGFiZWw9J1llcycsbm9sYWJlbD0nTm8nKQogICAgICAgIGlmIGNob2ljZSA9PSAwOgogICAgICAgICAgICByZXR1cm4KCQkJCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gMToKCQkJCgkJCQoKCQkJbGliPXhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXBfZmF2LnppcCcpKQoJCQlhZGRvbmZvbGRlciA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly8nLCdob21lL3VzZXJkYXRhJykpCgkJCXRpbWUuc2xlZXAoMikKCQkJZHAuY3JlYXRlKCJbQ09MT1I9Ymx1ZV1bQl1TY2hpc00gVFZbL0JdWy9DT0xPUl0gQ3VzdG9tIEJ1aWxkcyBUb29sIiwiUmVzdG9yaW5nIiwnJywgJ1BsZWFzZSBXYWl0JykKCQkJcHJpbnQgJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScKCQkJcHJpbnQgYWRkb25mb2xkZXIKCQkJcHJpbnQgJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScKCQkJZXh0cmFjdC5hbGwobGliLGFkZG9uZm9sZGVyLGRwKQoJCQlkcC5jbG9zZSgpCgkJCWRpYWxvZy5vaygiQkFDS1VQL1JFU1RPUkUiLCAiRmF2b3VyaXRlcyBBcmUgTm93IHJlc3RvcmVkIiwgJycsJycpCQogCmRlZiBSRVNUT1JFU09VUkNFUygpOgogaWYgb3MucGF0aC5leGlzdHMob3MucGF0aC5qb2luKGJhY2t1cGRpciwnYmFja3VwX3NvdXJjZXMuemlwJykpOgogICAgICAgIGltcG9ydCB0aW1lCiAgICAgICAgZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQogICAgICAgIGNob2ljZSA9IHhibWNndWkuRGlhbG9nKCkueWVzbm8oIlNPVVJDRVMgU2V0dGluZ3MiLCAnRG8geW91IHdhbnQgdG8gcmVzdG9yZSB5b3VyIFNvdXJjZXM|IDAgYW5kIGxlbihmaWxlcykgPiAwOiAjY2hlY2sgZm9yIHVzZWQgZGlyZWN0b3JpZXMKICAgICAgICAgICAgdXNlZF9jb3VudCArPSAxICNpbmNyZW1lbnQgdXNlZF9jb3VudAojLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiNGdW5jdGlvbiB0byBkbyBhIGZ1bGwgd2lwZSAtIHRoaXMgaXMgY2FsbGVkIHdoZW4gZG9pbmcgYSBmcmVzaCBDQiBpbnN0YWxsLgojVGhhbmtzIHRvIGtvenogZm9yIHdvcmtpbmcgb3V0IGhvdyB0byBhZGQgYW4gZXhjbHVkZSBjbGF1c2Ugc28gQU1PYm94IEN1c3RvbSBCdWlsZHMgYWRkb25fZGF0YSBhbmQgYWRkb24gaXNuJ3QgdG91Y2hlZC4KZGVmIFdpcGVJbnN0YWxsKCk6CiAgICBpZiBza2luIT0gInNraW4uY29uZmx1ZW5jZSI6CiAgICAgICAgZGlhbG9nLm9rKCdbQ09MT1I9Ymx1ZV1bQl1TY2hpc00gVFZbL0JdWy9DT0xPUl1bQ09MT1I9Z3JlZW5dYm94Wy9DT0xPUl0gVG9vbCcsJ1BsZWFzZSBzd2l0Y2ggdG8gdGhlIGRlZmF1bHQgQ29uZmx1ZW5jZSBza2luJywnYmVmb3JlIHBlcmZvcm1pbmcgYSB3aXBlLicsJycpCiAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiQWN0aXZhdGVXaW5kb3coYXBwZWFyYW5jZXNldHRpbmdzKSIpICAgICAgIAogICAgZWxzZToKICAgICAgICBjaG9pY2UgPSB4Ym1jZ3VpLkRpYWxvZygpLnllc25vKCJXQU5UIFRPIENPTlRJTlVFPyIsICdBcmUgeW91IGFic29sdXRlbHkgY2VydGFpbiB5b3Ugd2FudCB0byB3aXBlIHRoaXMgaW5zdGFsbD8nLCAnJywgJ0FsbCBhZGRvbnMgRVhDTFVESU5HIFRISVMgV0laQVJEIHdpbGwgYmUgY29tcGxldGVseSB3aXBlZCEnLCB5ZXNsYWJlbD0nWWVzJyxub2xhYmVsPSdObycpCiAgICAgICAgaWYgY2hvaWNlID09IDA6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVsaWYgY2hvaWNlID09IDE6CiAgICAgICAgICAgIGRwLmNyZWF0ZSgiW0NPTE9SPWJsdWVdW0JdQU1PWy9CXVsvQ09MT1JdW0NPTE9SPWdyZWVuXWJveFsvQ09MT1JdIEN1c3RvbSBCdWlsZHMgVG9vbCIsIldpcGluZyBJbnN0YWxsIiwnJywgJ1BsZWFzZSBXYWl0JykKICAgICAgICAgICAgYWRkb25QYXRoPXhibWNhZGRvbi5BZGRvbihpZD1BZGRvbklEKS5nZXRBZGRvbkluZm8oJ3BhdGgnKTsgYWRkb25QYXRoPXhibWMudHJhbnNsYXRlUGF0aChhZGRvblBhdGgpOyAKICAgICAgICAgICAgeGJtY1BhdGg9b3MucGF0aC5qb2luKGFkZG9uUGF0aCwiLi4iLCIuLiIpOyB4Ym1jUGF0aD1vcy5wYXRoLmFic3BhdGgoeGJtY1BhdGgpOyBmYWlsZWQ9RmFsc2UgIAogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBmb3Igcm9vdCwgZGlycywgZmlsZXMgaW4gb3Mud2Fsayh4Ym1jUGF0aCx0b3Bkb3duPVRydWUpOgogICAgICAgICAgICAgICAgICAgIGRpcnNbOl0gPSBbZCBmb3IgZCBpbiBkaXJzIGlmIGQgbm90IGluIEVYQ0xVREVTXQogICAgICAgICAgICAgICAgICAgIGZvciBuYW1lIGluIGZpbGVzOgogICAgICAgICAgICAgICAgICAgICAgICB0cnk6IG9zLnJlbW92ZShvcy5wYXRoLmpvaW4ocm9vdCxuYW1lKSkKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgICAgICAgICAgICAgZm9yIG5hbWUgaW4gZGlyczoKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OiBvcy5ybWRpcihvcy5wYXRoLmpvaW4ocm9vdCxuYW1lKSkKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIFJFTU9WRV9FTVBUWV9GT0xERVJTKCkKICAgICAgICBSRU1PVkVfRU1QVFlfRk9MREVSUygpCiAgICAgICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgICAgIFJFTU9WRV9FTVBUWV9GT0xERVJTKCkKICAgICAgICBSRU1PVkVfRU1QVFlfRk9MREVSUygpCiAgICAgICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgICAgIFJFTU9WRV9FTVBUWV9GT0xERVJTKCkKCmRlZiBnZXRfcGFyYW1zKCk6CiAgICAgICAgcGFyYW09W10KICAgICAgICBwYXJhbXN0cmluZz1zeXMuYXJndlsyXQogICAgICAgIGlmIGxlbihwYXJhbXN0cmluZyk|JywgJycsICcnLCB5ZXNsYWJlbD0nWWVzJyxub2xhYmVsPSdObycpCiAgICAgICAgaWYgY2hvaWNlID09IDA6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVsaWYgY2hvaWNlID09IDE6CgkJCQoJCQkKCgkJCWxpYj14Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKGJhY2t1cGRpciwnYmFja3VwX3NvdXJjZXMuemlwJykpCgkJCWFkZG9uZm9sZGVyID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovLycsJ2hvbWUvdXNlcmRhdGEnKSkKCQkJdGltZS5zbGVlcCgyKQoJCQlkcC5jcmVhdGUoIltDT0xPUj1ibHVlXVtCXVNjaGlzTSBUVlsvQl1bL0NPTE9SXSBDdXN0b20gQnVpbGRzIFRvb2wiLCJSZXN0b3JpbmciLCcnLCAnUGxlYXNlIFdhaXQnKQoJCQlwcmludCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JwoJCQlwcmludCBhZGRvbmZvbGRlcgoJCQlwcmludCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JwoJCQlleHRyYWN0LmFsbChsaWIsYWRkb25mb2xkZXIsZHApCgkJCWRpYWxvZyA9IHhibWNndWkuRGlhbG9nKCkKCQkJZHAuY2xvc2UoKQoJCQlkaWFsb2cub2soIkJBQ0tVUC9SRVNUT1JFIiwgIlNvdXJjZXMgQXJlIE5vdyByZXN0b3JlZCIsICcnLCcnKQkKIAoKCQkJCmRlZiBSRVNUT1JFU0tJTlNIT1JUQ1VUUygpOgogaWYgb3MucGF0aC5leGlzdHMob3MucGF0aC5qb2luKGJhY2t1cGRpciwnYmFja3VwX3NraW5zaG9ydGN1dHMuemlwJykpOgogICAgICAgIGltcG9ydCB0aW1lCiAgICAgICAgZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQogICAgICAgIGNob2ljZSA9IHhibWNndWkuRGlhbG9nKCkueWVzbm8oIlNLSU4gU2V0dGluZ3MiLCAnRG8geW91IHdhbnQgdG8gcmVzdG9yZSB5b3VyIFNraW4gU2hvcnRjdXRzJywgJycsICcnLCB5ZXNsYWJlbD0nWWVzJyxub2xhYmVsPSdObycpCiAgICAgICAgaWYgY2hvaWNlID09IDA6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVsaWYgY2hvaWNlID09IDE6CgkJCQoJCQkKCgkJCWxpYj14Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKGJhY2t1cGRpciwnYmFja3VwX3NraW5zaG9ydGN1dHMuemlwJykpCgkJCWFkZG9uZm9sZGVyID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovLycsJ2hvbWUvdXNlcmRhdGEvYWRkb25fZGF0YScpKQoJCQl0aW1lLnNsZWVwKDIpCgkJCWRwLmNyZWF0ZSgiW0NPTE9SPWJsdWVdW0JdU2NoaXNNIFRWWy9CXVsvQ09MT1JdIEN1c3RvbSBCdWlsZHMgVG9vbCIsIlJlc3RvcmluZyIsJycsICdQbGVhc2UgV2FpdCcpCgkJCXByaW50ICc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nCgkJCXByaW50IGFkZG9uZm9sZGVyCgkJCXByaW50ICc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nCgkJCWV4dHJhY3QuYWxsKGxpYixhZGRvbmZvbGRlcixkcCkKCQkJZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQoJCQlkcC5jbG9zZSgpCgkJCWRpYWxvZy5vaygiQkFDS1VQL1JFU1RPUkUiLCAiU2tpbiBTaG9ydGN1dHMgQXJlIE5vdyByZXN0b3JlZCIsICcnLCcnKQkKIAoJCQkKZGVmIFJFRlJFU0hBTEwoKToKICAgCiAgICAjIGRpYWxvZy5vaygiQkFDS1VQL1JFU1RPUkUiLCAiRk9SQ0UgQ0xPU0UvUkVTVEFSVCBZT1VSIEtPREkiLCAiIiwiIikKICBraWxseGJtYygpCiAKCQojUm9vdCBtZW51IG9mIGFkZG9uCmRlZiBJTkRFWCgpOgoJZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQoJdHJ5OgoJCXVzZXJuYW1lID0geGJtY3BsdWdpbi5nZXRTZXR0aW5nKGludChzeXMuYXJndlsxXSksICd1c2VyJykKCQllbWFpbCA9IHhibWNwbHVnaW4uZ2V0U2V0dGluZyhpbnQoc3lzLmFyZ3ZbMV0pLCAnZW1haWwnKQoJZXhjZXB0OgoJCXVzZXJuYW1lID0gJycKCQllbWFpbCA9ICcnCglzdGF0dXMJPSAnJwkKCWxpbmsgPSBPUEVOX1VSTCgnaHR0cDovL3NjaGlzbS10di5jb20vc2NoaXNtMi5waHA|JywgJycsICdBbGwgYWRkb25zIEVYQ0xVRElORyBUSElTIFdJWkFSRCB3aWxsIGJlIGNvbXBsZXRlbHkgd2lwZWQhJywgeWVzbGFiZWw9J1tDT0xPUj1yZWRdWWVzWy9DT0xPUl0nLG5vbGFiZWw9J1tDT0xPUj1ncmVlbl1Ob1svQ09MT1JdJykKICAgIGlmIGNob2ljZTIgPT0gMDoKICAgICAgICByZXR1cm4KICAgIGVsaWYgY2hvaWNlMiA9PSAxOgogICAgICAgIGRwLmNyZWF0ZSgiW0NPTE9SIG9yYW5nZV1bQl1TY2hpc00gVFZbL0JdWy9DT0xPUl1bQ09MT1Igd2hpdGVdV2l6YXJkWy9DT0xPUl0iLCJXaXBpbmcgSW5zdGFsbCIsJycsICdQbGVhc2UgV2FpdCcpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBmb3Igcm9vdCwgZGlycywgZmlsZXMgaW4gb3Mud2FsayhIT01FLHRvcGRvd249VHJ1ZSk6CiAgICAgICAgICAgICAgICBkaXJzWzpdID0gW2QgZm9yIGQgaW4gZGlycyBpZiBkIG5vdCBpbiBFWENMVURFU10KICAgICAgICAgICAgICAgIGZvciBuYW1lIGluIGZpbGVzOgogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgb3MucmVtb3ZlKG9zLnBhdGguam9pbihyb290LG5hbWUpKQogICAgICAgICAgICAgICAgICAgICAgICBvcy5ybWRpcihvcy5wYXRoLmpvaW4ocm9vdCxuYW1lKSkKICAgICAgICAgICAgICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBmb3IgbmFtZSBpbiBkaXJzOgogICAgICAgICAgICAgICAgICAgIHRyeTogb3Mucm1kaXIob3MucGF0aC5qb2luKHJvb3QsbmFtZSkpOyBvcy5ybWRpcihyb290KQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIGV4Y2VwdDogcGFzcwogICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgZGlhbG9nLm9rKCdbQ09MT1Igb3JhbmdlXVtCXVNjaGlzTSBUVlsvQl1bL0NPTE9SXVtDT0xPUiB3aGl0ZV1XaXphcmRbL0NPTE9SXScsJ1dpcGUgU3VjY2Vzc2Z1bCwgcGxlYXNlIHJlc3RhcnQgWEJNQy9Lb2RpIGZvciBjaGFuZ2VzIHRvIHRha2UgZWZmZWN0LicsJycsJycpCiAgICBraWxseGJtYygpCgpkZWYgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKToKI2luaXRpYWxpemUgdGhlIGNvdW50ZXJzCiAgICBwcmludCIjIyMjIyMjIyMjIyBTdGFydCBSZW1vdmluZyBFbXB0eSBGb2xkZXJzICMjIyMjIyMjIyIKICAgIGVtcHR5X2NvdW50ID0gMAogICAgdXNlZF9jb3VudCA9IDAKICAgIGZvciBjdXJkaXIsIHN1YmRpcnMsIGZpbGVzIGluIG9zLndhbGsoSE9NRSk6CiAgICAgICAgaWYgbGVuKHN1YmRpcnMpID09IDAgYW5kIGxlbihmaWxlcykgPT0gMDogI2NoZWNrIGZvciBlbXB0eSBkaXJlY3Rvcmllcy4gbGVuKGZpbGVzKSA9PSAwIG1heSBiZSBvdmVya2lsbAogICAgICAgICAgICBlbXB0eV9jb3VudCArPSAxICNpbmNyZW1lbnQgZW1wdHlfY291bnQKICAgICAgICAgICAgb3Mucm1kaXIoY3VyZGlyKSAjZGVsZXRlIHRoZSBkaXJlY3RvcnkKICAgICAgICAgICAgcHJpbnQgInN1Y2Nlc3NmdWxseSByZW1vdmVkOiAiK2N1cmRpcgogICAgICAgIGVsaWYgbGVuKHN1YmRpcnMpID4gMCBhbmQgbGVuKGZpbGVzKSA|KTwvc2V0dGluZz4nJSBza2luCiAgICAgICAgICAgIAogICAgICAgICAgICBtYXRjaD1yZS5jb21waWxlKHIpLmZpbmRhbGwoYSkKICAgICAgICAgICAgcHJpbnQgbWF0Y2gKICAgICAgICAgICAgZm9yIHR5cGUsc3RyaW5nLHNldHRpbmcgaW4gbWF0Y2g6CiAgICAgICAgICAgICAgICBzZXR0aW5nPXNldHRpbmcucmVwbGFjZSgnJnF1b3Q7JywnJykgLnJlcGxhY2UoJyZhbXA7JywnJicpIAogICAgICAgICAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiU2tpbi5TZXQlcyglcywlcykiJSh0eXBlLnRpdGxlKCksc3RyaW5nLHNldHRpbmcpKSAgCiAgICAgICAgICAgICAgICAKICAgICAgICBpZiAnZmF2b3VyaXRlcy54bWwnIGluIGZpbGVuYW1lOgogICAgICAgICAgICBhID0gei5yZWFkKGZpbGVuYW1lKQogICAgICAgICAgICBmID0gb3BlbihGQVZTLCBtb2RlPSd3JykKICAgICAgICAgICAgZi53cml0ZShhKQogICAgICAgICAgICBmLmNsb3NlKCkgIAoJCQkgICAgICAgICAgICAgICAKICAgICAgICBpZiAnc291cmNlcy54bWwnIGluIGZpbGVuYW1lOgogICAgICAgICAgICBhID0gei5yZWFkKGZpbGVuYW1lKQogICAgICAgICAgICBmID0gb3BlbihTT1VSQ0UsIG1vZGU9J3cnKQogICAgICAgICAgICBmLndyaXRlKGEpCiAgICAgICAgICAgIGYuY2xvc2UoKSAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIGlmICdhZHZhbmNlZHNldHRpbmdzLnhtbCcgaW4gZmlsZW5hbWU6CiAgICAgICAgICAgIGEgPSB6LnJlYWQoZmlsZW5hbWUpCiAgICAgICAgICAgIGYgPSBvcGVuKEFEVkFOQ0VELCBtb2RlPSd3JykKICAgICAgICAgICAgZi53cml0ZShhKQogICAgICAgICAgICBmLmNsb3NlKCkgICAgICAgICAgICAgICAgIAoKICAgICAgICBpZiAnUnNzRmVlZHMueG1sJyBpbiBmaWxlbmFtZToKICAgICAgICAgICAgYSA9IHoucmVhZChmaWxlbmFtZSkKICAgICAgICAgICAgZiA9IG9wZW4oUlNTLCBtb2RlPSd3JykKICAgICAgICAgICAgZi53cml0ZShhKQogICAgICAgICAgICBmLmNsb3NlKCkgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICBpZiAna2V5Ym9hcmQueG1sJyBpbiBmaWxlbmFtZToKICAgICAgICAgICAgYSA9IHoucmVhZChmaWxlbmFtZSkKICAgICAgICAgICAgZiA9IG9wZW4oS0VZTUFQUywgbW9kZT0ndycpCiAgICAgICAgICAgIGYud3JpdGUoYSkKICAgICAgICAgICAgZi5jbG9zZSgpICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAKZGVmIFJFU1RPUkUoKToKICAJUkVTVE9SRUFERE9OU0VUVElOR1MoKQoJUkVTVE9SRUZBVigpCglSRVNUT1JFU09VUkNFUygpCglSRVNUT1JFU0tJTlNIT1JUQ1VUUygpCglSRVNUT1JFR1VJKCkKCWtpbGx4Ym1jKCkKCmRlZiBCQUNLVVBNRU5VKCk6CiAgCUJBQ0tVUCgpCglCQUNLVVBGQVYoKQoJQkFDS1VQU09VUkNFKCkKCUJBQ0tVUFNLSU5TSE9SVENVVFMoKQoJQkFDS1VQR1VJKCkKCQogICAJCmRlZiBSRVNUT1JFQURET05TRVRUSU5HUygpOgogaWYgb3MucGF0aC5leGlzdHMob3MucGF0aC5qb2luKGJhY2t1cGRpciwnYWRkb25fZGF0YS56aXAnKSk6ICAgCglpbXBvcnQgdGltZQoJCiAgICAgICAgCiAgICAgICAgZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQogICAgICAgIGNob2ljZSA9IHhibWNndWkuRGlhbG9nKCkueWVzbm8oIkFkZG9ucyBTZXR0aW5ncyIsICdEbyB5b3Ugd2FudCB0byByZXN0b3JlIHlvdXIgYWRkb24gc2V0dGluZ3M|ISEhIiwgJ0FyZSB5b3UgYWJzb2x1dGVseSBjZXJ0YWluIHlvdSB3YW50IHRvIHdpcGUgdGhpcyBpbnN0YWxsPycsICcnLCAnQWxsIGFkZG9ucyBFWENMVURJTkcgVEhJUyBXSVpBUkQgd2lsbCBiZSBjb21wbGV0ZWx5IHdpcGVkIScsIHllc2xhYmVsPSdZZXMnLG5vbGFiZWw9J05vJykKICAgIGlmIGNob2ljZTIgPT0gMDoKICAgICAgICByZXR1cm4KICAgIGVsaWYgY2hvaWNlMiA9PSAxOgogICAgICAgIGRwLmNyZWF0ZSgiW0NPTE9SPWJsdWVdW0JdU2NoaXNNIFRWWy9CXVsvQ09MT1JdIEN1c3RvbSBCdWlsZHMgVG9vbCIsIldpcGluZyBJbnN0YWxsIiwnJywgJ1BsZWFzZSBXYWl0JykKICAgICAgICB0cnk6CiAgICAgICAgICAgIGZvciByb290LCBkaXJzLCBmaWxlcyBpbiBvcy53YWxrKEhPTUUsdG9wZG93bj1UcnVlKToKICAgICAgICAgICAgICAgIGRpcnNbOl0gPSBbZCBmb3IgZCBpbiBkaXJzIGlmIGQgbm90IGluIEVYQ0xVREVTXQogICAgICAgICAgICAgICAgZm9yIG5hbWUgaW4gZmlsZXM6CiAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICBvcy5yZW1vdmUob3MucGF0aC5qb2luKHJvb3QsbmFtZSkpCiAgICAgICAgICAgICAgICAgICAgICAgIG9zLnJtZGlyKG9zLnBhdGguam9pbihyb290LG5hbWUpKQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGZvciBuYW1lIGluIGRpcnM6CiAgICAgICAgICAgICAgICAgICAgdHJ5OiBvcy5ybWRpcihvcy5wYXRoLmpvaW4ocm9vdCxuYW1lKSk7IG9zLnJtZGlyKHJvb3QpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICBSRU1PVkVfRU1QVFlfRk9MREVSUygpCiAgICBSRU1PVkVfRU1QVFlfRk9MREVSUygpCiAgICBSRU1PVkVfRU1QVFlfRk9MREVSUygpCiAgICBSRU1PVkVfRU1QVFlfRk9MREVSUygpCiAgICBSRU1PVkVfRU1QVFlfRk9MREVSUygpCiAgICBSRU1PVkVfRU1QVFlfRk9MREVSUygpCiAgICBSRU1PVkVfRU1QVFlfRk9MREVSUygpCiAgICBkaWFsb2cub2soJ1tDT0xPUj1ibHVlXVtCXVNjaGlzTVRWIFsvQl1bL0NPTE9SXSBDdXN0b20gQnVpbGRzIFRvb2wnLCdXaXBlIFN1Y2Nlc3NmdWwsIHBsZWFzZSByZXN0YXJ0IFhCTUMvS29kaSBmb3IgY2hhbmdlcyB0byB0YWtlIGVmZmVjdC4nLCcnLCcnKQoKZGVmIFJFTU9WRV9FTVBUWV9GT0xERVJTKCk6CgogICAgcHJpbnQiIyMjIyMjIyMjIyMgU3RhcnQgUmVtb3ZpbmcgRW1wdHkgRm9sZGVycyAjIyMjIyMjIyMiCiAgICBlbXB0eV9jb3VudCA9IDAKICAgIHVzZWRfY291bnQgPSAwCiAgICBmb3IgY3VyZGlyLCBzdWJkaXJzLCBmaWxlcyBpbiBvcy53YWxrKEhPTUUpOgogICAgICAgIGlmIGxlbihzdWJkaXJzKSA9PSAwIGFuZCBsZW4oZmlsZXMpID09IDA6ICNjaGVjayBmb3IgZW1wdHkgZGlyZWN0b3JpZXMuIGxlbihmaWxlcykgPT0gMCBtYXkgYmUgb3ZlcmtpbGwKICAgICAgICAgICAgZW1wdHlfY291bnQgKz0gMSAjaW5jcmVtZW50IGVtcHR5X2NvdW50CiAgICAgICAgICAgIG9zLnJtZGlyKGN1cmRpcikgI2RlbGV0ZSB0aGUgZGlyZWN0b3J5CiAgICAgICAgICAgIHByaW50ICJzdWNjZXNzZnVsbHkgcmVtb3ZlZDogIitjdXJkaXIKICAgICAgICBlbGlmIGxlbihzdWJkaXJzKSA|JywgJycsIHllc2xhYmVsPSdZZXMnLG5vbGFiZWw9J05vJykKICAgICAgICBpZiBjaG9pY2UgPT0gMToKICAgICAgICAgICAgbXliYWNrdXBwYXRoID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihiYWNrdXBkaXIsJ1NjaGlzTSBUViBCdWlsZHMnLCdNeSBCdWlsZHMnKSkKICAgICAgICAgICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKG15YmFja3VwcGF0aCk6CiAgICAgICAgICAgICAgICBvcy5tYWtlZGlycyhteWJhY2t1cHBhdGgpCiAgICAgICAgICAgIHZxID0gX2dldF9rZXlib2FyZCggaGVhZGluZz0iRW50ZXIgYSBuYW1lIGZvciB0aGlzIGJhY2t1cCIgKQogICAgICAgICAgICBpZiAoIG5vdCB2cSApOiByZXR1cm4gRmFsc2UsIDAKICAgICAgICAgICAgdGl0bGUgPSB1cmxsaWIucXVvdGVfcGx1cyh2cSkKICAgICAgICAgICAgYmFja3VwX3ppcCA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4obXliYWNrdXBwYXRoLHRpdGxlKycuemlwJykpCiAgICAgICAgICAgIGV4Y2x1ZGVfZGlyc19mdWxsID0gIFsnYmFja3VwZGlyJywncGx1Z2luLnZpZGVvLnNjaGlzbXdpemFyZCcsJ3JlcG9zaXRvcnkuc2NoaXNtdHYuYWRkb25zJ10KICAgICAgICAgICAgZXhjbHVkZV9maWxlc19mdWxsID0gWyJ4Ym1jLmxvZyIsInhibWMub2xkLmxvZyIsImtvZGkubG9nIiwia29kaS5vbGQubG9nIiwnLkRTX1N0b3JlJywnLnNldHVwX2NvbXBsZXRlJywnWEJNQ0hlbHBlci5jb25mJ10KICAgICAgICAgICAgbWVzc2FnZV9oZWFkZXIgPSAiQ3JlYXRpbmcgZnVsbCBiYWNrdXAgb2YgZXhpc3RpbmcgYnVpbGQiCiAgICAgICAgICAgIG1lc3NhZ2UxID0gIkFyY2hpdmluZy4uLiIKICAgICAgICAgICAgbWVzc2FnZTIgPSAiIgogICAgICAgICAgICBtZXNzYWdlMyA9ICJQbGVhc2UgV2FpdCIKICAgICAgICAgICAgQVJDSElWRV9DQihIT01FLCBiYWNrdXBfemlwLCBtZXNzYWdlX2hlYWRlciwgbWVzc2FnZTEsIG1lc3NhZ2UyLCBtZXNzYWdlMywgZXhjbHVkZV9kaXJzX2Z1bGwsIGV4Y2x1ZGVfZmlsZXNfZnVsbCkKICAgIGNob2ljZTIgPSB4Ym1jZ3VpLkRpYWxvZygpLnllc25vKCJBQlNPTFVURUxZIENFUlRBSU4|JywgJycsICcnLCB5ZXNsYWJlbD0nWWVzJyxub2xhYmVsPSdObycpCiAgICAgICBpZiBjaG9pY2UgPT0gMDoKICAgICAgICAgICAgcmV0dXJuCiAgICAgICBlbGlmIGNob2ljZSA9PSAxOgoJICAgZHAuY3JlYXRlKCJCQUNLVVAvUkVTVE9SRSIsIkJhY2tpbmcgVXAgU291cmNlcyIsJycsICdQbGVhc2UgV2FpdCcpCgoJICAgemlwb2JqLndyaXRlKGZuLCBmbltyb290bGVuOl0pCgkgICBkcC5jbG9zZSgpCgkgICBkaWFsb2cub2soIkJBQ0tVUC9SRVNUT1JFIiwgIlNvdXJjZXMgQXJlIE5vdyBCYWNrZWQgVXAiLCAnJywnJykJICAgCiAgICBJTkRFWCgpCSAgIAkJICAgCgkgICAKCQpkZWYgUkVBRF9aSVAodXJsKToKCiAgICBpbXBvcnQgemlwZmlsZQogICAgCiAgICB6ID0gemlwZmlsZS5aaXBGaWxlKHVybCwgInIiKQogICAgZm9yIGZpbGVuYW1lIGluIHoubmFtZWxpc3QoKToKICAgICAgICBpZiAnZ3Vpc2V0dGluZ3MueG1sJyBpbiBmaWxlbmFtZToKICAgICAgICAgICAgYSA9IHoucmVhZChmaWxlbmFtZSkKICAgICAgICAgICAgcj0nPHNldHRpbmcgdHlwZT0iKC4rPykiIG5hbWU9IiVzLiguKz8pIj4oLis|KSInKS5maW5kYWxsKGxpbmspCiAgICAjIGZvciBuYW1lLHVybCxpY29uaW1hZ2UsZmFuYXJ0LGRlc2NyaXB0aW9uIGluIG1hdGNoOgogICAgICAgICMgYWRkRGlyKG5hbWUgKyAiIHZlcjoiICsgZGVzY3JpcHRpb24sdXJsLDkwLGljb25pbWFnZSxmYW5hcnQsZGVzY3JpcHRpb24pCgkKCmRlZiBraWxseGJtYygpOgogICAgY2hvaWNlID0geGJtY2d1aS5EaWFsb2coKS55ZXNubygnRm9yY2UgQ2xvc2UgWEJNQy9Lb2RpJywgJ1dlIHdpbGwgbm93IGF0dGVtcHQgdG8gZm9yY2UgY2xvc2UgS29kaSwgdGhpcyBpcycsICd0byBiZSB1c2VkIGlmIGhhdmluZyBwcm9ibGVtcyB3aXRoIGd1aXNldHRpbmdzLnhtbCcsICdzdGlja2luZy4gV291bGQgeW91IGxpa2UgdG8gY29udGludWU|IDA6ICNjaGVjayBmb3IgdXNlZCBkaXJlY3RvcmllcwogICAgICAgICAgICB1c2VkX2NvdW50ICs9IDEgI2luY3JlbWVudCB1c2VkX2NvdW50CiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgkKICAgICAgCmRlZiBnZXRfcGFyYW1zKCk6CiAgICAgICAgcGFyYW09W10KICAgICAgICBwYXJhbXN0cmluZz1zeXMuYXJndlsyXQogICAgICAgIGlmIGxlbihwYXJhbXN0cmluZyk|YWN0aW9uPWdldHN0YXRzJnVzZXI9JyArIHVzZXJuYW1lICsgJyZlbWFpbD0nICsgZW1haWwpLnJlcGxhY2UoJ1xuJywnJykucmVwbGFjZSgnXHInLCcnKQoJdHJ5OgoJCWRhdGEgPSBqc29uLmxvYWRzKGxpbmspCglleGNlcHQ6IHBhc3MKCXRyeTogCgkJZm9yIGVudHJ5IGluIGRhdGE6CgkJCXBvc3Rjb3VudCA9IGVudHJ5Wydwb3N0cyddCgkJCXN0YXR1cyA9IGVudHJ5Wydwb3N0cyddCgkJCXByaW50IHN0YXR1cwoJCQlpZiBpbnQoc3RhdHVzKSA|ISEhWy9DT0xPUl0iLCAnQXJlIHlvdSBhYnNvbHV0ZWx5IGNlcnRhaW4geW91IHdhbnQgdG8gd2lwZSB0aGlzIGluc3RhbGw|KSIuKz9hbmFydD0iKC4rPykiLis|cmw9IiguKz8pIi4rP21nPSIoLis|ZXJzaW9uPSIoLis|base64|b64decode|import|exec".split("|")))