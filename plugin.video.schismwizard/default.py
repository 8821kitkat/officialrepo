exec("import re;import base64");exec((lambda p,y:(lambda o,b,f:re.sub(o,b,f))(r"([0-9a-f]+)",lambda m:p(m,y),base64.b64decode("MWYgMWM7MjAgMWMuMWUoJzEvNC8xMi84KzE2KzE4KzFkKzFiKzEzLzcvOS8xNSthLzFhLzE5LzIvZCsxMS8wL2MvNi9mL2UrMTAvMy8xNy9iKzE0KzU9PScp")))(lambda a,b:b[int("0x"+a.group(1),16)],"|aW1wb3J0IHhibWMsIHhibWNhZGRvbiwgeGJtY2d1aSwgeGJtY3BsdWdpbixvcyxiYXNlNjQsc3lzLHhibWN2ZnMsIGpzb24KaW1wb3J0IHNodXRpbAppbXBvcnQgdXJsbGliMix1cmxsaWIKaW1wb3J0IHJlCmltcG9ydCBleHRyYWN0CmltcG9ydCBkb3dubG9hZGVyCmltcG9ydCB0aW1lCmltcG9ydCBwbHVnaW50b29scwppbXBvcnQgQ2hlY2tQYXRoCmltcG9ydCB6aXBmaWxlCmltcG9ydCBudHBhdGgKCmFkZG9uX2lkID0gJ3BsdWdpbi52aWRlby5zY2hpc213aXphcmQnCkFERE9OID0geGJtY2FkZG9uLkFkZG9uKGlkPWFkZG9uX2lkKQpBZGRvbklEPSdwbHVnaW4udmlkZW8uc2NoaXNtd2l6YXJkJwpBZGRvblRpdGxlPSJbQ09MT1Igb3JhbmdlXVNjaGlzTSBUVlsvQ09MT1JdIFtDT0xPUiB3aGl0ZV1XaXphcmRbL0NPTE9SXSIKZGlhbG9nICAgICAgID0gIHhibWNndWkuRGlhbG9nKCkKSE9NRSAgICAgICAgID0gIHhibWMudHJhbnNsYXRlUGF0aCgnc3BlY2lhbDovL2hvbWUvJykKZHAgICAgICAgICAgID0gIHhibWNndWkuRGlhbG9nUHJvZ3Jlc3MoKQpVID0gQURET04uZ2V0U2V0dGluZygnVXNlcicpCkZBTkFSVCA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQgLCAnZmFuYXJ0LmpwZycpKQpJQ09OID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2ljb24ucG5nJykpCkFSVCA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQgKyAnL3Jlc291cmNlcy9hcnQvJykpClZFUlNJT04gPSAiMS4xOSIKREJQQVRIID0geGJtYy50cmFuc2xhdGVQYXRoKCdzcGVjaWFsOi8vZGF0YWJhc2UnKQpUTlBBVEggPSB4Ym1jLnRyYW5zbGF0ZVBhdGgoJ3NwZWNpYWw6Ly90aHVtYm5haWxzJyk7ClBBVEggPSAiU2NoaXNNVFYgV2l6YXJkIiAgICAgICAgICAgIApCQVNFVVJMID0gImh0dHA6Ly9zY2hpc210di5wY3Jpb3QuY29tL3JlcG8iCkggPSAnaHR0cDovLycKc2tpbiAgICAgICAgID0gIHhibWMuZ2V0U2tpbkRpcigpCkVYQ0xVREVTICAgICA9IFsnYmFja3VwZGlyJywncGx1Z2luLnZpZGVvLnNjaGlzbXdpemFyZCcsJ3NjcmlwdC5tb2R1bGUuYWRkb24uY29tbW9uJywncmVwb3NpdG9yeS5zY2hpc210di5hZGRvbnMnLCdiYWNrdXAnLCdiYWNrdXAuemlwJ10KCkFSVFBBVEggICAgICA9ICAnJyArIG9zLnNlcApVUERBVEVQQVRIICAgICA9ICB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMnLCcnKSkKVVBEQVRFQURQQVRICT0gIHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL3VzZXJkYXRhL2FkZG9uX2RhdGEnLCcnKSkKVVNFUkRBVEEgICAgID0gIHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL3VzZXJkYXRhJywnJykpCk1FRElBICAgICAgICA9ICB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9tZWRpYScsJycpKQpBVVRPRVhFQyAgICAgPSAgeGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihVU0VSREFUQSwnYXV0b2V4ZWMucHknKSkKQVVUT0VYRUNCQUsgID0gIHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oVVNFUkRBVEEsJ2F1dG9leGVjX2Jhay5weScpKQpBRERPTl9EQVRBICAgPSAgeGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihVU0VSREFUQSwnYWRkb25fZGF0YScpKQpQTEFZTElTVFMgICAgPSAgeGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihVU0VSREFUQSwncGxheWxpc3RzJykpCkRBVEFCQVNFICAgICA9ICB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKFVTRVJEQVRBLCdEYXRhYmFzZScpKQpBRERPTlMgICAgICAgPSAgeGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUnLCdhZGRvbnMnLCcnKSkKQ0JBRERPTlBBVEggID0gIHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oQURET05TLEFkZG9uSUQsJ2RlZmF1bHQucHknKSkKR1VJU0VUVElOR1MgID0gIG9zLnBhdGguam9pbihVU0VSREFUQSwnZ3Vpc2V0dGluZ3MueG1sJykKR1VJICAgICAgICAgID0gIHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oVVNFUkRBVEEsJ2d1aXNldHRpbmdzLnhtbCcpKQpHVUlGSVggICAgICAgPSAgeGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihVU0VSREFUQSwnZ3VpZml4LnhtbCcpKQpJTlNUQUxMICAgICAgPSAgeGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihVU0VSREFUQSwnaW5zdGFsbC54bWwnKSkKRkFWUyAgICAgICAgID0gIHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oVVNFUkRBVEEsJ2Zhdm91cml0ZXMueG1sJykpClNPVVJDRSAgICAgICA9ICB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKFVTRVJEQVRBLCdzb3VyY2VzLnhtbCcpKQpBRFZBTkNFRCAgICAgPSAgeGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihVU0VSREFUQSwnYWR2YW5jZWRzZXR0aW5ncy54bWwnKSkKUFJPRklMRVMgICAgID0gIHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oVVNFUkRBVEEsJ3Byb2ZpbGVzLnhtbCcpKQpSU1MgICAgICAgICAgPSAgeGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihVU0VSREFUQSwnUnNzRmVlZHMueG1sJykpCktFWU1BUFMgICAgICA9ICB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKFVTRVJEQVRBLCdrZXltYXBzJywna2V5Ym9hcmQueG1sJykpCgpub3RpZnlhcnQgICAgPSAgeGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihBRERPTlMsQWRkb25JRCwncmVzb3VyY2VzLycpKQpza2luICAgICAgICAgPSAgeGJtYy5nZXRTa2luRGlyKCkKdXNlcmRhdGFmb2xkZXIgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKEFERE9OX0RBVEEsQWRkb25JRCkpClVQREFURUxJU1QgICAgID0gWydwbHVnaW4udmlkZW8ubW92aWVzaGQnLCdwbHVnaW4udmlkZW8uYWxsaW5vbmUnXQp6aXAgPSAnc3BlY2lhbDovL2hvbWUvYWRkb25zL3BsdWdpbi52aWRlby5zY2hpc213aXphcmQnCnVybGJhc2UgICAgICA9ICAnTm9uZScKbWFzdGVyY29weSAgID0gIEFERE9OLmdldFNldHRpbmcoJ21hc3RlcmNvcHknKQpkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpCnVybHVwZGF0ZSA9ICAiIgp1cGRhdGVuYW1lID0gICJzY2hpc210dl91cGRhdGUiCmJhY2t1cGRpciAgICA9ICB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9iYWNrdXBkaXInLCcnKSkKVVNCICAgICAgICAgID0gIHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy9wbHVnaW4udmlkZW8uc2NoaXNtd2l6YXJkJywnJykpCm15YmFja3VwcGF0aCA9ICB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZScsJycpKQpFWENMVURFU0RBVEEgICAgPSBbJ2JhY2t1cGRpcicsJ2Zhdm91cml0ZXMueG1sJywgJ3NvdXJjZXMueG1sJyAsICdUaHVtYm5haWxzJywgJ2d1aXNldHRpbmdzLnhtbCcsJ3NjcmlwdC5za2luc2hvcnRjdXRzJywnc2NyaXB0Lm1vZHVsZS5hZGRvbi5jb21tb24nLCdyZXBvc2l0b3J5LnNjaGlzbXR2LmFkZG9ucycsJ2JhY2t1cCcsJ2JhY2t1cC56aXAnXQpJTkNMVURFR1VJID0gWydndWlzZXR0aW5ncy54bWwnLCAnZmF2b3VyaXRlcy54bWwnXQpTS0lOU0hPUlRDVVRTID0gWydzY3JpcHQuc2tpbnNob3J0Y3V0cyddCnVzZXJuYW1lID0geGJtY3BsdWdpbi5nZXRTZXR0aW5nKGludChzeXMuYXJndlsxXSksICd1c2VyJykKZW1haWwgPSB4Ym1jcGx1Z2luLmdldFNldHRpbmcoaW50KHN5cy5hcmd2WzFdKSwgJ2VtYWlsJykKCmNsYXNzIEd1aSh4Ym1jZ3VpLldpbmRvd1hNTERpYWxvZyk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICB4Ym1jZ3VpLldpbmRvd1hNTERpYWxvZy5fX2luaXRfXyhzZWxmKQogICAgICAgIHNlbGYuaGVhZGVyID0ga3dhcmdzLmdldCgiaGVhZGVyIikKICAgICAgICBzZWxmLmNvbnRlbnQgPSBrd2FyZ3MuZ2V0KCJjb250ZW50IikKCiAgICBkZWYgb25Jbml0KHNlbGYpOgogICAgICAgIHNlbGYuZ2V0Q29udHJvbCgxKS5zZXRMYWJlbChzZWxmLmhlYWRlcikKICAgICAgICBzZWxmLmdldENvbnRyb2woNSkuc2V0VGV4dChzZWxmLmNvbnRlbnQpCgpwYXRoICAgPSB4Ym1jYWRkb24uQWRkb24oKS5nZXRBZGRvbkluZm8oJ3BhdGgnKS5kZWNvZGUoInV0Zi04IikKCmxvZ2ZpbGUgPSB4Ym1jdmZzLkZpbGUob3MucGF0aC5qb2luKHBhdGgsICdjaGFuZ2Vsb2cudHh0JykpCnRleHQgPSBsb2dmaWxlLnJlYWQoKQpsb2dmaWxlLmNsb3NlKCkKZGVmIFNFVFRJTkdTKCk6Cgl4Ym1jYWRkb24uQWRkb24oaWQ9J3BsdWdpbi52aWRlby5zY2hpc213aXphcmQnKS5vcGVuU2V0dGluZ3MoKQpkZWYgQkFDS1VQKCk6ICAKCiAgICB0b19iYWNrdXAgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vJywnaG9tZS91c2VyZGF0YS9hZGRvbl9kYXRhJykpCiAgICBiYWNrdXBfemlwID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihiYWNrdXBkaXIsJ2FkZG9uX2RhdGEuemlwJykpCiAgICBiYWNrdXBfcGF0aCA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXAnKSkgICAgCiAgICAKICAgIGRwID0geGJtY2d1aS5EaWFsb2dQcm9ncmVzcygpCiAgICBkcC5jcmVhdGUoIkJBQ0tVUC9SRVNUT1JFIiwiQmFja2luZyBVcCIsJycsICdQbGVhc2UgV2FpdCcpCgogICAgY2hvaWNlID0geGJtY2d1aS5EaWFsb2coKS55ZXNubygiRVhQRVJJTUVOVEFMIEJBQ0tVUCBSRVNUT1JFIFRPT0wiLCAnSW5mbzogQmVmb3JlIHBlcmZvcm1pbmcgYSBiYWNrdXAgeW91IHNob3VsZCBjbGVhciB5b3VyIHRodW1ibmFpbHMgYXMgaXQgbWF5IHJlc3VsdHMgaW4gbGFyZ2UgZmlsZSBzaXplLi4uJywgJ1RoaXMgaXMgRVhQRVJJTUVOVEFMIScsICdJbiBhZGRpdGlvbiB5b3UgY2FuIGluc3RhbGwgdGhlIFVTQi9TRENBUkQgQkFDS1VQIFRPT0wgZnJvbSB0aGUgYWRkb25zIGxpc3QgdG8gYmFja3VwIG9uIGRpZmZlcmVudCBsb2NhdGlvbnMnLCB5ZXNsYWJlbD0nSnVzdCBDb250aW51ZScsbm9sYWJlbD0nSSB3aWxsIGRvIGl0IG5vdy4uLiBFeGl0JykKICAgIGlmIGNob2ljZSA9PSAwOgoJIHJldHVybgogICAgZWxpZiBjaG9pY2UgPT0gMToKICAgICAgZGlhbG9nLm9rKCJCQUNLVVAvUkVTVE9SRSIsICJDbGljayBPSyB0byBTdGFydCB5b3VyIGJhY2t1cCIsICcnLCcnKQogICAgICBleGNsdWRlX2RpcnNfZnVsbCA9ICBbJ2JhY2t1cGRpcicsJ3BsdWdpbi52aWRlby5zY2hpc213aXphcmQnLCdyZXBvc2l0b3J5LnNjaGlzbXR2LmFkZG9ucycsJ3NjcmlwdC5za2luc2hvcnRjdXRzJywncGx1Z2luLnByb2dyYW0uc3VwZXIuZmF2b3VyaXRlcyddCiAgICAgIGV4Y2x1ZGVfZmlsZXNfZnVsbCA9IFsieGJtYy5sb2ciLCJ4Ym1jLm9sZC5sb2ciLCJrb2RpLmxvZyIsImtvZGkub2xkLmxvZyIsJy5EU19TdG9yZScsJy5zZXR1cF9jb21wbGV0ZScsJ1hCTUNIZWxwZXIuY29uZiddCiAgICAgIG1lc3NhZ2VfaGVhZGVyID0gIkJhY2tpbmcgdXAgQWRkb25zIERhdGEiCiAgICAgIG1lc3NhZ2UxID0gIkFyY2hpdmluZy4uLiIKICAgICAgbWVzc2FnZTIgPSAiIgogICAgICBtZXNzYWdlMyA9ICJQbGVhc2UgV2FpdCIKICAgICAgQVJDSElWRV9DQih0b19iYWNrdXAsIGJhY2t1cF96aXAsIG1lc3NhZ2VfaGVhZGVyLCBtZXNzYWdlMSwgbWVzc2FnZTIsIG1lc3NhZ2UzLCBleGNsdWRlX2RpcnNfZnVsbCwgZXhjbHVkZV9maWxlc19mdWxsKQogICAgCiAgICAKCmRlZiBBUkNISVZFX0NCKHNvdXJjZWZpbGUsIGRlc3RmaWxlLCBtZXNzYWdlX2hlYWRlciwgbWVzc2FnZTEsIG1lc3NhZ2UyLCBtZXNzYWdlMywgZXhjbHVkZV9kaXJzLCBleGNsdWRlX2ZpbGVzKToKICAgIHppcG9iaiA9IHppcGZpbGUuWmlwRmlsZShkZXN0ZmlsZSAsICd3JywgemlwZmlsZS5aSVBfREVGTEFURUQpCiAgICByb290bGVuID0gbGVuKHNvdXJjZWZpbGUpCiAgICBmb3JfcHJvZ3Jlc3MgPSBbXQogICAgSVRFTSA9W10KICAgIGRwLmNyZWF0ZShtZXNzYWdlX2hlYWRlciwgbWVzc2FnZTEsIG1lc3NhZ2UyLCBtZXNzYWdlMykKICAgIGZvciBiYXNlLCBkaXJzLCBmaWxlcyBpbiBvcy53YWxrKHNvdXJjZWZpbGUpOgogICAgICAgIGZvciBmaWxlIGluIGZpbGVzOgogICAgICAgICAgICBJVEVNLmFwcGVuZChmaWxlKQogICAgTl9JVEVNID1sZW4oSVRFTSkKICAgIGZvciBiYXNlLCBkaXJzLCBmaWxlcyBpbiBvcy53YWxrKHNvdXJjZWZpbGUpOgogICAgICAgIGRpcnNbOl0gPSBbZCBmb3IgZCBpbiBkaXJzIGlmIGQgbm90IGluIGV4Y2x1ZGVfZGlyc10KICAgICAgICBmaWxlc1s6XSA9IFtmIGZvciBmIGluIGZpbGVzIGlmIGYgbm90IGluIGV4Y2x1ZGVfZmlsZXNdCiAgICAgICAgZm9yIGZpbGUgaW4gZmlsZXM6CiAgICAgICAgICAgIGZvcl9wcm9ncmVzcy5hcHBlbmQoZmlsZSkgCiAgICAgICAgICAgIHByb2dyZXNzID0gbGVuKGZvcl9wcm9ncmVzcykgLyBmbG9hdChOX0lURU0pICogMTAwICAKICAgICAgICAgICAgZHAudXBkYXRlKGludChwcm9ncmVzcyksIkJhY2tpbmcgVXAiLCdbQ09MT1IgeWVsbG93XSVzWy9DT0xPUl0nJWZpbGUsICdQbGVhc2UgV2FpdCcpCiAgICAgICAgICAgIGZuID0gb3MucGF0aC5qb2luKGJhc2UsIGZpbGUpCiAgICAgICAgICAgIHppcG9iai53cml0ZShmbiwgZm5bcm9vdGxlbjpdKSAgCiAgICB6aXBvYmouY2xvc2UoKQogICAgZHAuY2xvc2UoKQoJCmRlZiBCQUNLVVBTS0lOU0hPUlRDVVRTKCk6ICAKICAgY2hvaWNlID0geGJtY2d1aS5EaWFsb2coKS55ZXNubygiU2tpbiBTaG9ydGN1dHMiLCAnRG8geW91IHdhbnQgdG8gQmFja3VwIHlvdXIgU2tpbiBTaG9ydGN1dHM|KSIuKz9lcnNpb249IiguKz8pIicpLmZpbmRhbGwobGluaykKICAgICMgZm9yIG5hbWUsdXJsLGljb25pbWFnZSxmYW5hcnQsZGVzY3JpcHRpb24gaW4gbWF0Y2g6CiAgICAgICAgIyBhZGREaXIobmFtZSArICIgdmVyOiIgKyBkZXNjcmlwdGlvbix1cmwsOTAsaWNvbmltYWdlLGZhbmFydCxkZXNjcmlwdGlvbikKCQoKZGVmIGtpbGx4Ym1jKCk6CiAgICBjaG9pY2UgPSB4Ym1jZ3VpLkRpYWxvZygpLnllc25vKCdGb3JjZSBDbG9zZSBYQk1DL0tvZGknLCAnV2Ugd2lsbCBub3cgYXR0ZW1wdCB0byBmb3JjZSBjbG9zZSBLb2RpLCB0aGlzIGlzJywgJ3RvIGJlIHVzZWQgaWYgaGF2aW5nIHByb2JsZW1zIHdpdGggZ3Vpc2V0dGluZ3MueG1sJywgJ3N0aWNraW5nLiBXb3VsZCB5b3UgbGlrZSB0byBjb250aW51ZT8nLCBub2xhYmVsPSdObywgQ2FuY2VsJyx5ZXNsYWJlbD0nWWVzLCBDbG9zZScpCiAgICBpZiBjaG9pY2UgPT0gMDoKICAgICAgICBJTkRFWCgpCiAgICBlbGlmIGNob2ljZSA9PSAxOgogICAgICAgIHBhc3MKICAgIG15cGxhdGZvcm0gPSBwbGF0Zm9ybSgpCiAgICBwcmludCAiUGxhdGZvcm06ICIgKyBzdHIobXlwbGF0Zm9ybSkKICAgIGlmIG15cGxhdGZvcm0gPT0gJ29zeCc6ICMgT1NYCiAgICAgICAgcHJpbnQgIiMjIyMjIyMjIyMjIyAgIHRyeSBvc3ggZm9yY2UgY2xvc2UgICMjIyMjIyMjIyMjIyMjIyMjIgogICAgICAgIHRyeTogb3Muc3lzdGVtKCdraWxsYWxsIC05IFhCTUMnKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIHRyeTogb3Muc3lzdGVtKCdraWxsYWxsIC05IEtvZGknKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIGRpYWxvZy5vaygiW0NPTE9SPXJlZF1bQl1XQVJOSU5HICAhISFbL0NPTE9SXVsvQl0iLCAiSWYgeW91XCdyZSBzZWVpbmcgdGhpcyBtZXNzYWdlIGl0IG1lYW5zIHRoZSBmb3JjZSBjbG9zZSIsICJ3YXMgdW5zdWNjZXNzZnVsLiBQbGVhc2UgZm9yY2UgY2xvc2UgWEJNQy9Lb2RpIFtDT0xPUj1saW1lXURPIE5PVFsvQ09MT1JdIGV4aXQgY2xlYW5seSB2aWEgdGhlIG1lbnUuIiwnJykKICAgIGVsaWYgbXlwbGF0Zm9ybSA9PSAnbGludXgnOiAjTGludXgKICAgICAgICBwcmludCAiIyMjIyMjIyMjIyMjICAgdHJ5IGxpbnV4IGZvcmNlIGNsb3NlICAjIyMjIyMjIyMjIyMjIyMjIyIKICAgICAgICB0cnk6IG9zLnN5c3RlbSgna2lsbGFsbCBYQk1DJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICB0cnk6IG9zLnN5c3RlbSgna2lsbGFsbCBLb2RpJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICB0cnk6IG9zLnN5c3RlbSgna2lsbGFsbCAtOSB4Ym1jLmJpbicpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ2tpbGxhbGwgLTkga29kaS5iaW4nKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIGRpYWxvZy5vaygiW0NPTE9SPXJlZF1bQl1XQVJOSU5HICAhISFbL0NPTE9SXVsvQl0iLCAiSWYgeW91XCdyZSBzZWVpbmcgdGhpcyBtZXNzYWdlIGl0IG1lYW5zIHRoZSBmb3JjZSBjbG9zZSIsICJ3YXMgdW5zdWNjZXNzZnVsLiBQbGVhc2UgZm9yY2UgY2xvc2UgWEJNQy9Lb2RpIFtDT0xPUj1saW1lXURPIE5PVFsvQ09MT1JdIGV4aXQgY2xlYW5seSB2aWEgdGhlIG1lbnUuIiwnJykKICAgIGVsaWYgbXlwbGF0Zm9ybSA9PSAnYW5kcm9pZCc6ICMgQW5kcm9pZCAgCiAgICAgICAgcHJpbnQgIiMjIyMjIyMjIyMjIyAgIHRyeSBhbmRyb2lkIGZvcmNlIGNsb3NlICAjIyMjIyMjIyMjIyMjIyMjIyIKICAgICAgICB0cnk6IG9zLnN5c3RlbSgnYWRiIHNoZWxsIGFtIGZvcmNlLXN0b3Agb3JnLnhibWMua29kaScpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ2FkYiBzaGVsbCBhbSBmb3JjZS1zdG9wIG9yZy5rb2RpJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICB0cnk6IG9zLnN5c3RlbSgnYWRiIHNoZWxsIGFtIGZvcmNlLXN0b3Agb3JnLnhibWMueGJtYycpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ2FkYiBzaGVsbCBhbSBmb3JjZS1zdG9wIG9yZy54Ym1jJykKICAgICAgICBleGNlcHQ6IHBhc3MgICAgICAgIAogICAgICAgIGRpYWxvZy5vaygiW0NPTE9SPXJlZF1bQl1XQVJOSU5HICAhISFbL0NPTE9SXVsvQl0iLCAiWW91ciBzeXN0ZW0gaGFzIGJlZW4gZGV0ZWN0ZWQgYXMgQW5kcm9pZCwgeW91ICIsICJbQ09MT1I9eWVsbG93XVtCXU1VU1RbL0NPTE9SXVsvQl0gZm9yY2UgY2xvc2UgWEJNQy9Lb2RpLiBbQ09MT1I9bGltZV1ETyBOT1RbL0NPTE9SXSBleGl0IGNsZWFubHkgdmlhIHRoZSBtZW51LiIsIlB1bGxpbmcgdGhlIHBvd2VyIGNhYmxlIGlzIHRoZSBzaW1wbGVzdCBtZXRob2QgdG8gZm9yY2UgY2xvc2UuIikKICAgIGVsaWYgbXlwbGF0Zm9ybSA9PSAnd2luZG93cyc6ICMgV2luZG93cwogICAgICAgIHByaW50ICIjIyMjIyMjIyMjIyMgICB0cnkgd2luZG93cyBmb3JjZSBjbG9zZSAgIyMjIyMjIyMjIyMjIyMjIyMiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBvcy5zeXN0ZW0oJ0BFQ0hPIG9mZicpCiAgICAgICAgICAgIG9zLnN5c3RlbSgndHNraWxsIFhCTUMuZXhlJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICB0cnk6CiAgICAgICAgICAgIG9zLnN5c3RlbSgnQEVDSE8gb2ZmJykKICAgICAgICAgICAgb3Muc3lzdGVtKCd0c2tpbGwgS29kaS5leGUnKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIHRyeToKICAgICAgICAgICAgb3Muc3lzdGVtKCdARUNITyBvZmYnKQogICAgICAgICAgICBvcy5zeXN0ZW0oJ1RBU0tLSUxMIC9pbSBLb2RpLmV4ZSAvZicpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgdHJ5OgogICAgICAgICAgICBvcy5zeXN0ZW0oJ0BFQ0hPIG9mZicpCiAgICAgICAgICAgIG9zLnN5c3RlbSgnVEFTS0tJTEwgL2ltIFhCTUMuZXhlIC9mJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICBkaWFsb2cub2soIltDT0xPUj1yZWRdW0JdV0FSTklORyAgISEhWy9DT0xPUl1bL0JdIiwgIklmIHlvdVwncmUgc2VlaW5nIHRoaXMgbWVzc2FnZSBpdCBtZWFucyB0aGUgZm9yY2UgY2xvc2UiLCAid2FzIHVuc3VjY2Vzc2Z1bC4gUGxlYXNlIGZvcmNlIGNsb3NlIFhCTUMvS29kaSBbQ09MT1I9bGltZV1ETyBOT1RbL0NPTE9SXSBleGl0IGNsZWFubHkgdmlhIHRoZSBtZW51LiIsIlVzZSB0YXNrIG1hbmFnZXIgYW5kIE5PVCBBTFQgRjQiKQogICAgZWxzZTogI0FUVgogICAgICAgIHByaW50ICIjIyMjIyMjIyMjIyMgICB0cnkgYXR2IGZvcmNlIGNsb3NlICAjIyMjIyMjIyMjIyMjIyMjIyIKICAgICAgICB0cnk6IG9zLnN5c3RlbSgna2lsbGFsbCBBcHBsZVRWJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICBwcmludCAiIyMjIyMjIyMjIyMjICAgdHJ5IHJhc3BibWMgZm9yY2UgY2xvc2UgICMjIyMjIyMjIyMjIyMjIyMjIiAjT1NNQyAvIFJhc3BibWMKICAgICAgICB0cnk6IG9zLnN5c3RlbSgnc3VkbyBpbml0Y3RsIHN0b3Aga29kaScpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ3N1ZG8gaW5pdGN0bCBzdG9wIHhibWMnKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIGRpYWxvZy5vaygiW0NPTE9SPXJlZF1bQl1XQVJOSU5HICAhISFbL0NPTE9SXVsvQl0iLCAiSWYgeW91XCdyZSBzZWVpbmcgdGhpcyBtZXNzYWdlIGl0IG1lYW5zIHRoZSBmb3JjZSBjbG9zZSIsICJ3YXMgdW5zdWNjZXNzZnVsLiBQbGVhc2UgZm9yY2UgY2xvc2UgWEJNQy9Lb2RpIFtDT0xPUj1saW1lXURPIE5PVFsvQ09MT1JdIGV4aXQgdmlhIHRoZSBtZW51LiIsIllvdXIgcGxhdGZvcm0gY291bGQgbm90IGJlIGRldGVjdGVkIHNvIGp1c3QgcHVsbCB0aGUgcG93ZXIgY2FibGUuIikKCmRlZiBBZGRvbl9TZXR0aW5ncygpOgogICAgQURET04ub3BlblNldHRpbmdzKHN5cy5hcmd2WzBdKQoKZGVmIFdpcGVYQk1DKCk6CiAgICBpZiBza2luIT0gInNraW4uY29uZmx1ZW5jZSI6CiAgICAgICAgZGlhbG9nLm9rKCdbQ09MT1I9Ymx1ZV1bQl1TY2hpc00gVFZbL0JdWy9DT0xPUl1bQ09MT1I9Z3JlZW5dWy9DT0xPUl0gQ3VzdG9tIEJ1aWxkcyBUb29sJywnUGxlYXNlIHN3aXRjaCB0byB0aGUgZGVmYXVsdCBDb25mbHVlbmNlIHNraW4nLCdiZWZvcmUgcGVyZm9ybWluZyBhIHdpcGUuJywnJykKICAgICAgICB4Ym1jLmV4ZWN1dGVidWlsdGluKCJBY3RpdmF0ZVdpbmRvdyhhcHBlYXJhbmNlc2V0dGluZ3MpIikKICAgICAgICByZXR1cm4KICAgIGVsc2U6CiAgICAgICAgY2hvaWNlID0geGJtY2d1aS5EaWFsb2coKS55ZXNubygiVkVSWSBJTVBPUlRBTlQiLCAnVGhpcyB3aWxsIGNvbXBsZXRlbHkgd2lwZSB5b3VyIGluc3RhbGwuJywgJ1dvdWxkIHlvdSBsaWtlIHRvIGNyZWF0ZSBhIGJhY2t1cCBiZWZvcmUgcHJvY2VlZGluZz8nLCAnJywgeWVzbGFiZWw9J1llcycsbm9sYWJlbD0nTm8nKQogICAgICAgIGlmIGNob2ljZSA9PSAxOgogICAgICAgICAgICBteWJhY2t1cHBhdGggPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKGJhY2t1cGRpciwnU2NoaXNNIFRWIEJ1aWxkcycsJ015IEJ1aWxkcycpKQogICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMobXliYWNrdXBwYXRoKToKICAgICAgICAgICAgICAgIG9zLm1ha2VkaXJzKG15YmFja3VwcGF0aCkKICAgICAgICAgICAgdnEgPSBfZ2V0X2tleWJvYXJkKCBoZWFkaW5nPSJFbnRlciBhIG5hbWUgZm9yIHRoaXMgYmFja3VwIiApCiAgICAgICAgICAgIGlmICggbm90IHZxICk6IHJldHVybiBGYWxzZSwgMAogICAgICAgICAgICB0aXRsZSA9IHVybGxpYi5xdW90ZV9wbHVzKHZxKQogICAgICAgICAgICBiYWNrdXBfemlwID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihteWJhY2t1cHBhdGgsdGl0bGUrJy56aXAnKSkKICAgICAgICAgICAgZXhjbHVkZV9kaXJzX2Z1bGwgPSAgWydiYWNrdXBkaXInLCdwbHVnaW4udmlkZW8uc2NoaXNtd2l6YXJkJywncmVwb3NpdG9yeS5zY2hpc210di5hZGRvbnMnXQogICAgICAgICAgICBleGNsdWRlX2ZpbGVzX2Z1bGwgPSBbInhibWMubG9nIiwieGJtYy5vbGQubG9nIiwia29kaS5sb2ciLCJrb2RpLm9sZC5sb2ciLCcuRFNfU3RvcmUnLCcuc2V0dXBfY29tcGxldGUnLCdYQk1DSGVscGVyLmNvbmYnXQogICAgICAgICAgICBtZXNzYWdlX2hlYWRlciA9ICJDcmVhdGluZyBmdWxsIGJhY2t1cCBvZiBleGlzdGluZyBidWlsZCIKICAgICAgICAgICAgbWVzc2FnZTEgPSAiQXJjaGl2aW5nLi4uIgogICAgICAgICAgICBtZXNzYWdlMiA9ICIiCiAgICAgICAgICAgIG1lc3NhZ2UzID0gIlBsZWFzZSBXYWl0IgogICAgICAgICAgICBBUkNISVZFX0NCKEhPTUUsIGJhY2t1cF96aXAsIG1lc3NhZ2VfaGVhZGVyLCBtZXNzYWdlMSwgbWVzc2FnZTIsIG1lc3NhZ2UzLCBleGNsdWRlX2RpcnNfZnVsbCwgZXhjbHVkZV9maWxlc19mdWxsKQogICAgY2hvaWNlMiA9IHhibWNndWkuRGlhbG9nKCkueWVzbm8oIkFCU09MVVRFTFkgQ0VSVEFJTj8hISEiLCAnQXJlIHlvdSBhYnNvbHV0ZWx5IGNlcnRhaW4geW91IHdhbnQgdG8gd2lwZSB0aGlzIGluc3RhbGw|YWN0aW9uPWxvZ2RsJm5hbWU9JXMmZW1haWw9JXMnICUgKHVzZXJuYW1lLCB1cmxsaWIudW5xdW90ZShlbWFpbCkpCiAgICByZXEgPSB1cmxsaWIyLlJlcXVlc3QobGluaykKICAgIHJlcS5hZGRfaGVhZGVyKCdVc2VyLUFnZW50JywgJ3NjaGlzbXppbGxhJykKICAgIHJlc3BvbnNlID0gdXJsbGliMi51cmxvcGVuKHJlcSkKICAgIHJlc3BvbnNlLnJlYWQoKQogICAgcmVzcG9uc2UuY2xvc2UoKQogICAgICAgIApkZWYgT1BFTl9VUkwodXJsKToKICAgIHJlcSA9IHVybGxpYjIuUmVxdWVzdCh1cmwpCiAgICAjIHJlcS5hZGRfaGVhZGVyKCdVc2VyLUFnZW50JywgJ01vemlsbGEvNS4wIChXaW5kb3dzOyBVOyBXaW5kb3dzIE5UIDUuMTsgZW4tR0I7IHJ2OjEuOS4wLjMpIEdlY2tvLzIwMDgwOTI0MTcgRmlyZWZveC8zLjAuMycpCgogICAgcmVxLmFkZF9oZWFkZXIoJ1VzZXItQWdlbnQnLCAnc2NoaXNtemlsbGEnKQogICAgcmVzcG9uc2UgPSB1cmxsaWIyLnVybG9wZW4ocmVxKQogICAgbGluaz1yZXNwb25zZS5yZWFkKCkKICAgIHJlc3BvbnNlLmNsb3NlKCkKICAgIHJldHVybiBsaW5rCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyMjRk9SQ0UgQ0xPU0UgS09ESSAtIEFORFJPSUQgT05MWSBXT1JLUyBJRiBST09URUQjIyMjIyMjIyMjIyMjCiMjIyMjIyNMRUUgQCBDT01NVU5JVFkgQlVJTERTIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKZGVmIGtpbGx4Ym1jKCk6CiAgICBjaG9pY2UgPSB4Ym1jZ3VpLkRpYWxvZygpLnllc25vKCdbQ09MT1I9Z3JlZW5dRm9yY2UgQ2xvc2UgS29kaVsvQ09MT1JdJywgJ1lvdSBhcmUgYWJvdXQgdG8gY2xvc2UgS29kaScsICdXb3VsZCB5b3UgbGlrZSB0byBjb250aW51ZT8nLCBub2xhYmVsPSdObywgQ2FuY2VsJyx5ZXNsYWJlbD0nW0NPTE9SPWdyZWVuXVllcywgQ2xvc2VbL0NPTE9SXScpCiAgICBpZiBjaG9pY2UgPT0gMDoKICAgICAgICByZXR1cm4KICAgIGVsaWYgY2hvaWNlID09IDE6CiAgICAgICAgcGFzcwogICAgbXlwbGF0Zm9ybSA9IHBsYXRmb3JtKCkKICAgIHByaW50ICJQbGF0Zm9ybTogIiArIHN0cihteXBsYXRmb3JtKQogICAgaWYgbXlwbGF0Zm9ybSA9PSAnb3N4JzogIyBPU1gKICAgICAgICBwcmludCAiIyMjIyMjIyMjIyMjICAgdHJ5IG9zeCBmb3JjZSBjbG9zZSAgIyMjIyMjIyMjIyMjIyMjIyMiCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ2tpbGxhbGwgLTkgWEJNQycpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ2tpbGxhbGwgLTkgS29kaScpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgZGlhbG9nLm9rKCJbQ09MT1I9cmVkXVtCXVdBUk5JTkcgICEhIVsvQ09MT1JdWy9CXSIsICJJZiB5b3VcJ3JlIHNlZWluZyB0aGlzIG1lc3NhZ2UgaXQgbWVhbnMgdGhlIGZvcmNlIGNsb3NlIiwgIndhcyB1bnN1Y2Nlc3NmdWwuIFBsZWFzZSBmb3JjZSBjbG9zZSBYQk1DL0tvZGkgW0NPTE9SPWxpbWVdRE8gTk9UWy9DT0xPUl0gZXhpdCBjbGVhbmx5IHZpYSB0aGUgbWVudS4iLCcnKQogICAgZWxpZiBteXBsYXRmb3JtID09ICdsaW51eCc6ICNMaW51eAogICAgICAgIHByaW50ICIjIyMjIyMjIyMjIyMgICB0cnkgbGludXggZm9yY2UgY2xvc2UgICMjIyMjIyMjIyMjIyMjIyMjIgogICAgICAgIHRyeTogb3Muc3lzdGVtKCdraWxsYWxsIFhCTUMnKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIHRyeTogb3Muc3lzdGVtKCdraWxsYWxsIEtvZGknKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIHRyeTogb3Muc3lzdGVtKCdraWxsYWxsIC05IHhibWMuYmluJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICB0cnk6IG9zLnN5c3RlbSgna2lsbGFsbCAtOSBrb2RpLmJpbicpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgZGlhbG9nLm9rKCJbQ09MT1I9cmVkXVtCXVdBUk5JTkcgICEhIVsvQ09MT1JdWy9CXSIsICJJZiB5b3VcJ3JlIHNlZWluZyB0aGlzIG1lc3NhZ2UgaXQgbWVhbnMgdGhlIGZvcmNlIGNsb3NlIiwgIndhcyB1bnN1Y2Nlc3NmdWwuIFBsZWFzZSBmb3JjZSBjbG9zZSBYQk1DL0tvZGkgW0NPTE9SPWxpbWVdRE8gTk9UWy9DT0xPUl0gZXhpdCBjbGVhbmx5IHZpYSB0aGUgbWVudS4iLCcnKQogICAgZWxpZiBteXBsYXRmb3JtID09ICdhbmRyb2lkJzogIyBBbmRyb2lkICAKICAgICAgICBwcmludCAiIyMjIyMjIyMjIyMjICAgdHJ5IGFuZHJvaWQgZm9yY2UgY2xvc2UgICMjIyMjIyMjIyMjIyMjIyMjIgogICAgICAgIHRyeTogb3Muc3lzdGVtKCdhZGIgc2hlbGwgYW0gZm9yY2Utc3RvcCBvcmcueGJtYy5rb2RpJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICB0cnk6IG9zLnN5c3RlbSgnYWRiIHNoZWxsIGFtIGZvcmNlLXN0b3Agb3JnLmtvZGknKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIHRyeTogb3Muc3lzdGVtKCdhZGIgc2hlbGwgYW0gZm9yY2Utc3RvcCBvcmcueGJtYy54Ym1jJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICB0cnk6IG9zLnN5c3RlbSgnYWRiIHNoZWxsIGFtIGZvcmNlLXN0b3Agb3JnLnhibWMnKQogICAgICAgIGV4Y2VwdDogcGFzcyAgICAgICAgCiAgICAgICAgZGlhbG9nLm9rKCJbQ09MT1I9cmVkXVtCXVdBUk5JTkcgICEhIVsvQ09MT1JdWy9CXSIsICJZb3VyIHN5c3RlbSBoYXMgYmVlbiBkZXRlY3RlZCBhcyBBbmRyb2lkLCB5b3UgIiwgIltDT0xPUj15ZWxsb3ddW0JdTVVTVFsvQ09MT1JdWy9CXSBmb3JjZSBjbG9zZSBYQk1DL0tvZGkuIFtDT0xPUj1saW1lXURPIE5PVFsvQ09MT1JdIGV4aXQgY2xlYW5seSB2aWEgdGhlIG1lbnUuIiwiUHVsbGluZyB0aGUgcG93ZXIgY2FibGUgaXMgdGhlIHNpbXBsZXN0IG1ldGhvZCB0byBmb3JjZSBjbG9zZS4iKQogICAgZWxpZiBteXBsYXRmb3JtID09ICd3aW5kb3dzJzogIyBXaW5kb3dzCiAgICAgICAgcHJpbnQgIiMjIyMjIyMjIyMjIyAgIHRyeSB3aW5kb3dzIGZvcmNlIGNsb3NlICAjIyMjIyMjIyMjIyMjIyMjIyIKICAgICAgICB0cnk6CiAgICAgICAgICAgIG9zLnN5c3RlbSgnQEVDSE8gb2ZmJykKICAgICAgICAgICAgb3Muc3lzdGVtKCd0c2tpbGwgWEJNQy5leGUnKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIHRyeToKICAgICAgICAgICAgb3Muc3lzdGVtKCdARUNITyBvZmYnKQogICAgICAgICAgICBvcy5zeXN0ZW0oJ3Rza2lsbCBLb2RpLmV4ZScpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgdHJ5OgogICAgICAgICAgICBvcy5zeXN0ZW0oJ0BFQ0hPIG9mZicpCiAgICAgICAgICAgIG9zLnN5c3RlbSgnVEFTS0tJTEwgL2ltIEtvZGkuZXhlIC9mJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICB0cnk6CiAgICAgICAgICAgIG9zLnN5c3RlbSgnQEVDSE8gb2ZmJykKICAgICAgICAgICAgb3Muc3lzdGVtKCdUQVNLS0lMTCAvaW0gWEJNQy5leGUgL2YnKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIGRpYWxvZy5vaygiW0NPTE9SPXJlZF1bQl1XQVJOSU5HICAhISFbL0NPTE9SXVsvQl0iLCAiSWYgeW91XCdyZSBzZWVpbmcgdGhpcyBtZXNzYWdlIGl0IG1lYW5zIHRoZSBmb3JjZSBjbG9zZSIsICJ3YXMgdW5zdWNjZXNzZnVsLiBQbGVhc2UgZm9yY2UgY2xvc2UgWEJNQy9Lb2RpIFtDT0xPUj1saW1lXURPIE5PVFsvQ09MT1JdIGV4aXQgY2xlYW5seSB2aWEgdGhlIG1lbnUuIiwiVXNlIHRhc2sgbWFuYWdlciBhbmQgTk9UIEFMVCBGNCIpCiAgICBlbHNlOiAjQVRWCiAgICAgICAgcHJpbnQgIiMjIyMjIyMjIyMjIyAgIHRyeSBhdHYgZm9yY2UgY2xvc2UgICMjIyMjIyMjIyMjIyMjIyMjIgogICAgICAgIHRyeTogb3Muc3lzdGVtKCdraWxsYWxsIEFwcGxlVFYnKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIHByaW50ICIjIyMjIyMjIyMjIyMgICB0cnkgcmFzcGJtYyBmb3JjZSBjbG9zZSAgIyMjIyMjIyMjIyMjIyMjIyMiICNPU01DIC8gUmFzcGJtYwogICAgICAgIHRyeTogb3Muc3lzdGVtKCdzdWRvIGluaXRjdGwgc3RvcCBrb2RpJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICB0cnk6IG9zLnN5c3RlbSgnc3VkbyBpbml0Y3RsIHN0b3AgeGJtYycpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgZGlhbG9nLm9rKCJbQ09MT1I9cmVkXVtCXVdBUk5JTkcgICEhIVsvQ09MT1JdWy9CXSIsICJJZiB5b3VcJ3JlIHNlZWluZyB0aGlzIG1lc3NhZ2UgaXQgbWVhbnMgdGhlIGZvcmNlIGNsb3NlIiwgIndhcyB1bnN1Y2Nlc3NmdWwuIFBsZWFzZSBmb3JjZSBjbG9zZSBYQk1DL0tvZGkgW0NPTE9SPWxpbWVdRE8gTk9UWy9DT0xPUl0gZXhpdCB2aWEgdGhlIG1lbnUuIiwiWW91ciBwbGF0Zm9ybSBjb3VsZCBub3QgYmUgZGV0ZWN0ZWQgc28ganVzdCBwdWxsIHRoZSBwb3dlciBjYWJsZS4iKSAgICAKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjI0RFVEVSTUlORSBQTEFURk9STSMjIyMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAgICAgCmRlZiBwbGF0Zm9ybSgpOgogICAgaWYgeGJtYy5nZXRDb25kVmlzaWJpbGl0eSgnc3lzdGVtLnBsYXRmb3JtLmFuZHJvaWQnKToKICAgICAgICByZXR1cm4gJ2FuZHJvaWQnCiAgICBlbGlmIHhibWMuZ2V0Q29uZFZpc2liaWxpdHkoJ3N5c3RlbS5wbGF0Zm9ybS5saW51eCcpOgogICAgICAgIHJldHVybiAnbGludXgnCiAgICBlbGlmIHhibWMuZ2V0Q29uZFZpc2liaWxpdHkoJ3N5c3RlbS5wbGF0Zm9ybS53aW5kb3dzJyk6CiAgICAgICAgcmV0dXJuICd3aW5kb3dzJwogICAgZWxpZiB4Ym1jLmdldENvbmRWaXNpYmlsaXR5KCdzeXN0ZW0ucGxhdGZvcm0ub3N4Jyk6CiAgICAgICAgcmV0dXJuICdvc3gnCiAgICBlbGlmIHhibWMuZ2V0Q29uZFZpc2liaWxpdHkoJ3N5c3RlbS5wbGF0Zm9ybS5hdHYyJyk6CiAgICAgICAgcmV0dXJuICdhdHYyJwogICAgZWxpZiB4Ym1jLmdldENvbmRWaXNpYmlsaXR5KCdzeXN0ZW0ucGxhdGZvcm0uaW9zJyk6CiAgICAgICAgcmV0dXJuICdpb3MnCiAgICAKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyNGUkVTSCBTVEFSVCMjIyMjIyMjIyMjIyMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCmRlZiBGUkVTSFNUQVJUKHBhcmFtcyk6CiAgICBpZiBza2luIT0gInNraW4uY29uZmx1ZW5jZSI6CiAgICAgICAgZGlhbG9nLm9rKCdbQ09MT1Igb3JhbmdlXVtCXVNjaGlzTSBUVlsvQl1bL0NPTE9SXVtDT0xPUiB3aGl0ZV1XaXphcmRbL0NPTE9SXSAnLCdQbGVhc2Ugc3dpdGNoIHRvIHRoZSBkZWZhdWx0IENvbmZsdWVuY2Ugc2tpbicsJ2JlZm9yZSBwZXJmb3JtaW5nIGEgd2lwZS4nLCcnKQogICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oIkFjdGl2YXRlV2luZG93KGFwcGVhcmFuY2VzZXR0aW5ncykiKQogICAgICAgIHJldHVybgogICAgZWxzZToKICAgICAgICBjaG9pY2UyID0geGJtY2d1aS5EaWFsb2coKS55ZXNubygiW0NPTE9SPXJlZF1BQlNPTFVURUxZIENFUlRBSU4|JywgJycsICcnLCB5ZXNsYWJlbD0nWWVzJyxub2xhYmVsPSdObycpCiAgIGlmIGNob2ljZSA9PSAwOgoJIHJldHVybgogICBlbGlmIGNob2ljZSA9PSAxOiAgIAogICAgdG9fYmFja3VwID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovLycsJ2hvbWUvdXNlcmRhdGEvYWRkb25fZGF0YScpKQogICAgYmFja3VwX3ppcCA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXBfc2tpbnNob3J0Y3V0cy56aXAnKSkKICAgIGJhY2t1cF9wYXRoID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihiYWNrdXBkaXIsJ2JhY2t1cCcpKSAgICAKICAgIGltcG9ydCB6aXBmaWxlCiAgICBkcCA9IHhibWNndWkuRGlhbG9nUHJvZ3Jlc3MoKQogICAgZHAuY3JlYXRlKCJCQUNLVVAvUkVTVE9SRSIsIkJhY2tpbmcgVXAgU2tpbiBTaG9ydGN1dHMiLCcnLCAnUGxlYXNlIFdhaXQnKQogICAgemlwb2JqID0gemlwZmlsZS5aaXBGaWxlKGJhY2t1cF96aXAgLCAndycsIHppcGZpbGUuWklQX0RFRkxBVEVEKQogICAgcm9vdGxlbiA9IGxlbih0b19iYWNrdXApCiAgICBmb3JfcHJvZ3Jlc3MgPSBbXQogICAgSVRFTSA9W10KICAgIGZvciBiYXNlLCBkaXJzLCBmaWxlcyBpbiBvcy53YWxrKHRvX2JhY2t1cCk6CglkaXJzWzpdID0gW2QgZm9yIGQgaW4gZGlycyBpZiBkIG5vdCBpbiBTS0lOU0hPUlRDVVRTXQoJZmlsZXNbOl0gPSBbZiBmb3IgZiBpbiBkaXJzIGlmIGYgbm90IGluIFNLSU5TSE9SVENVVFNdCiAgICAgICAgZm9yIG5hbWUgaW4gZGlyczoKICAgICAgICAgICAgSVRFTS5hcHBlbmQobmFtZSkKICAgICAgICBmb3IgbmFtZSBpbiBmaWxlczoKICAgICAgICAgICAgSVRFTS5hcHBlbmQobmFtZSkKICAgIE5fSVRFTSA9bGVuKElURU0pCiAgICBmb3IgYmFzZSwgZGlycywgZmlsZXMgaW4gb3Mud2Fsayh0b19iYWNrdXApOgoJZGlyc1s6XSA9IFtkIGZvciBkIGluIGRpcnMgaWYgZCBpbiBTS0lOU0hPUlRDVVRTXQogICAgICAgIGZvciBuYW1lIGluIGZpbGVzOgogICAgICAgICAgICBmb3JfcHJvZ3Jlc3MuYXBwZW5kKG5hbWUpIAogICAgICAgICAgICBwcm9ncmVzcyA9IGxlbihmb3JfcHJvZ3Jlc3MpIC8gZmxvYXQoTl9JVEVNKSAqIDEwMCAgCiAgICAgICAgICAgIGRwLnVwZGF0ZShpbnQocHJvZ3Jlc3MpLCJCYWNraW5nIFVwIiwnW0NPTE9SIHllbGxvd10lc1svQ09MT1JdJyVuYW1lLCAnUGxlYXNlIFdhaXQnKQogICAgICAgICAgICBmbiA9IG9zLnBhdGguam9pbihiYXNlLCBuYW1lKQogICAgICAgICAgICBpZiBub3QgJ3RlbXAnIGluIGRpcnM6CiAgICAgICAgICAgICAgICBpZiBub3QgJ3BsdWdpbi52aWRlby51c2J3aXphcmQnIGluIGRpcnM6CiAgICAgICAgICAgICAgICAgICBpbXBvcnQgdGltZQogICAgICAgICAgICAgICAgICAgQ1VOVD0gJzAxLzAxLzE5ODAnCiAgICAgICAgICAgICAgICAgICBGSUxFX0RBVEU9dGltZS5zdHJmdGltZSgnJWQvJW0vJVknLCB0aW1lLmdtdGltZShvcy5wYXRoLmdldG10aW1lKGZuKSkpCiAgICAgICAgICAgICAgICAgICBpZiBGSUxFX0RBVEUgPiBDVU5UOgogICAgICAgICAgICAgICAgICAgICAgIHppcG9iai53cml0ZShmbiwgZm5bcm9vdGxlbjpdKSAgCiAgICB6aXBvYmouY2xvc2UoKQogICAgZHAuY2xvc2UoKQogICAgZGlhbG9nLm9rKCJCQUNLVVAvUkVTVE9SRSIsICJTS0lOIFNob3J0Y3V0cyBBcmUgTm93IEJhY2tlZCBVcCIsICcnLCcnKQogICAgCgkKZGVmIEJBQ0tVUEdVSSgpOiAgCiAgICBpZiBvcy5wYXRoLmV4aXN0cyhvcy5wYXRoLmpvaW4oVVNFUkRBVEEsJ2d1aXNldHRpbmdzLnhtbCcpKToKICAgICAgIHRvX2JhY2t1cCA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly8nLCdob21lL3VzZXJkYXRhJykpCQogICAgICAgcm9vdGxlbiA9IGxlbih0b19iYWNrdXApCiAgICAgICBiYWNrdXBfdWlfemlwID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihiYWNrdXBkaXIsJ2JhY2t1cF91aS56aXAnKSkKICAgICAgIHppcG9iaiA9IHppcGZpbGUuWmlwRmlsZShiYWNrdXBfdWlfemlwICwgJ3cnLCB6aXBmaWxlLlpJUF9ERUZMQVRFRCkKICAgICAgIGZuID0gb3MucGF0aC5qb2luKFVTRVJEQVRBLCAnZ3Vpc2V0dGluZ3MueG1sJykKICAgICAgIGNob2ljZSA9IHhibWNndWkuRGlhbG9nKCkueWVzbm8oIlNraW4gU2V0dGluZ3MiLCAnRG8geW91IHdhbnQgdG8gYmFja3VwIHlvdXIgU2tpbiBzZXR0aW5ncz8nLCAnJywgJycsIHllc2xhYmVsPSdZZXMnLG5vbGFiZWw9J05vJykKICAgICAgIGlmIGNob2ljZSA9PSAwOgogICAgICAgIHJldHVybgogICAgICAgZWxpZiBjaG9pY2UgPT0gMToKCSAgIGRwLmNyZWF0ZSgiQkFDS1VQL1JFU1RPUkUiLCJCYWNraW5nIFVwIEd1aSBTZXR0aW5ncyIsJycsICdQbGVhc2UgV2FpdCcpCgkgICB6aXBvYmoud3JpdGUoZm4sIGZuW3Jvb3RsZW46XSkKCSAgIGRwLmNsb3NlKCkKCSAgIGRpYWxvZy5vaygiQkFDS1VQL1JFU1RPUkUiLCAiR3VpIHNldHRpbmdzIEFyZSBOb3cgQmFja2VkIFVwIiwgJycsJycpCiAgICAgICAKCmRlZiBCQUNLVVBGQVYoKTogIAogICAgaWYgb3MucGF0aC5leGlzdHMob3MucGF0aC5qb2luKFVTRVJEQVRBLCdmYXZvdXJpdGVzLnhtbCcpKToKICAgICAgIHRvX2JhY2t1cCA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly8nLCdob21lL3VzZXJkYXRhJykpCQogICAgICAgcm9vdGxlbiA9IGxlbih0b19iYWNrdXApCiAgICAgICBiYWNrdXBfdWlfemlwID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihiYWNrdXBkaXIsJ2JhY2t1cF9mYXYuemlwJykpCiAgICAgICB6aXBvYmogPSB6aXBmaWxlLlppcEZpbGUoYmFja3VwX3VpX3ppcCAsICd3JywgemlwZmlsZS5aSVBfREVGTEFURUQpCiAgICAgICBmbiA9IG9zLnBhdGguam9pbihVU0VSREFUQSwgJ2Zhdm91cml0ZXMueG1sJykKICAgICAgIGNob2ljZSA9IHhibWNndWkuRGlhbG9nKCkueWVzbm8oIkd1aSBTZXR0aW5ncyIsICdEbyB5b3Ugd2FudCB0byBiYWNrdXAgeW91ciBmYXZvdXJpdGVzPycsICcnLCAnJywgeWVzbGFiZWw9J1llcycsbm9sYWJlbD0nTm8nKQogICAgICAgaWYgY2hvaWNlID09IDA6CiAgICAgICAgICAgIHJldHVybgogICAgICAgZWxpZiBjaG9pY2UgPT0gMToKCSAgIGRwLmNyZWF0ZSgiQkFDS1VQL1JFU1RPUkUiLCJCYWNraW5nIFVwIEZhdm91cml0ZXMiLCcnLCAnUGxlYXNlIFdhaXQnKQoJICAgemlwb2JqLndyaXRlKGZuLCBmbltyb290bGVuOl0pCgkgICBkcC5jbG9zZSgpCgkgICBkaWFsb2cub2soIkJBQ0tVUC9SRVNUT1JFIiwgIkZhdm91cml0ZXMgQXJlIE5vdyBCYWNrZWQgVXAiLCAnJywnJykgICAgICAgICAgCiAgICAJICAgCgpkZWYgQkFDS1VQU09VUkNFKCk6ICAKICAgIGlmIG9zLnBhdGguZXhpc3RzKG9zLnBhdGguam9pbihVU0VSREFUQSwnc291cmNlcy54bWwnKSk6CiAgICAgICB0b19iYWNrdXAgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vJywnaG9tZS91c2VyZGF0YScpKQkKICAgICAgIHJvb3RsZW4gPSBsZW4odG9fYmFja3VwKQogICAgICAgYmFja3VwX3VpX3ppcCA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXBfc291cmNlcy56aXAnKSkKICAgICAgIHppcG9iaiA9IHppcGZpbGUuWmlwRmlsZShiYWNrdXBfdWlfemlwICwgJ3cnLCB6aXBmaWxlLlpJUF9ERUZMQVRFRCkKICAgICAgIGZuID0gb3MucGF0aC5qb2luKFVTRVJEQVRBLCAnc291cmNlcy54bWwnKQogICAgICAgY2hvaWNlID0geGJtY2d1aS5EaWFsb2coKS55ZXNubygiR3VpIFNldHRpbmdzIiwgJ0RvIHlvdSB3YW50IHRvIGJhY2t1cCB5b3VyIHNvdXJjZXM|PTI6CiAgICAgICAgICAgICAgICBwYXJhbXM9c3lzLmFyZ3ZbMl0KICAgICAgICAgICAgICAgIGNsZWFuZWRwYXJhbXM9cGFyYW1zLnJlcGxhY2UoJz8nLCcnKQogICAgICAgICAgICAgICAgaWYgKHBhcmFtc1tsZW4ocGFyYW1zKS0xXT09Jy8nKToKICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zPXBhcmFtc1swOmxlbihwYXJhbXMpLTJdCiAgICAgICAgICAgICAgICBwYWlyc29mcGFyYW1zPWNsZWFuZWRwYXJhbXMuc3BsaXQoJyYnKQogICAgICAgICAgICAgICAgcGFyYW09e30KICAgICAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKGxlbihwYWlyc29mcGFyYW1zKSk6CiAgICAgICAgICAgICAgICAgICAgICAgIHNwbGl0cGFyYW1zPXt9CiAgICAgICAgICAgICAgICAgICAgICAgIHNwbGl0cGFyYW1zPXBhaXJzb2ZwYXJhbXNbaV0uc3BsaXQoJz0nKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVuKHNwbGl0cGFyYW1zKSk9PTI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1bc3BsaXRwYXJhbXNbMF1dPXNwbGl0cGFyYW1zWzFdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIHBhcmFtCgpOID0gYmFzZTY0LmRlY29kZXN0cmluZygnJykKVCA9IGJhc2U2NC5kZWNvZGVzdHJpbmcoJ0wyRmtaRzl1Y3k1MGVIUT0nKQpCID0gYmFzZTY0LmRlY29kZXN0cmluZygnJykKRiA9IGJhc2U2NC5kZWNvZGVzdHJpbmcoJycpCgpkZWYgYWRkRGlyKG5hbWUsdXJsLG1vZGUsaWNvbmltYWdlLGZhbmFydCxkZXNjcmlwdGlvbik6CiAgICAgICAgdT1zeXMuYXJndlswXSsiP3VybD0iK3VybGxpYi5xdW90ZV9wbHVzKHVybCkrIiZtb2RlPSIrc3RyKG1vZGUpKyImbmFtZT0iK3VybGxpYi5xdW90ZV9wbHVzKG5hbWUpKyImaWNvbmltYWdlPSIrdXJsbGliLnF1b3RlX3BsdXMoaWNvbmltYWdlKSsiJmZhbmFydD0iK3VybGxpYi5xdW90ZV9wbHVzKGZhbmFydCkrIiZkZXNjcmlwdGlvbj0iK3VybGxpYi5xdW90ZV9wbHVzKGRlc2NyaXB0aW9uKQogICAgICAgIG9rPVRydWUKICAgICAgICBsaXo9eGJtY2d1aS5MaXN0SXRlbShuYW1lLCBpY29uSW1hZ2U9IkRlZmF1bHRGb2xkZXIucG5nIiwgdGh1bWJuYWlsSW1hZ2U9aWNvbmltYWdlKQogICAgICAgIGxpei5zZXRJbmZvKCB0eXBlPSJWaWRlbyIsIGluZm9MYWJlbHM9eyAiVGl0bGUiOiBuYW1lLCAiUGxvdCI6IGRlc2NyaXB0aW9uIH0gKQogICAgICAgIGxpei5zZXRQcm9wZXJ0eSggIkZhbmFydF9JbWFnZSIsIGZhbmFydCApCiAgICAgICAgaWYgbW9kZT09OTAgOgogICAgICAgICAgICBvaz14Ym1jcGx1Z2luLmFkZERpcmVjdG9yeUl0ZW0oaGFuZGxlPWludChzeXMuYXJndlsxXSksdXJsPXUsbGlzdGl0ZW09bGl6LGlzRm9sZGVyPUZhbHNlKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG9rPXhibWNwbHVnaW4uYWRkRGlyZWN0b3J5SXRlbShoYW5kbGU9aW50KHN5cy5hcmd2WzFdKSx1cmw9dSxsaXN0aXRlbT1saXosaXNGb2xkZXI9VHJ1ZSkKICAgICAgICByZXR1cm4gb2sKCiAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAKcGFyYW1zPWdldF9wYXJhbXMoKQp1cmw9Tm9uZQpuYW1lPU5vbmUKbW9kZT1Ob25lCmljb25pbWFnZT1Ob25lCmZhbmFydD1Ob25lCmRlc2NyaXB0aW9uPU5vbmUKCgp0cnk6CiAgICAgICAgdXJsPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJ1cmwiXSkKZXhjZXB0OgogICAgICAgIHBhc3MKdHJ5OgogICAgICAgIG5hbWU9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbIm5hbWUiXSkKZXhjZXB0OgogICAgICAgIHBhc3MKdHJ5OgogICAgICAgIGljb25pbWFnZT11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1siaWNvbmltYWdlIl0pCmV4Y2VwdDoKICAgICAgICBwYXNzCnRyeTogICAgICAgIAogICAgICAgIG1vZGU9aW50KHBhcmFtc1sibW9kZSJdKQpleGNlcHQ6CiAgICAgICAgcGFzcwp0cnk6ICAgICAgICAKICAgICAgICBmYW5hcnQ9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbImZhbmFydCJdKQpleGNlcHQ6CiAgICAgICAgcGFzcwp0cnk6ICAgICAgICAKICAgICAgICBkZXNjcmlwdGlvbj11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1siZGVzY3JpcHRpb24iXSkKZXhjZXB0OgogICAgICAgIHBhc3MKICAgICAgICAKICAgICAgICAKcHJpbnQgc3RyKFBBVEgpKyc6ICcrc3RyKFZFUlNJT04pCnByaW50ICJNb2RlOiAiK3N0cihtb2RlKQpwcmludCAiVVJMOiAiK3N0cih1cmwpCnByaW50ICJOYW1lOiAiK3N0cihuYW1lKQpwcmludCAiSWNvbkltYWdlOiAiK3N0cihpY29uaW1hZ2UpCgoKZGVmIHNldFZpZXcoY29udGVudCwgdmlld1R5cGUpOgogICAgIyBzZXQgY29udGVudCB0eXBlIHNvIGxpYnJhcnkgc2hvd3MgbW9yZSB2aWV3cyBhbmQgaW5mbwogICAgaWYgY29udGVudDoKICAgICAgICB4Ym1jcGx1Z2luLnNldENvbnRlbnQoaW50KHN5cy5hcmd2WzFdKSwgY29udGVudCkKICAgIGlmIEFERE9OLmdldFNldHRpbmcoJ2F1dG8tdmlldycpPT0ndHJ1ZSc6CiAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiQ29udGFpbmVyLlNldFZpZXdNb2RlKCVzKSIgJSBBRERPTi5nZXRTZXR0aW5nKHZpZXdUeXBlKSApCiAgICAgICAgCiAgICAgICAgCmlmIG1vZGU9PU5vbmUgb3IgdXJsPT1Ob25lIG9yIGxlbih1cmwpPDE6CiAgICAgICAgSU5ERVgoKQoKZWxpZiBtb2RlPT0yMDoKICAgICAgICBCVUlMRE1FTlUoKQoKZWxpZiBtb2RlPT00OgogICAgICAgIFJFU1RPUkUoKQoJCQplbGlmIG1vZGU9PTM6CiAgICAgICAgQkFDS1VQTUVOVSgpCgoJCQplbGlmIG1vZGU9PTY6ICAgICAgICAKCUZSRVNIU1RBUlQocGFyYW1zKQoJCmVsaWYgbW9kZT09NzoKICAgICAgIERlbGV0ZVBhY2thZ2VzKHVybCkKCQkKZWxpZiBtb2RlPT0xMDoKICAgICAgICBBRERPTldJWkFSRChuYW1lLHVybCxkZXNjcmlwdGlvbikKCmVsaWYgbW9kZT09ODI6CiAgICAgICAgcHJpbnQgIiMjIyMjIyMjIyMjIyAgIFdJUEUgWEJNQyAgICMjIyMjIyMjIyMjIyMjIyMjIgogICAgICAgIFdpcGVYQk1DKCkKCmVsaWYgbW9kZT09ODU6CiAgICAgICAgcHJpbnQgIiMjIyMjIyMjIyMjIyAgIEFUVEVNUFQgVE8gS0lMTCBYQk1DL0tPREkgICAjIyMjIyMjIyMjIyMjIyMjIyIKICAgICAgICBraWxseGJtYygpCgkJCmVsaWYgbW9kZT09ODM6CiAgICAgICAgcHJpbnQgIiMjIyMjIyMjIyMjIyAgIEZJWCBTUEVDSUFMIFBBVEhTICAgIyMjIyMjIyMjIyMjIyMjIyMiCiAgICAgICAgRklYX1NQRUNJQUwodXJsKQoJCQplbGlmIG1vZGU9PTkwOgogICAgICAgIFdJWkFSRChuYW1lLHVybCxkZXNjcmlwdGlvbikKZWxpZiBtb2RlPT0xMDA6CiAgICAgICAgU0VUVElOR1MoKQp4Ym1jcGx1Z2luLmVuZE9mRGlyZWN0b3J5KGludChzeXMuYXJndlsxXSkpCg|Iik6CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBmb3IgZiBpbiBmaWxlczoKICAgICAgICAgICAgICAgICAgICAgICAgb3MudW5saW5rKG9zLnBhdGguam9pbihyb290LCBmKSkKICAgICAgICAgICAgICAgICAgICBmb3IgZCBpbiBkaXJzOgogICAgICAgICAgICAgICAgICAgICAgICBzaHV0aWwucm10cmVlKG9zLnBhdGguam9pbihyb290LCBkKSkKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgICAgIyBTZXQgcGF0aCB0byBDeWRpYSBBcmNoaXZlcyBjYWNoZSBmaWxlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICMgU2V0IHBhdGggdG8gV2hhdCB0aCBGdXJrIGNhY2hlIGZpbGVzCiAgICB3dGZfY2FjaGVfcGF0aCA9IG9zLnBhdGguam9pbih4Ym1jLnRyYW5zbGF0ZVBhdGgoJ3NwZWNpYWw6Ly9wcm9maWxlL2FkZG9uX2RhdGEvcGx1Z2luLnZpZGVvLndoYXR0aGVmdXJrL2NhY2hlJyksICcnKQogICAgaWYgb3MucGF0aC5leGlzdHMod3RmX2NhY2hlX3BhdGgpPT1UcnVlOiAgICAKICAgICAgICBmb3Igcm9vdCwgZGlycywgZmlsZXMgaW4gb3Mud2Fsayh3dGZfY2FjaGVfcGF0aCk6CiAgICAgICAgICAgIGZpbGVfY291bnQgPSAwCiAgICAgICAgICAgIGZpbGVfY291bnQgKz0gbGVuKGZpbGVzKQogICAgICAgIAogICAgICAgICMgQ291bnQgZmlsZXMgYW5kIGdpdmUgb3B0aW9uIHRvIGRlbGV0ZQogICAgICAgICAgICBpZiBmaWxlX2NvdW50ID4gMDoKICAgIAogICAgICAgICAgICAgICAgZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQogICAgICAgICAgICAgICAgaWYgZGlhbG9nLnllc25vKCJEZWxldGUgV1RGIENhY2hlIEZpbGVzIiwgc3RyKGZpbGVfY291bnQpICsgIiBmaWxlcyBmb3VuZCIsICJEbyB5b3Ugd2FudCB0byBkZWxldGUgdGhlbT8iKToKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGZvciBmIGluIGZpbGVzOgogICAgICAgICAgICAgICAgICAgICAgICBvcy51bmxpbmsob3MucGF0aC5qb2luKHJvb3QsIGYpKQogICAgICAgICAgICAgICAgICAgIGZvciBkIGluIGRpcnM6CiAgICAgICAgICAgICAgICAgICAgICAgIHNodXRpbC5ybXRyZWUob3MucGF0aC5qb2luKHJvb3QsIGQpKQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBTZXQgcGF0aCB0byA0b0QgY2FjaGUgZmlsZXMKICAgIGNoYW5uZWw0X2NhY2hlX3BhdGg9IG9zLnBhdGguam9pbih4Ym1jLnRyYW5zbGF0ZVBhdGgoJ3NwZWNpYWw6Ly9wcm9maWxlL2FkZG9uX2RhdGEvcGx1Z2luLnZpZGVvLjRvZC9jYWNoZScpLCAnJykKICAgIGlmIG9zLnBhdGguZXhpc3RzKGNoYW5uZWw0X2NhY2hlX3BhdGgpPT1UcnVlOiAgICAKICAgICAgICBmb3Igcm9vdCwgZGlycywgZmlsZXMgaW4gb3Mud2FsayhjaGFubmVsNF9jYWNoZV9wYXRoKToKICAgICAgICAgICAgZmlsZV9jb3VudCA9IDAKICAgICAgICAgICAgZmlsZV9jb3VudCArPSBsZW4oZmlsZXMpCiAgICAgICAgCiAgICAgICAgIyBDb3VudCBmaWxlcyBhbmQgZ2l2ZSBvcHRpb24gdG8gZGVsZXRlCiAgICAgICAgICAgIGlmIGZpbGVfY291bnQgPiAwOgogICAgCiAgICAgICAgICAgICAgICBkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpCiAgICAgICAgICAgICAgICBpZiBkaWFsb2cueWVzbm8oIkRlbGV0ZSA0b0QgQ2FjaGUgRmlsZXMiLCBzdHIoZmlsZV9jb3VudCkgKyAiIGZpbGVzIGZvdW5kIiwgIkRvIHlvdSB3YW50IHRvIGRlbGV0ZSB0aGVtPyIpOgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZm9yIGYgaW4gZmlsZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIG9zLnVubGluayhvcy5wYXRoLmpvaW4ocm9vdCwgZikpCiAgICAgICAgICAgICAgICAgICAgZm9yIGQgaW4gZGlyczoKICAgICAgICAgICAgICAgICAgICAgICAgc2h1dGlsLnJtdHJlZShvcy5wYXRoLmpvaW4ocm9vdCwgZCkpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFNldCBwYXRoIHRvIEJCQyBpUGxheWVyIGNhY2hlIGZpbGVzCiAgICBpcGxheWVyX2NhY2hlX3BhdGg9IG9zLnBhdGguam9pbih4Ym1jLnRyYW5zbGF0ZVBhdGgoJ3NwZWNpYWw6Ly9wcm9maWxlL2FkZG9uX2RhdGEvcGx1Z2luLnZpZGVvLmlwbGF5ZXIvaXBsYXllcl9odHRwX2NhY2hlJyksICcnKQogICAgaWYgb3MucGF0aC5leGlzdHMoaXBsYXllcl9jYWNoZV9wYXRoKT09VHJ1ZTogICAgCiAgICAgICAgZm9yIHJvb3QsIGRpcnMsIGZpbGVzIGluIG9zLndhbGsoaXBsYXllcl9jYWNoZV9wYXRoKToKICAgICAgICAgICAgZmlsZV9jb3VudCA9IDAKICAgICAgICAgICAgZmlsZV9jb3VudCArPSBsZW4oZmlsZXMpCiAgICAgICAgCiAgICAgICAgIyBDb3VudCBmaWxlcyBhbmQgZ2l2ZSBvcHRpb24gdG8gZGVsZXRlCiAgICAgICAgICAgIGlmIGZpbGVfY291bnQgPiAwOgogICAgCiAgICAgICAgICAgICAgICBkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpCiAgICAgICAgICAgICAgICBpZiBkaWFsb2cueWVzbm8oIkRlbGV0ZSBCQkMgaVBsYXllciBDYWNoZSBGaWxlcyIsIHN0cihmaWxlX2NvdW50KSArICIgZmlsZXMgZm91bmQiLCAiRG8geW91IHdhbnQgdG8gZGVsZXRlIHRoZW0|JywgJycsICcnLCB5ZXNsYWJlbD0nWWVzJyxub2xhYmVsPSdObycpCiAgICAgICAgaWYgY2hvaWNlID09IDA6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVsaWYgY2hvaWNlID09IDE6CgkJCWxpYj14Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKGJhY2t1cGRpciwnYWRkb25fZGF0YS56aXAnKSkKCQkJZHAuY3JlYXRlKCJbQ09MT1I9Ymx1ZV1bQl1TY2hpc00gVFZbL0JdWy9DT0xPUl0gQ3VzdG9tIEJ1aWxkcyBUb29sIiwiUmVzdG9yaW5nIiwnJywgJ1BsZWFzZSBXYWl0JykKCQkJZHAudXBkYXRlKDAsIiIsICJFeHRyYWN0aW5nIFppcCBQbGVhc2UgV2FpdCIpCgkJCWV4dHJhY3QuYWxsKGxpYixBRERPTl9EQVRBLGRwKQoJCQl0aW1lLnNsZWVwKDEpCgoJCmRlZiBSRVNUT1JFR1VJKCk6CiBpZiBvcy5wYXRoLmV4aXN0cyhvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXBfdWkuemlwJykpOiAgIAogICAgICAgIGltcG9ydCB0aW1lCiAgICAgICAgZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQogICAgICAgIGNob2ljZSA9IHhibWNndWkuRGlhbG9nKCkueWVzbm8oIkdVSSBTZXR0aW5ncyIsICdEbyB5b3Ugd2FudCB0byByZXN0b3JlIHlvdXIgZ3VpIHNldHRpbmdzPycsICcnLCAnJywgeWVzbGFiZWw9J1llcycsbm9sYWJlbD0nTm8nKQogICAgICAgIGlmIGNob2ljZSA9PSAwOgogICAgICAgICAgcmV0dXJuCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gMToKCQkJCgkJCQoJCQkKCQkJbGliPXhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXBfdWkuemlwJykpCgkJCWFkZG9uZm9sZGVyID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovLycsJ2hvbWUvdXNlcmRhdGEnKSkKCQkJdGltZS5zbGVlcCgyKQoJCQlkcC5jcmVhdGUoIltDT0xPUj1ibHVlXVtCXVNjaGlzTSBUVlsvQl1bL0NPTE9SXSBDdXN0b20gQnVpbGRzIFRvb2wiLCJSZXN0b3JpbmciLCcnLCAnUGxlYXNlIFdhaXQnKQoJCQlwcmludCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JwoJCQlwcmludCBhZGRvbmZvbGRlcgoJCQlwcmludCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JwoJCQlleHRyYWN0LmFsbChsaWIsYWRkb25mb2xkZXIsZHApCgkJCWRwLmNsb3NlKCkKCQkJZGlhbG9nLm9rKCJCQUNLVVAvUkVTVE9SRSIsICJHVUkgc2V0dGluZ3MgQXJlIE5vdyByZXN0b3JlZCIsICcnLCcnKQkKCgogCmRlZiBSRVNUT1JFRkFWKCk6CiBpZiBvcy5wYXRoLmV4aXN0cyhvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXBfZmF2LnppcCcpKToKICAgICAgICBpbXBvcnQgdGltZQogICAgICAgIGRpYWxvZyA9IHhibWNndWkuRGlhbG9nKCkKICAgICAgICBjaG9pY2UgPSB4Ym1jZ3VpLkRpYWxvZygpLnllc25vKCJGYXZvdXJpdGVzIFNldHRpbmdzIiwgJ0RvIHlvdSB3YW50IHRvIHJlc3RvcmUgeW91ciBGYXZvdXJpdGVzPycsICcnLCAnJywgeWVzbGFiZWw9J1llcycsbm9sYWJlbD0nTm8nKQogICAgICAgIGlmIGNob2ljZSA9PSAwOgogICAgICAgICAgICByZXR1cm4KCQkJCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gMToKCQkJCgkJCQoKCQkJbGliPXhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXBfZmF2LnppcCcpKQoJCQlhZGRvbmZvbGRlciA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly8nLCdob21lL3VzZXJkYXRhJykpCgkJCXRpbWUuc2xlZXAoMikKCQkJZHAuY3JlYXRlKCJbQ09MT1I9Ymx1ZV1bQl1TY2hpc00gVFZbL0JdWy9DT0xPUl0gQ3VzdG9tIEJ1aWxkcyBUb29sIiwiUmVzdG9yaW5nIiwnJywgJ1BsZWFzZSBXYWl0JykKCQkJcHJpbnQgJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScKCQkJcHJpbnQgYWRkb25mb2xkZXIKCQkJcHJpbnQgJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScKCQkJZXh0cmFjdC5hbGwobGliLGFkZG9uZm9sZGVyLGRwKQoJCQlkcC5jbG9zZSgpCgkJCWRpYWxvZy5vaygiQkFDS1VQL1JFU1RPUkUiLCAiRmF2b3VyaXRlcyBBcmUgTm93IHJlc3RvcmVkIiwgJycsJycpCQogCmRlZiBSRVNUT1JFU09VUkNFUygpOgogaWYgb3MucGF0aC5leGlzdHMob3MucGF0aC5qb2luKGJhY2t1cGRpciwnYmFja3VwX3NvdXJjZXMuemlwJykpOgogICAgICAgIGltcG9ydCB0aW1lCiAgICAgICAgZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQogICAgICAgIGNob2ljZSA9IHhibWNndWkuRGlhbG9nKCkueWVzbm8oIlNPVVJDRVMgU2V0dGluZ3MiLCAnRG8geW91IHdhbnQgdG8gcmVzdG9yZSB5b3VyIFNvdXJjZXM|KTwvc2V0dGluZz4nJSBza2luCiAgICAgICAgICAgIAogICAgICAgICAgICBtYXRjaD1yZS5jb21waWxlKHIpLmZpbmRhbGwoYSkKICAgICAgICAgICAgcHJpbnQgbWF0Y2gKICAgICAgICAgICAgZm9yIHR5cGUsc3RyaW5nLHNldHRpbmcgaW4gbWF0Y2g6CiAgICAgICAgICAgICAgICBzZXR0aW5nPXNldHRpbmcucmVwbGFjZSgnJnF1b3Q7JywnJykgLnJlcGxhY2UoJyZhbXA7JywnJicpIAogICAgICAgICAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiU2tpbi5TZXQlcyglcywlcykiJSh0eXBlLnRpdGxlKCksc3RyaW5nLHNldHRpbmcpKSAgCiAgICAgICAgICAgICAgICAKICAgICAgICBpZiAnZmF2b3VyaXRlcy54bWwnIGluIGZpbGVuYW1lOgogICAgICAgICAgICBhID0gei5yZWFkKGZpbGVuYW1lKQogICAgICAgICAgICBmID0gb3BlbihGQVZTLCBtb2RlPSd3JykKICAgICAgICAgICAgZi53cml0ZShhKQogICAgICAgICAgICBmLmNsb3NlKCkgIAoJCQkgICAgICAgICAgICAgICAKICAgICAgICBpZiAnc291cmNlcy54bWwnIGluIGZpbGVuYW1lOgogICAgICAgICAgICBhID0gei5yZWFkKGZpbGVuYW1lKQogICAgICAgICAgICBmID0gb3BlbihTT1VSQ0UsIG1vZGU9J3cnKQogICAgICAgICAgICBmLndyaXRlKGEpCiAgICAgICAgICAgIGYuY2xvc2UoKSAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIGlmICdhZHZhbmNlZHNldHRpbmdzLnhtbCcgaW4gZmlsZW5hbWU6CiAgICAgICAgICAgIGEgPSB6LnJlYWQoZmlsZW5hbWUpCiAgICAgICAgICAgIGYgPSBvcGVuKEFEVkFOQ0VELCBtb2RlPSd3JykKICAgICAgICAgICAgZi53cml0ZShhKQogICAgICAgICAgICBmLmNsb3NlKCkgICAgICAgICAgICAgICAgIAoKICAgICAgICBpZiAnUnNzRmVlZHMueG1sJyBpbiBmaWxlbmFtZToKICAgICAgICAgICAgYSA9IHoucmVhZChmaWxlbmFtZSkKICAgICAgICAgICAgZiA9IG9wZW4oUlNTLCBtb2RlPSd3JykKICAgICAgICAgICAgZi53cml0ZShhKQogICAgICAgICAgICBmLmNsb3NlKCkgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICBpZiAna2V5Ym9hcmQueG1sJyBpbiBmaWxlbmFtZToKICAgICAgICAgICAgYSA9IHoucmVhZChmaWxlbmFtZSkKICAgICAgICAgICAgZiA9IG9wZW4oS0VZTUFQUywgbW9kZT0ndycpCiAgICAgICAgICAgIGYud3JpdGUoYSkKICAgICAgICAgICAgZi5jbG9zZSgpICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAKZGVmIFJFU1RPUkUoKToKICAJUkVTVE9SRUFERE9OU0VUVElOR1MoKQoJUkVTVE9SRUZBVigpCglSRVNUT1JFU09VUkNFUygpCglSRVNUT1JFU0tJTlNIT1JUQ1VUUygpCglSRVNUT1JFR1VJKCkKCWtpbGx4Ym1jKCkKCmRlZiBCQUNLVVBNRU5VKCk6CiAgCUJBQ0tVUCgpCglCQUNLVVBGQVYoKQoJQkFDS1VQU09VUkNFKCkKCUJBQ0tVUFNLSU5TSE9SVENVVFMoKQoJQkFDS1VQR1VJKCkKCQoJCmRlZiBYZmluaXR5SW5zdGFsbGVyKCk6CiAgICBwYXRoID0gb3MucGF0aC5qb2luKHhibWMudHJhbnNsYXRlUGF0aCgnc3BlY2lhbDovL2hvbWUnKSwndXNlcmRhdGEnLCAnc291cmNlcy54bWwnKQogICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKHBhdGgpOgogICAgICAgIGYgPSBvcGVuKHBhdGgsIG1vZGU9J3cnKQogICAgICAgIGYud3JpdGUoJzxzb3VyY2VzPjxmaWxlcz48c291cmNlPjxuYW1lPi5bQ09MT1IgYmx1ZV1YWy9DT0xPUl1maW5pdHkgSW5zdGFsbGVyPC9uYW1lPjxwYXRoIHBhdGh2ZXJzaW9uPSIxIj5odHRwOi8veGZpbml0eS54dW5pdHl0YWxrLmNvbTwvcGF0aD48L3NvdXJjZT48L2ZpbGVzPjwvc291cmNlcz4nKQogICAgICAgIGYuY2xvc2UoKQogICAgICAgIHJldHVybgogICAgICAgIAogICAgZiAgID0gb3BlbihwYXRoLCBtb2RlPSdyJykKICAgIHN0ciA9IGYucmVhZCgpCiAgICBmLmNsb3NlKCkKICAgIGlmIG5vdCdodHRwOi8veGZpbml0eS54dW5pdHl0YWxrLmNvbScgaW4gc3RyOgogICAgICAgIGlmICc8L2ZpbGVzPicgaW4gc3RyOgogICAgICAgICAgICBzdHIgPSBzdHIucmVwbGFjZSgnPC9maWxlcz4nLCc8c291cmNlPjxuYW1lPi5bQ09MT1IgYmx1ZV1YWy9DT0xPUl1maW5pdHkgSW5zdGFsbGVyPC9uYW1lPjxwYXRoIHBhdGh2ZXJzaW9uPSIxIj5odHRwOi8veGZpbml0eS54dW5pdHl0YWxrLmNvbTwvcGF0aD48L3NvdXJjZT48L2ZpbGVzPicpCiAgICAgICAgICAgIGYgPSBvcGVuKHBhdGgsIG1vZGU9J3cnKQogICAgICAgICAgICBmLndyaXRlKHN0cikKICAgICAgICAgICAgZi5jbG9zZSgpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoJzwvc291cmNlcz4nLCc8ZmlsZXM|JywgJycsICcnLCB5ZXNsYWJlbD0nWWVzJyxub2xhYmVsPSdObycpCiAgICAgICAgaWYgY2hvaWNlID09IDA6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVsaWYgY2hvaWNlID09IDE6CgkJCQoJCQkKCgkJCWxpYj14Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKGJhY2t1cGRpciwnYmFja3VwX3NvdXJjZXMuemlwJykpCgkJCWFkZG9uZm9sZGVyID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovLycsJ2hvbWUvdXNlcmRhdGEnKSkKCQkJdGltZS5zbGVlcCgyKQoJCQlkcC5jcmVhdGUoIltDT0xPUj1ibHVlXVtCXVNjaGlzTSBUVlsvQl1bL0NPTE9SXSBDdXN0b20gQnVpbGRzIFRvb2wiLCJSZXN0b3JpbmciLCcnLCAnUGxlYXNlIFdhaXQnKQoJCQlwcmludCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JwoJCQlwcmludCBhZGRvbmZvbGRlcgoJCQlwcmludCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JwoJCQlleHRyYWN0LmFsbChsaWIsYWRkb25mb2xkZXIsZHApCgkJCWRpYWxvZyA9IHhibWNndWkuRGlhbG9nKCkKCQkJZHAuY2xvc2UoKQoJCQlkaWFsb2cub2soIkJBQ0tVUC9SRVNUT1JFIiwgIlNvdXJjZXMgQXJlIE5vdyByZXN0b3JlZCIsICcnLCcnKQkKIAoKCQkJCmRlZiBSRVNUT1JFU0tJTlNIT1JUQ1VUUygpOgogaWYgb3MucGF0aC5leGlzdHMob3MucGF0aC5qb2luKGJhY2t1cGRpciwnYmFja3VwX3NraW5zaG9ydGN1dHMuemlwJykpOgogICAgICAgIGltcG9ydCB0aW1lCiAgICAgICAgZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQogICAgICAgIGNob2ljZSA9IHhibWNndWkuRGlhbG9nKCkueWVzbm8oIlNLSU4gU2V0dGluZ3MiLCAnRG8geW91IHdhbnQgdG8gcmVzdG9yZSB5b3VyIFNraW4gU2hvcnRjdXRzJywgJycsICcnLCB5ZXNsYWJlbD0nWWVzJyxub2xhYmVsPSdObycpCiAgICAgICAgaWYgY2hvaWNlID09IDA6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVsaWYgY2hvaWNlID09IDE6CgkJCQoJCQkKCgkJCWxpYj14Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKGJhY2t1cGRpciwnYmFja3VwX3NraW5zaG9ydGN1dHMuemlwJykpCgkJCWFkZG9uZm9sZGVyID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovLycsJ2hvbWUvdXNlcmRhdGEvYWRkb25fZGF0YScpKQoJCQl0aW1lLnNsZWVwKDIpCgkJCWRwLmNyZWF0ZSgiW0NPTE9SPWJsdWVdW0JdU2NoaXNNIFRWWy9CXVsvQ09MT1JdIEN1c3RvbSBCdWlsZHMgVG9vbCIsIlJlc3RvcmluZyIsJycsICdQbGVhc2UgV2FpdCcpCgkJCXByaW50ICc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nCgkJCXByaW50IGFkZG9uZm9sZGVyCgkJCXByaW50ICc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nCgkJCWV4dHJhY3QuYWxsKGxpYixhZGRvbmZvbGRlcixkcCkKCQkJZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQoJCQlkcC5jbG9zZSgpCgkJCWRpYWxvZy5vaygiQkFDS1VQL1JFU1RPUkUiLCAiU2tpbiBTaG9ydGN1dHMgQXJlIE5vdyByZXN0b3JlZCIsICcnLCcnKQkKIAoJCQkKZGVmIFJFRlJFU0hBTEwoKToKICAgICMgZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQogICAgIyBkaWFsb2cub2soIkJBQ0tVUC9SRVNUT1JFIiwgIkZPUkNFIENMT1NFL1JFU1RBUlQgWU9VUiBLT0RJIiwgIiIsIiIpCiAga2lsbHhibWMoKQogCgkKI1Jvb3QgbWVudSBvZiBhZGRvbgpkZWYgSU5ERVgoKToKCQoJdHJ5OgoJCXVzZXJuYW1lID0geGJtY3BsdWdpbi5nZXRTZXR0aW5nKGludChzeXMuYXJndlsxXSksICd1c2VyJykKCQllbWFpbCA9IHhibWNwbHVnaW4uZ2V0U2V0dGluZyhpbnQoc3lzLmFyZ3ZbMV0pLCAnZW1haWwnKQoJZXhjZXB0OgoJCXVzZXJuYW1lID0gJycKCQllbWFpbCA9ICcnCglzdGF0dXMJPSAnJwkKCWxpbmsgPSBPUEVOX1VSTCgnaHR0cDovL3NjaGlzbS10di5jb20vc2NoaXNtMi5waHA|IDA6CgkJCQlzdGF0dXMgPSAnW0NPTE9SIGdvbGRdRWxpdGVbL0NPTE9SXScKCQkJZWxzZTogc3RhdHVzID0gJ0ZyZWUnCgkJCWFkZERpcignW0JddXNlcjpbL0JdJysnW0NPTE9SIGxpbWVdICAnKyBlbnRyeVsnbWVtYmVyX25hbWUnXSArJ1svQ09MT1JdJysgJyAtIFtCXSBhY2NvdW50IHR5cGUgPSBbL0JdJyArIHN0YXR1cywnJywxLElDT04sRkFOQVJULCcnKQoJCQlhZGREaXIoJ1tCXURvd25sb2FkcyA9ICBUaGlzIFdlZWsgWy9CXScgKyBlbnRyeVsnZGxfd2VlayddICsgJ1tCXSAtIFRvdGFsIFsvQl0nICsgZW50cnlbJ2RsX3RvdGFsJ10sJycsMSxJQ09OLEZBTkFSVCwnJykKCglleGNlcHQ6cGFzcwoJaWYgbm90IG9zLnBhdGguZXhpc3RzKGJhY2t1cGRpcik6CgkJb3MubWFrZWRpcnMoYmFja3VwZGlyKQoJYWRkRGlyKCdbQ09MT1IgcmVkXVtCXUZSRVNIIFNUQVJUWy9CXVsvQ09MT1JdJywndXJsJyw2LEFSVCsnZnJlc2hzdGFydC5wbmcnLEZBTkFSVCwnJykKCWFkZERpcignW0NPTE9SIGxpbWVdW0JdSU5TVEFMTFsvQl1bL0NPTE9SXScsQkFTRVVSTCwyMCxBUlQrJ3NjaGlzbXdpei5wbmcnLEZBTkFSVCwnJykKCSMgYWRkRGlyKCdbQ09MT1IgeWVsbG93XVtCXVVQREFURVsvQl1bL0NPTE9SXScsJ3VybCcsMSxBUlQrJ3VwZGF0ZS5wbmcnLEZBTkFSVCwnJykKCWFkZERpcignW0NPTE9SIG9yYW5nZV1bQl1CYWNrdXAgU2V0dGluZ3NbL0JdWy9DT0xPUl0nLCd1cmwnLDMsQVJUKyd0b29sLnBuZycsRkFOQVJULCcnKQoJYWRkRGlyKCdbQ09MT1Igb3JhbmdlXVtCXVJlc3RvcmUgU2V0dGluZ3NbL0JdWy9DT0xPUl0nLCd1cmwnLDQsQVJUKyd0b29sLnBuZycsRkFOQVJULCcnKQoJYWRkRGlyKCdbQ09MT1Igd2hpdGVdW0JdU2V0dGluZ3NbL0JdWy9DT0xPUl0nLCd1cmwnLDEwMCxBUlQrJ3Rvb2wucG5nJyxGQU5BUlQsJycpCgoKZGVmIEJVSUxETUVOVSgpOgoJdHJ5OgoJCXVzZXJuYW1lID0geGJtY3BsdWdpbi5nZXRTZXR0aW5nKGludChzeXMuYXJndlsxXSksICd1c2VyJykKCQllbWFpbCA9IHhibWNwbHVnaW4uZ2V0U2V0dGluZyhpbnQoc3lzLmFyZ3ZbMV0pLCAnZW1haWwnKQoJZXhjZXB0OgoJCXBhc3MKCQkJCglpZiB1c2VybmFtZSA9PSAiIiBvciBlbWFpbCA9PSAiIjoKCQlkaWFsb2cub2soIlVoIG9oLi4iLCAiUGxlYXNlIEVudGVyIHlvdXIgZGV0YWlscywgdGhlbiByZXN0YXJ0IHRoZSBhZGRvbiIpCgkJQURET04ub3BlblNldHRpbmdzKHN5cy5hcmd2WzBdKQoJCXJldHVybigpCglsaW5rID0gT1BFTl9VUkwoJ2h0dHA6Ly9zY2hpc20tdHYuY29tL3NjaGlzbTIucGhwP2FjdGlvbj1nZXRidWlsZHMmdXNlcj0nICsgdXNlcm5hbWUgKyAnJmVtYWlsPScgKyBlbWFpbCkucmVwbGFjZSgnXG4nLCcnKS5yZXBsYWNlKCdccicsJycpCglwcmludCBsaW5rCgl0cnk6CgkJZGF0YSA9IGpzb24ubG9hZHMobGluaykKCWV4Y2VwdDoKCQlkaWFsb2cub2soIlVoIG9oLi4iLCBsaW5rKQoJCXJldHVybigpCglmb3IgZW50cnkgaW4gZGF0YToKCQlhZGREaXIoZW50cnlbJ25hbWUnXSArICcgIC0gdmVyOiAnICsgJ1tDT0xPUiBsaW1lXScrIGVudHJ5Wyd2ZXJzaW9uJ10gKyAnWy9DT0xPUl0nLGVudHJ5Wyd6aXB1cmwnXSw5MCxlbnRyeVsnaW1ndXJsJ10sZW50cnlbJ2ZhbmFydCddLCcnKQogICAgIyBsaW5rID0gT1BFTl9VUkwoJ2h0dHBzOi8vYXJjaGl2ZS5vcmcvZG93bmxvYWQvc3R2X3dpemFyZF9yZWwvd2l6YXJkX3JlbC50eHQnKS5yZXBsYWNlKCdcbicsJycpLnJlcGxhY2UoJ1xyJywnJykKICAgICMgbWF0Y2ggPSByZS5jb21waWxlKCduYW1lPSIoLis|JywgJycsICdBbGwgYWRkb25zIEVYQ0xVRElORyBUSElTIFdJWkFSRCB3aWxsIGJlIGNvbXBsZXRlbHkgd2lwZWQhJywgeWVzbGFiZWw9J1tDT0xPUj1yZWRdWWVzWy9DT0xPUl0nLG5vbGFiZWw9J1tDT0xPUj1ncmVlbl1Ob1svQ09MT1JdJykKICAgIGlmIGNob2ljZTIgPT0gMDoKICAgICAgICByZXR1cm4KICAgIGVsaWYgY2hvaWNlMiA9PSAxOgogICAgICAgIGRwLmNyZWF0ZSgiW0NPTE9SIG9yYW5nZV1bQl1TY2hpc00gVFZbL0JdWy9DT0xPUl1bQ09MT1Igd2hpdGVdV2l6YXJkWy9DT0xPUl0iLCJXaXBpbmcgSW5zdGFsbCIsJycsICdQbGVhc2UgV2FpdCcpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBmb3Igcm9vdCwgZGlycywgZmlsZXMgaW4gb3Mud2FsayhIT01FLHRvcGRvd249VHJ1ZSk6CiAgICAgICAgICAgICAgICBkaXJzWzpdID0gW2QgZm9yIGQgaW4gZGlycyBpZiBkIG5vdCBpbiBFWENMVURFU10KICAgICAgICAgICAgICAgIGZvciBuYW1lIGluIGZpbGVzOgogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgb3MucmVtb3ZlKG9zLnBhdGguam9pbihyb290LG5hbWUpKQogICAgICAgICAgICAgICAgICAgICAgICBvcy5ybWRpcihvcy5wYXRoLmpvaW4ocm9vdCxuYW1lKSkKICAgICAgICAgICAgICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBmb3IgbmFtZSBpbiBkaXJzOgogICAgICAgICAgICAgICAgICAgIHRyeTogb3Mucm1kaXIob3MucGF0aC5qb2luKHJvb3QsbmFtZSkpOyBvcy5ybWRpcihyb290KQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIGV4Y2VwdDogcGFzcwogICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgZGlhbG9nLm9rKCdbQ09MT1Igb3JhbmdlXVtCXVNjaGlzTSBUVlsvQl1bL0NPTE9SXVtDT0xPUiB3aGl0ZV1XaXphcmRbL0NPTE9SXScsJ1dpcGUgU3VjY2Vzc2Z1bCwgcGxlYXNlIHJlc3RhcnQgWEJNQy9Lb2RpIGZvciBjaGFuZ2VzIHRvIHRha2UgZWZmZWN0LicsJycsJycpCiAgICBraWxseGJtYygpCgpkZWYgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKToKI2luaXRpYWxpemUgdGhlIGNvdW50ZXJzCiAgICBwcmludCIjIyMjIyMjIyMjIyBTdGFydCBSZW1vdmluZyBFbXB0eSBGb2xkZXJzICMjIyMjIyMjIyIKICAgIGVtcHR5X2NvdW50ID0gMAogICAgdXNlZF9jb3VudCA9IDAKICAgIGZvciBjdXJkaXIsIHN1YmRpcnMsIGZpbGVzIGluIG9zLndhbGsoSE9NRSk6CiAgICAgICAgaWYgbGVuKHN1YmRpcnMpID09IDAgYW5kIGxlbihmaWxlcykgPT0gMDogI2NoZWNrIGZvciBlbXB0eSBkaXJlY3Rvcmllcy4gbGVuKGZpbGVzKSA9PSAwIG1heSBiZSBvdmVya2lsbAogICAgICAgICAgICBlbXB0eV9jb3VudCArPSAxICNpbmNyZW1lbnQgZW1wdHlfY291bnQKICAgICAgICAgICAgb3Mucm1kaXIoY3VyZGlyKSAjZGVsZXRlIHRoZSBkaXJlY3RvcnkKICAgICAgICAgICAgcHJpbnQgInN1Y2Nlc3NmdWxseSByZW1vdmVkOiAiK2N1cmRpcgogICAgICAgIGVsaWYgbGVuKHN1YmRpcnMpID4gMCBhbmQgbGVuKGZpbGVzKSA|Iik6CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBmb3IgZiBpbiBmaWxlczoKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3MudW5saW5rKG9zLnBhdGguam9pbihyb290LCBmKSkKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgICAgIGZvciBkIGluIGRpcnM6CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNodXRpbC5ybXRyZWUob3MucGF0aC5qb2luKHJvb3QsIGQpKQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcGFzcwogICAgaWYgeGJtYy5nZXRDb25kVmlzaWJpbGl0eSgnc3lzdGVtLnBsYXRmb3JtLkFUVjInKToKICAgICAgICBhdHYyX2NhY2hlX2EgPSBvcy5wYXRoLmpvaW4oJy9wcml2YXRlL3Zhci9tb2JpbGUvTGlicmFyeS9DYWNoZXMvQXBwbGVUVi9WaWRlby8nLCAnT3RoZXInKQogICAgICAgIAogICAgICAgIGZvciByb290LCBkaXJzLCBmaWxlcyBpbiBvcy53YWxrKGF0djJfY2FjaGVfYSk6CiAgICAgICAgICAgIGZpbGVfY291bnQgPSAwCiAgICAgICAgICAgIGZpbGVfY291bnQgKz0gbGVuKGZpbGVzKQogICAgICAgIAogICAgICAgICAgICBpZiBmaWxlX2NvdW50ID4gMDoKCiAgICAgICAgICAgICAgICBkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpCiAgICAgICAgICAgICAgICBpZiBkaWFsb2cueWVzbm8oIkRlbGV0ZSBBVFYyIENhY2hlIEZpbGVzIiwgc3RyKGZpbGVfY291bnQpICsgIiBmaWxlcyBmb3VuZCBpbiAnT3RoZXInIiwgIkRvIHlvdSB3YW50IHRvIGRlbGV0ZSB0aGVtPyIpOgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZm9yIGYgaW4gZmlsZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIG9zLnVubGluayhvcy5wYXRoLmpvaW4ocm9vdCwgZikpCiAgICAgICAgICAgICAgICAgICAgZm9yIGQgaW4gZGlyczoKICAgICAgICAgICAgICAgICAgICAgICAgc2h1dGlsLnJtdHJlZShvcy5wYXRoLmpvaW4ocm9vdCwgZCkpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgIGF0djJfY2FjaGVfYiA9IG9zLnBhdGguam9pbignL3ByaXZhdGUvdmFyL21vYmlsZS9MaWJyYXJ5L0NhY2hlcy9BcHBsZVRWL1ZpZGVvLycsICdMb2NhbEFuZFJlbnRhbCcpCiAgICAgICAgCiAgICAgICAgZm9yIHJvb3QsIGRpcnMsIGZpbGVzIGluIG9zLndhbGsoYXR2Ml9jYWNoZV9iKToKICAgICAgICAgICAgZmlsZV9jb3VudCA9IDAKICAgICAgICAgICAgZmlsZV9jb3VudCArPSBsZW4oZmlsZXMpCiAgICAgICAgCiAgICAgICAgICAgIGlmIGZpbGVfY291bnQgPiAwOgoKICAgICAgICAgICAgICAgIGRpYWxvZyA9IHhibWNndWkuRGlhbG9nKCkKICAgICAgICAgICAgICAgIGlmIGRpYWxvZy55ZXNubygiRGVsZXRlIEFUVjIgQ2FjaGUgRmlsZXMiLCBzdHIoZmlsZV9jb3VudCkgKyAiIGZpbGVzIGZvdW5kIGluICdMb2NhbEFuZFJlbnRhbCciLCAiRG8geW91IHdhbnQgdG8gZGVsZXRlIHRoZW0|JywgJycsICdBbGwgYWRkb25zIEVYQ0xVRElORyBUSElTIFdJWkFSRCB3aWxsIGJlIGNvbXBsZXRlbHkgd2lwZWQhJywgeWVzbGFiZWw9J1llcycsbm9sYWJlbD0nTm8nKQogICAgaWYgY2hvaWNlMiA9PSAwOgogICAgICAgIHJldHVybgogICAgZWxpZiBjaG9pY2UyID09IDE6CiAgICAgICAgZHAuY3JlYXRlKCJbQ09MT1I9Ymx1ZV1bQl1TY2hpc00gVFZbL0JdWy9DT0xPUl0gQ3VzdG9tIEJ1aWxkcyBUb29sIiwiV2lwaW5nIEluc3RhbGwiLCcnLCAnUGxlYXNlIFdhaXQnKQogICAgICAgIHRyeToKICAgICAgICAgICAgZm9yIHJvb3QsIGRpcnMsIGZpbGVzIGluIG9zLndhbGsoSE9NRSx0b3Bkb3duPVRydWUpOgogICAgICAgICAgICAgICAgZGlyc1s6XSA9IFtkIGZvciBkIGluIGRpcnMgaWYgZCBub3QgaW4gRVhDTFVERVNdCiAgICAgICAgICAgICAgICBmb3IgbmFtZSBpbiBmaWxlczoKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIG9zLnJlbW92ZShvcy5wYXRoLmpvaW4ocm9vdCxuYW1lKSkKICAgICAgICAgICAgICAgICAgICAgICAgb3Mucm1kaXIob3MucGF0aC5qb2luKHJvb3QsbmFtZSkpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZm9yIG5hbWUgaW4gZGlyczoKICAgICAgICAgICAgICAgICAgICB0cnk6IG9zLnJtZGlyKG9zLnBhdGguam9pbihyb290LG5hbWUpKTsgb3Mucm1kaXIocm9vdCkKICAgICAgICAgICAgICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICBleGNlcHQ6IHBhc3MKICAgIFJFTU9WRV9FTVBUWV9GT0xERVJTKCkKICAgIFJFTU9WRV9FTVBUWV9GT0xERVJTKCkKICAgIFJFTU9WRV9FTVBUWV9GT0xERVJTKCkKICAgIFJFTU9WRV9FTVBUWV9GT0xERVJTKCkKICAgIFJFTU9WRV9FTVBUWV9GT0xERVJTKCkKICAgIFJFTU9WRV9FTVBUWV9GT0xERVJTKCkKICAgIFJFTU9WRV9FTVBUWV9GT0xERVJTKCkKICAgIGRpYWxvZy5vaygnW0NPTE9SPWJsdWVdW0JdU2NoaXNNVFYgWy9CXVsvQ09MT1JdIEN1c3RvbSBCdWlsZHMgVG9vbCcsJ1dpcGUgU3VjY2Vzc2Z1bCwgcGxlYXNlIHJlc3RhcnQgWEJNQy9Lb2RpIGZvciBjaGFuZ2VzIHRvIHRha2UgZWZmZWN0LicsJycsJycpCgpkZWYgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKToKCiAgICBwcmludCIjIyMjIyMjIyMjIyBTdGFydCBSZW1vdmluZyBFbXB0eSBGb2xkZXJzICMjIyMjIyMjIyIKICAgIGVtcHR5X2NvdW50ID0gMAogICAgdXNlZF9jb3VudCA9IDAKICAgIGZvciBjdXJkaXIsIHN1YmRpcnMsIGZpbGVzIGluIG9zLndhbGsoSE9NRSk6CiAgICAgICAgaWYgbGVuKHN1YmRpcnMpID09IDAgYW5kIGxlbihmaWxlcykgPT0gMDogI2NoZWNrIGZvciBlbXB0eSBkaXJlY3Rvcmllcy4gbGVuKGZpbGVzKSA9PSAwIG1heSBiZSBvdmVya2lsbAogICAgICAgICAgICBlbXB0eV9jb3VudCArPSAxICNpbmNyZW1lbnQgZW1wdHlfY291bnQKICAgICAgICAgICAgb3Mucm1kaXIoY3VyZGlyKSAjZGVsZXRlIHRoZSBkaXJlY3RvcnkKICAgICAgICAgICAgcHJpbnQgInN1Y2Nlc3NmdWxseSByZW1vdmVkOiAiK2N1cmRpcgogICAgICAgIGVsaWYgbGVuKHN1YmRpcnMpID4gMCBhbmQgbGVuKGZpbGVzKSA|Iik6CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBmb3IgZiBpbiBmaWxlczoKICAgICAgICAgICAgICAgICAgICAgICAgb3MudW5saW5rKG9zLnBhdGguam9pbihyb290LCBmKSkKICAgICAgICAgICAgICAgICAgICBmb3IgZCBpbiBkaXJzOgogICAgICAgICAgICAgICAgICAgICAgICBzaHV0aWwucm10cmVlKG9zLnBhdGguam9pbihyb290LCBkKSkKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgU2V0IHBhdGggdG8gSVRWIGNhY2hlIGZpbGVzCiAgICBpdHZfY2FjaGVfcGF0aCA9IG9zLnBhdGguam9pbih4Ym1jLnRyYW5zbGF0ZVBhdGgoJ3NwZWNpYWw6Ly9wcm9maWxlL2FkZG9uX2RhdGEvcGx1Z2luLnZpZGVvLml0di9JbWFnZXMnKSwgJycpCiAgICBpZiBvcy5wYXRoLmV4aXN0cyhpdHZfY2FjaGVfcGF0aCk9PVRydWU6ICAgIAogICAgICAgIGZvciByb290LCBkaXJzLCBmaWxlcyBpbiBvcy53YWxrKGl0dl9jYWNoZV9wYXRoKToKICAgICAgICAgICAgZmlsZV9jb3VudCA9IDAKICAgICAgICAgICAgZmlsZV9jb3VudCArPSBsZW4oZmlsZXMpCiAgICAgICAgCiAgICAgICAgIyBDb3VudCBmaWxlcyBhbmQgZ2l2ZSBvcHRpb24gdG8gZGVsZXRlCiAgICAgICAgICAgIGlmIGZpbGVfY291bnQgPiAwOgogICAgCiAgICAgICAgICAgICAgICBkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpCiAgICAgICAgICAgICAgICBpZiBkaWFsb2cueWVzbm8oIkRlbGV0ZSBJVFYgQ2FjaGUgRmlsZXMiLCBzdHIoZmlsZV9jb3VudCkgKyAiIGZpbGVzIGZvdW5kIiwgIkRvIHlvdSB3YW50IHRvIGRlbGV0ZSB0aGVtPyIpOgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZm9yIGYgaW4gZmlsZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIG9zLnVubGluayhvcy5wYXRoLmpvaW4ocm9vdCwgZikpCiAgICAgICAgICAgICAgICAgICAgZm9yIGQgaW4gZGlyczoKICAgICAgICAgICAgICAgICAgICAgICAgc2h1dGlsLnJtdHJlZShvcy5wYXRoLmpvaW4ocm9vdCwgZCkpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcGFzcwoJCQkJCiAgICAgICAgICAgICAgICAjIFNldCBwYXRoIHRvIHRlbXAgY2FjaGUgZmlsZXMKICAgIHRlbXBfY2FjaGVfcGF0aCA9IG9zLnBhdGguam9pbih4Ym1jLnRyYW5zbGF0ZVBhdGgoJ3NwZWNpYWw6Ly9ob21lL3RlbXAnKSwgJycpCiAgICBpZiBvcy5wYXRoLmV4aXN0cyh0ZW1wX2NhY2hlX3BhdGgpPT1UcnVlOiAgICAKICAgICAgICBmb3Igcm9vdCwgZGlycywgZmlsZXMgaW4gb3Mud2Fsayh0ZW1wX2NhY2hlX3BhdGgpOgogICAgICAgICAgICBmaWxlX2NvdW50ID0gMAogICAgICAgICAgICBmaWxlX2NvdW50ICs9IGxlbihmaWxlcykKICAgICAgICAKICAgICAgICAjIENvdW50IGZpbGVzIGFuZCBnaXZlIG9wdGlvbiB0byBkZWxldGUKICAgICAgICAgICAgaWYgZmlsZV9jb3VudCA|Iik6CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBmb3IgZiBpbiBmaWxlczoKICAgICAgICAgICAgICAgICAgICAgICAgb3MudW5saW5rKG9zLnBhdGguam9pbihyb290LCBmKSkKICAgICAgICAgICAgICAgICAgICBmb3IgZCBpbiBkaXJzOgogICAgICAgICAgICAgICAgICAgICAgICBzaHV0aWwucm10cmVlKG9zLnBhdGguam9pbihyb290LCBkKSkKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBTZXQgcGF0aCB0byBTaW1wbGUgRG93bmxvYWRlciBjYWNoZSBmaWxlcwogICAgZG93bmxvYWRlcl9jYWNoZV9wYXRoID0gb3MucGF0aC5qb2luKHhibWMudHJhbnNsYXRlUGF0aCgnc3BlY2lhbDovL3Byb2ZpbGUvYWRkb25fZGF0YS9zY3JpcHQubW9kdWxlLnNpbXBsZS5kb3dubG9hZGVyJyksICcnKQogICAgaWYgb3MucGF0aC5leGlzdHMoZG93bmxvYWRlcl9jYWNoZV9wYXRoKT09VHJ1ZTogICAgCiAgICAgICAgZm9yIHJvb3QsIGRpcnMsIGZpbGVzIGluIG9zLndhbGsoZG93bmxvYWRlcl9jYWNoZV9wYXRoKToKICAgICAgICAgICAgZmlsZV9jb3VudCA9IDAKICAgICAgICAgICAgZmlsZV9jb3VudCArPSBsZW4oZmlsZXMpCiAgICAgICAgCiAgICAgICAgIyBDb3VudCBmaWxlcyBhbmQgZ2l2ZSBvcHRpb24gdG8gZGVsZXRlCiAgICAgICAgICAgIGlmIGZpbGVfY291bnQgPiAwOgogICAgCiAgICAgICAgICAgICAgICBkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpCiAgICAgICAgICAgICAgICBpZiBkaWFsb2cueWVzbm8oIkRlbGV0ZSBTaW1wbGUgRG93bmxvYWRlciBDYWNoZSBGaWxlcyIsIHN0cihmaWxlX2NvdW50KSArICIgZmlsZXMgZm91bmQiLCAiRG8geW91IHdhbnQgdG8gZGVsZXRlIHRoZW0|IDA6CiAgICAKICAgICAgICAgICAgICAgIGRpYWxvZyA9IHhibWNndWkuRGlhbG9nKCkKICAgICAgICAgICAgICAgIGlmIGRpYWxvZy55ZXNubygiRGVsZXRlIFRFTVAgZGlyIENhY2hlIEZpbGVzIiwgc3RyKGZpbGVfY291bnQpICsgIiBmaWxlcyBmb3VuZCIsICJEbyB5b3Ugd2FudCB0byBkZWxldGUgdGhlbT8iKToKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGZvciBmIGluIGZpbGVzOgogICAgICAgICAgICAgICAgICAgICAgICBvcy51bmxpbmsob3MucGF0aC5qb2luKHJvb3QsIGYpKQogICAgICAgICAgICAgICAgICAgIGZvciBkIGluIGRpcnM6CiAgICAgICAgICAgICAgICAgICAgICAgIHNodXRpbC5ybXRyZWUob3MucGF0aC5qb2luKHJvb3QsIGQpKQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHBhc3MKCQkJCQoKICAgIGRpYWxvZyA9IHhibWNndWkuRGlhbG9nKCkKICAgIGRpYWxvZy5vaygiW0NPTE9SIGJsdWVdW0JdQU1PWy9CXVsvQ09MT1JdW0NPTE9SIGdyZWVuXVtCXWJveFsvQl1bL0NPTE9SXSBbQ09MT1Igd2hpdGVdV2l6YXJkWy9DT0xPUl0iLCAiIEFsbCBDYWNoZSBGaWxlcyBSZW1vdmVkIiwgIltDT0xPUiB5ZWxsb3ddQnJvdWdodCBUbyBZb3UgQnkgW0NPTE9SIGJsdWVdW0JdQU1PWy9CXVsvQ09MT1JdW0NPTE9SIGdyZWVuXVtCXWJveFsvQl1bL0NPTE9SXVsvQ09MT1JdIikKZGVmIFRSSUdHRVIoKToKICAgIG15X2FkZG9uID0geGJtY2FkZG9uLkFkZG9uKCkKICAgIHVzZXJuYW1lID0gdW5pY29kZShteV9hZGRvbi5nZXRTZXR0aW5nKCd1c2VyJykpCiAgICBlbWFpbCA9IHVuaWNvZGUobXlfYWRkb24uZ2V0U2V0dGluZygnZW1haWwnKSkKICAgIGxpbmsgPSAnaHR0cDovL3NjaGlzbS10di5jb20vc2NoaXNtMi5waHA|IDA6ICNjaGVjayBmb3IgdXNlZCBkaXJlY3RvcmllcwogICAgICAgICAgICB1c2VkX2NvdW50ICs9IDEgI2luY3JlbWVudCB1c2VkX2NvdW50CiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KI0Z1bmN0aW9uIHRvIGRvIGEgZnVsbCB3aXBlIC0gdGhpcyBpcyBjYWxsZWQgd2hlbiBkb2luZyBhIGZyZXNoIENCIGluc3RhbGwuCiNUaGFua3MgdG8ga296eiBmb3Igd29ya2luZyBvdXQgaG93IHRvIGFkZCBhbiBleGNsdWRlIGNsYXVzZSBzbyBBTU9ib3ggQ3VzdG9tIEJ1aWxkcyBhZGRvbl9kYXRhIGFuZCBhZGRvbiBpc24ndCB0b3VjaGVkLgpkZWYgV2lwZUluc3RhbGwoKToKICAgIGlmIHNraW4hPSAic2tpbi5jb25mbHVlbmNlIjoKICAgICAgICBkaWFsb2cub2soJ1tDT0xPUj1ibHVlXVtCXVNjaGlzTSBUVlsvQl1bL0NPTE9SXVtDT0xPUj1ncmVlbl1ib3hbL0NPTE9SXSBUb29sJywnUGxlYXNlIHN3aXRjaCB0byB0aGUgZGVmYXVsdCBDb25mbHVlbmNlIHNraW4nLCdiZWZvcmUgcGVyZm9ybWluZyBhIHdpcGUuJywnJykKICAgICAgICB4Ym1jLmV4ZWN1dGVidWlsdGluKCJBY3RpdmF0ZVdpbmRvdyhhcHBlYXJhbmNlc2V0dGluZ3MpIikgICAgICAgCiAgICBlbHNlOgogICAgICAgIGNob2ljZSA9IHhibWNndWkuRGlhbG9nKCkueWVzbm8oIldBTlQgVE8gQ09OVElOVUU|JywgJycsICcnLCB5ZXNsYWJlbD0nWWVzJyxub2xhYmVsPSdObycpCiAgICAgICBpZiBjaG9pY2UgPT0gMDoKICAgICAgICAgICAgcmV0dXJuCiAgICAgICBlbGlmIGNob2ljZSA9PSAxOgoJICAgZHAuY3JlYXRlKCJCQUNLVVAvUkVTVE9SRSIsIkJhY2tpbmcgVXAgU291cmNlcyIsJycsICdQbGVhc2UgV2FpdCcpCgoJICAgemlwb2JqLndyaXRlKGZuLCBmbltyb290bGVuOl0pCgkgICBkcC5jbG9zZSgpCgkgICBkaWFsb2cub2soIkJBQ0tVUC9SRVNUT1JFIiwgIlNvdXJjZXMgQXJlIE5vdyBCYWNrZWQgVXAiLCAnJywnJykJICAgCiAgICBJTkRFWCgpCSAgIAkJICAgCgkgICAKCQpkZWYgUkVBRF9aSVAodXJsKToKCiAgICBpbXBvcnQgemlwZmlsZQogICAgCiAgICB6ID0gemlwZmlsZS5aaXBGaWxlKHVybCwgInIiKQogICAgZm9yIGZpbGVuYW1lIGluIHoubmFtZWxpc3QoKToKICAgICAgICBpZiAnZ3Vpc2V0dGluZ3MueG1sJyBpbiBmaWxlbmFtZToKICAgICAgICAgICAgYSA9IHoucmVhZChmaWxlbmFtZSkKICAgICAgICAgICAgcj0nPHNldHRpbmcgdHlwZT0iKC4rPykiIG5hbWU9IiVzLiguKz8pIj4oLis|JykKICAgICAgICAgICAgZiA9IG9wZW4ocGF0aCwgbW9kZT0ndycpCiAgICAgICAgICAgIGYud3JpdGUoc3RyKQogICAgICAgICAgICBmLmNsb3NlKCkKCiAgICAJCmRlZiBSRVNUT1JFQURET05TRVRUSU5HUygpOgogaWYgb3MucGF0aC5leGlzdHMob3MucGF0aC5qb2luKGJhY2t1cGRpciwnYWRkb25fZGF0YS56aXAnKSk6ICAgCglpbXBvcnQgdGltZQoJCiAgICAgICAgCiAgICAgICAgZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQogICAgICAgIGNob2ljZSA9IHhibWNndWkuRGlhbG9nKCkueWVzbm8oIkFkZG9ucyBTZXR0aW5ncyIsICdEbyB5b3Ugd2FudCB0byByZXN0b3JlIHlvdXIgYWRkb24gc2V0dGluZ3M|IDA6ICNjaGVjayBmb3IgdXNlZCBkaXJlY3RvcmllcwogICAgICAgICAgICB1c2VkX2NvdW50ICs9IDEgI2luY3JlbWVudCB1c2VkX2NvdW50CiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgkKICAgICAgCmRlZiBnZXRfcGFyYW1zKCk6CiAgICAgICAgcGFyYW09W10KICAgICAgICBwYXJhbXN0cmluZz1zeXMuYXJndlsyXQogICAgICAgIGlmIGxlbihwYXJhbXN0cmluZyk|YWN0aW9uPWdldHN0YXRzJnVzZXI9JyArIHVzZXJuYW1lICsgJyZlbWFpbD0nICsgZW1haWwpLnJlcGxhY2UoJ1xuJywnJykucmVwbGFjZSgnXHInLCcnKQoJdHJ5OgoJCWRhdGEgPSBqc29uLmxvYWRzKGxpbmspCglleGNlcHQ6IHBhc3MKCXRyeTogCgkJZm9yIGVudHJ5IGluIGRhdGE6CgkJCXN0YXR1cyA9IGVudHJ5WydpZF9ncm91cCddCgkJCXByaW50IHN0YXR1cwoJCQlpZiBpbnQoc3RhdHVzKSA|PHNvdXJjZT48bmFtZT4uW0NPTE9SIGJsdWVdWFsvQ09MT1JdZmluaXR5IEluc3RhbGxlcjwvbmFtZT48cGF0aCBwYXRodmVyc2lvbj0iMSI|ISEhWy9DT0xPUl0iLCAnQXJlIHlvdSBhYnNvbHV0ZWx5IGNlcnRhaW4geW91IHdhbnQgdG8gd2lwZSB0aGlzIGluc3RhbGw|aHR0cDovL3hmaW5pdHkueHVuaXR5dGFsay5jb208L3BhdGg|bWc9IiguKz8pIi4rP2FuYXJ0PSIoLis|KSIuKz9ybD0iKC4rPykiLis|PC9maWxlcz48L3NvdXJjZXM|base64|PC9zb3VyY2U|b64decode|import|exec".split("|")))