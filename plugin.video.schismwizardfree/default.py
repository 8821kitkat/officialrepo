exec("import re;import base64");exec((lambda p,y:(lambda o,b,f:re.sub(o,b,f))(r"([0-9a-f]+)",lambda m:p(m,y),base64.b64decode("MTcgMTU7MTggMTUuMTYoJzArYS9jLzkvNy84LzExKzYvMTIvMTMvMTQvMTArZS8zLzQvYi9kLzIvMStmLzU9PScp")))(lambda a,b:b[int("0x"+a.group(1),16)],"||dXJsPSIrdXJsbGliLnF1b3RlX3BsdXModXJsKSsiJm1vZGU9IitzdHIobW9kZSkrIiZuYW1lPSIrdXJsbGliLnF1b3RlX3BsdXMobmFtZSkrIiZpY29uaW1hZ2U9Iit1cmxsaWIucXVvdGVfcGx1cyhpY29uaW1hZ2UpKyImZmFuYXJ0PSIrdXJsbGliLnF1b3RlX3BsdXMoZmFuYXJ0KSsiJnZpZGVvPSIrdXJsbGliLnF1b3RlX3BsdXModmlkZW8pKyImZGVzY3JpcHRpb249Iit1cmxsaWIucXVvdGVfcGx1cyhkZXNjcmlwdGlvbikrIiZza2lucz0iK3VybGxpYi5xdW90ZV9wbHVzKHNraW5zKSsiJmd1aXNldHRpbmdzbGluaz0iK3VybGxpYi5xdW90ZV9wbHVzKGd1aXNldHRpbmdzbGluaykKICAgICAgICBvaz1UcnVlCiAgICAgICAgbGl6PXhibWNndWkuTGlzdEl0ZW0obmFtZSwgaWNvbkltYWdlPSJEZWZhdWx0Rm9sZGVyLnBuZyIsIHRodW1ibmFpbEltYWdlPWljb25pbWFnZSkKICAgICAgICBsaXouc2V0SW5mbyggdHlwZT0iVmlkZW8iLCBpbmZvTGFiZWxzPXsgIlRpdGxlIjogbmFtZSwgIlBsb3QiOiBkZXNjcmlwdGlvbiB9ICkKICAgICAgICBsaXouc2V0UHJvcGVydHkoICJGYW5hcnRfSW1hZ2UiLCBmYW5hcnQgKQogICAgICAgIGxpei5zZXRQcm9wZXJ0eSggIkJ1aWxkLlZpZGVvIiwgdmlkZW8gKQogICAgICAgIGlmIChtb2RlPT1Ob25lKSBvciAobW9kZT09J3Jlc3RvcmVfb3B0aW9uJykgb3IgKG1vZGU9PSdiYWNrdXBfb3B0aW9uJykgb3IgKG1vZGU9PSdjYl9yb290X21lbnUnKSBvciAobW9kZT09J2dlbnJlcycpIG9yIChtb2RlPT0nZ3JhYl9idWlsZHMnKSBvciAobW9kZT09J2NvbW11bml0eV9tZW51Jykgb3IgKG1vZGU9PSdpbnN0cnVjdGlvbnMnKSBvciAobW9kZT09J2NvdW50cmllcycpb3IgKHVybD09Tm9uZSkgb3IgKGxlbih1cmwpPDEpOgogICAgICAgICAgICBvaz14Ym1jcGx1Z2luLmFkZERpcmVjdG9yeUl0ZW0oaGFuZGxlPWludChzeXMuYXJndlsxXSksdXJsPXUsbGlzdGl0ZW09bGl6LGlzRm9sZGVyPVRydWUpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgb2s9eGJtY3BsdWdpbi5hZGREaXJlY3RvcnlJdGVtKGhhbmRsZT1pbnQoc3lzLmFyZ3ZbMV0pLHVybD11LGxpc3RpdGVtPWxpeixpc0ZvbGRlcj1GYWxzZSkKICAgICAgICByZXR1cm4gb2sKCmRlZiBwbGF0Zm9ybSgpOgogICAgaWYgeGJtYy5nZXRDb25kVmlzaWJpbGl0eSgnc3lzdGVtLnBsYXRmb3JtLmFuZHJvaWQnKToKICAgICAgICByZXR1cm4gJ2FuZHJvaWQnCiAgICBlbGlmIHhibWMuZ2V0Q29uZFZpc2liaWxpdHkoJ3N5c3RlbS5wbGF0Zm9ybS5saW51eCcpOgogICAgICAgIHJldHVybiAnbGludXgnCiAgICBlbGlmIHhibWMuZ2V0Q29uZFZpc2liaWxpdHkoJ3N5c3RlbS5wbGF0Zm9ybS53aW5kb3dzJyk6CiAgICAgICAgcmV0dXJuICd3aW5kb3dzJwogICAgZWxpZiB4Ym1jLmdldENvbmRWaXNpYmlsaXR5KCdzeXN0ZW0ucGxhdGZvcm0ub3N4Jyk6CiAgICAgICAgcmV0dXJuICdvc3gnCiAgICBlbGlmIHhibWMuZ2V0Q29uZFZpc2liaWxpdHkoJ3N5c3RlbS5wbGF0Zm9ybS5hdHYyJyk6CiAgICAgICAgcmV0dXJuICdhdHYyJwogICAgZWxpZiB4Ym1jLmdldENvbmRWaXNpYmlsaXR5KCdzeXN0ZW0ucGxhdGZvcm0uaW9zJyk6CiAgICAgICAgcmV0dXJuICdpb3MnCiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBBZGRvbiBzdGFydHMgaGVyZQpwYXJhbXM9Z2V0X3BhcmFtcygpCnVybD1Ob25lCm5hbWU9Tm9uZQpidWlsZG5hbWU9Tm9uZQp1cGRhdGVkPU5vbmUKYXV0aG9yPU5vbmUKdmVyc2lvbj1Ob25lCm1vZGU9Tm9uZQppY29uaW1hZ2U9Tm9uZQpkZXNjcmlwdGlvbj1Ob25lCnZpZGVvPU5vbmUKbGluaz1Ob25lCnNraW5zPU5vbmUKdmlkZW9hZGRvbnM9Tm9uZQphdWRpb2FkZG9ucz1Ob25lCnByb2dyYW1hZGRvbnM9Tm9uZQphdWRpb2FkZG9ucz1Ob25lCnNvdXJjZXM9Tm9uZQpsb2NhbD1Ob25lCgp0cnk6CiAgICAgICAgdXJsPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJ1cmwiXSkKZXhjZXB0OgogICAgICAgIHBhc3MKdHJ5OgogICAgICAgIGd1aXNldHRpbmdzbGluaz11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1siZ3Vpc2V0dGluZ3NsaW5rIl0pCmV4Y2VwdDoKICAgICAgICBwYXNzCnRyeToKICAgICAgICBuYW1lPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJuYW1lIl0pCmV4Y2VwdDoKICAgICAgICBwYXNzCnRyeToKICAgICAgICBpY29uaW1hZ2U9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbImljb25pbWFnZSJdKQpleGNlcHQ6CiAgICAgICAgcGFzcwp0cnk6CiAgICAgICAgZmFuYXJ0PXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJmYW5hcnQiXSkKZXhjZXB0OgogICAgICAgIHBhc3MKdHJ5OiAgICAgICAgCiAgICAgICAgbW9kZT1zdHIocGFyYW1zWyJtb2RlIl0pCmV4Y2VwdDoKICAgICAgICBwYXNzCnRyeToKICAgICAgICBsaW5rPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJsaW5rIl0pCmV4Y2VwdDoKICAgICAgICBwYXNzCnRyeToKICAgICAgICBza2lucz11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1sic2tpbnMiXSkKZXhjZXB0OgogICAgICAgIHBhc3MKdHJ5OgogICAgICAgIHZpZGVvYWRkb25zPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJ2aWRlb2FkZG9ucyJdKQpleGNlcHQ6CiAgICAgICAgcGFzcwp0cnk6CiAgICAgICAgYXVkaW9hZGRvbnM9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbImF1ZGlvYWRkb25zIl0pCmV4Y2VwdDoKICAgICAgICBwYXNzCnRyeToKICAgICAgICBwcm9ncmFtYWRkb25zPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJwcm9ncmFtYWRkb25zIl0pCmV4Y2VwdDoKICAgICAgICBwYXNzCnRyeToKICAgICAgICBwaWN0dXJlYWRkb25zPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJwaWN0dXJlYWRkb25zIl0pCmV4Y2VwdDoKICAgICAgICBwYXNzCnRyeToKICAgICAgICBsb2NhbD11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1sibG9jYWwiXSkKZXhjZXB0OgogICAgICAgIHBhc3MKdHJ5OgogICAgICAgIHNvdXJjZXM9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbInNvdXJjZXMiXSkKZXhjZXB0OgogICAgICAgIHBhc3MKdHJ5OgogICAgICAgIGFkdWx0PXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJhZHVsdCJdKQpleGNlcHQ6CiAgICAgICAgcGFzcwp0cnk6CiAgICAgICAgYnVpbGRuYW1lPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJidWlsZG5hbWUiXSkKZXhjZXB0OgogICAgICAgIHBhc3MKdHJ5OgogICAgICAgIHVwZGF0ZWQ9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbInVwZGF0ZWQiXSkKZXhjZXB0OgogICAgICAgIHBhc3MKdHJ5OgogICAgICAgIHZlcnNpb249dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbInZlcnNpb24iXSkKZXhjZXB0OgogICAgICAgIHBhc3MKdHJ5OgogICAgICAgIGF1dGhvcj11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1siYXV0aG9yIl0pCmV4Y2VwdDoKICAgICAgICBwYXNzCnRyeTogICAgICAgIAogICAgICAgIGRlc2NyaXB0aW9uPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJkZXNjcmlwdGlvbiJdKQpleGNlcHQ6CiAgICAgICAgcGFzcwp0cnk6ICAgICAgICAKICAgICAgICB2aWRlbz11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1sidmlkZW8iXSkKZXhjZXB0OgogICAgICAgIHBhc3MKCmRlZiBhZGRMaW5rKG5hbWUsdXJsLG1vZGUsaWNvbmltYWdlLGZhbmFydCxkZXNjcmlwdGlvbik6CiAgICAgICAgdT1zeXMuYXJndlswXSsiP3VybD0iK3VybGxpYi5xdW90ZV9wbHVzKHVybCkrIiZtb2RlPSIrc3RyKG1vZGUpKyImbmFtZT0iK3VybGxpYi5xdW90ZV9wbHVzKG5hbWUpKyImaWNvbmltYWdlPSIrdXJsbGliLnF1b3RlX3BsdXMoaWNvbmltYWdlKSsiJmZhbmFydD0iK3VybGxpYi5xdW90ZV9wbHVzKGZhbmFydCkrIiZkZXNjcmlwdGlvbj0iK3VybGxpYi5xdW90ZV9wbHVzKGRlc2NyaXB0aW9uKQogICAgICAgIG9rPVRydWUKICAgICAgICBsaXo9eGJtY2d1aS5MaXN0SXRlbShuYW1lLCBpY29uSW1hZ2U9IkRlZmF1bHRGb2xkZXIucG5nIiwgdGh1bWJuYWlsSW1hZ2U9aWNvbmltYWdlKQogICAgICAgIGxpei5zZXRJbmZvKCB0eXBlPSJWaWRlbyIsIGluZm9MYWJlbHM9eyAiVGl0bGUiOiBuYW1lLCAiUGxvdCI6IGRlc2NyaXB0aW9uIH0gKQogICAgICAgIGxpei5zZXRQcm9wZXJ0eSggIkZhbmFydF9JbWFnZSIsIGZhbmFydCApCiAgICAgICAgb2s9eGJtY3BsdWdpbi5hZGREaXJlY3RvcnlJdGVtKGhhbmRsZT1pbnQoc3lzLmFyZ3ZbMV0pLHVybD11LGxpc3RpdGVtPWxpeixpc0ZvbGRlcj1GYWxzZSkKICAgICAgICByZXR1cm4gb2sgCmRlZiBXSVpBUkQobmFtZSx1cmwsZGVzY3JpcHRpb24pOiAgIAogICAgaWYgc2tpbiE9ICJza2luLmNvbmZsdWVuY2UiOgoJZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQogICAgICAgIGRpYWxvZy5vaygnW0NPTE9SPW9yYW5nZV1bQl1TY2hpc00gVFZbL0JdWy9DT0xPUl1bQ09MT1I9d2hpdGVdICBXaXphcmRbL0NPTE9SXSAnLCdQbGVhc2Ugc3dpdGNoIHRvIHRoZSBkZWZhdWx0IENvbmZsdWVuY2Ugc2tpbicsJ2JlZm9yZSBwcm9jZWVkaW5nLicsJycpCiAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiQWN0aXZhdGVXaW5kb3coYXBwZWFyYW5jZXNldHRpbmdzKSIpCiAgICAgICAgcmV0dXJuCiAgICBwYXRoID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zJywncGFja2FnZXMnKSkKICAgIG5hbWUgPSAiYnVpbGQiCiAgICBkcCA9IHhibWNndWkuRGlhbG9nUHJvZ3Jlc3MoKQoKICAgIGRwLmNyZWF0ZSgiW0NPTE9SPW9yYW5nZV1bQl1TY2hpc00gVFZbL0JdWy9DT0xPUl1bQ09MT1I9d2hpdGVdIFdpemFyZFsvQ09MT1JdIiwiRG93bmxvYWRpbmcgIiwnJywgJ1BsZWFzZSBXYWl0JykKICAgIGxpYj1vcy5wYXRoLmpvaW4ocGF0aCwgbmFtZSsnLnppcCcpCiAgICB0cnk6CiAgICAgICBvcy5yZW1vdmUobGliKQogICAgZXhjZXB0OgogICAgICAgcGFzcwoJCiAgICBkb3dubG9hZGVyLmRvd25sb2FkKHVybCwgbGliLCBkcCkKICAgIGFkZG9uZm9sZGVyID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovLycsJ2hvbWUnKSkKICAgIHRpbWUuc2xlZXAoMikKICAgIGRwLnVwZGF0ZSgwLCIiLCAiRXh0cmFjdGluZyBaaXAgUGxlYXNlIFdhaXQiKQogICAgZXh0cmFjdC5hbGwobGliLGFkZG9uZm9sZGVyLGRwKQogICAgeGJtYy5zbGVlcCgxMDAwKQogICAgVFJJR0dFUigpCiAgICB4Ym1jLnNsZWVwKDUwMDApCiAgICBkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpCiAgICBGQVNUUkVTRVQoKQoKZGVmIFRSSUdHRVIoKToKICAgIG15X2FkZG9uID0geGJtY2FkZG9uLkFkZG9uKCkKICAgIHVzZXJuYW1lID0gdW5pY29kZShteV9hZGRvbi5nZXRTZXR0aW5nKCd1c2VyJykpCiAgICBlbWFpbCA9IHVuaWNvZGUobXlfYWRkb24uZ2V0U2V0dGluZygnZW1haWwnKSkKICAgIGxpbmsgPSAnaHR0cDovL3NjaGlzbS10di5jb20vc2NoaXNtMi5waHA|Jywgbm9sYWJlbD0nTm8sIENhbmNlbCcseWVzbGFiZWw9J1llcywgQ2xvc2UnKQogICAgaWYgY2hvaWNlID09IDA6CiAgICAgICAgSU5ERVgoKQogICAgZWxpZiBjaG9pY2UgPT0gMToKICAgICAgICBwYXNzCiAgICBteXBsYXRmb3JtID0gcGxhdGZvcm0oKQogICAgcHJpbnQgIlBsYXRmb3JtOiAiICsgc3RyKG15cGxhdGZvcm0pCiAgICBpZiBteXBsYXRmb3JtID09ICdvc3gnOiAjIE9TWAogICAgICAgIHByaW50ICIjIyMjIyMjIyMjIyMgICB0cnkgb3N4IGZvcmNlIGNsb3NlICAjIyMjIyMjIyMjIyMjIyMjIyIKICAgICAgICB0cnk6IG9zLnN5c3RlbSgna2lsbGFsbCAtOSBYQk1DJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICB0cnk6IG9zLnN5c3RlbSgna2lsbGFsbCAtOSBLb2RpJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICBkaWFsb2cub2soIltDT0xPUj1yZWRdW0JdV0FSTklORyAgISEhWy9DT0xPUl1bL0JdIiwgIklmIHlvdVwncmUgc2VlaW5nIHRoaXMgbWVzc2FnZSBpdCBtZWFucyB0aGUgZm9yY2UgY2xvc2UiLCAid2FzIHVuc3VjY2Vzc2Z1bC4gUGxlYXNlIGZvcmNlIGNsb3NlIFhCTUMvS29kaSBbQ09MT1I9bGltZV1ETyBOT1RbL0NPTE9SXSBleGl0IGNsZWFubHkgdmlhIHRoZSBtZW51LiIsJycpCiAgICBlbGlmIG15cGxhdGZvcm0gPT0gJ2xpbnV4JzogI0xpbnV4CiAgICAgICAgcHJpbnQgIiMjIyMjIyMjIyMjIyAgIHRyeSBsaW51eCBmb3JjZSBjbG9zZSAgIyMjIyMjIyMjIyMjIyMjIyMiCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ2tpbGxhbGwgWEJNQycpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ2tpbGxhbGwgS29kaScpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ2tpbGxhbGwgLTkgeGJtYy5iaW4nKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIHRyeTogb3Muc3lzdGVtKCdraWxsYWxsIC05IGtvZGkuYmluJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICBkaWFsb2cub2soIltDT0xPUj1yZWRdW0JdV0FSTklORyAgISEhWy9DT0xPUl1bL0JdIiwgIklmIHlvdVwncmUgc2VlaW5nIHRoaXMgbWVzc2FnZSBpdCBtZWFucyB0aGUgZm9yY2UgY2xvc2UiLCAid2FzIHVuc3VjY2Vzc2Z1bC4gUGxlYXNlIGZvcmNlIGNsb3NlIFhCTUMvS29kaSBbQ09MT1I9bGltZV1ETyBOT1RbL0NPTE9SXSBleGl0IGNsZWFubHkgdmlhIHRoZSBtZW51LiIsJycpCiAgICBlbGlmIG15cGxhdGZvcm0gPT0gJ2FuZHJvaWQnOiAjIEFuZHJvaWQgIAogICAgICAgIHByaW50ICIjIyMjIyMjIyMjIyMgICB0cnkgYW5kcm9pZCBmb3JjZSBjbG9zZSAgIyMjIyMjIyMjIyMjIyMjIyMiCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ2FkYiBzaGVsbCBhbSBmb3JjZS1zdG9wIG9yZy54Ym1jLmtvZGknKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIHRyeTogb3Muc3lzdGVtKCdhZGIgc2hlbGwgYW0gZm9yY2Utc3RvcCBvcmcua29kaScpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ2FkYiBzaGVsbCBhbSBmb3JjZS1zdG9wIG9yZy54Ym1jLnhibWMnKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIHRyeTogb3Muc3lzdGVtKCdhZGIgc2hlbGwgYW0gZm9yY2Utc3RvcCBvcmcueGJtYycpCiAgICAgICAgZXhjZXB0OiBwYXNzICAgICAgICAKICAgICAgICBkaWFsb2cub2soIltDT0xPUj1yZWRdW0JdV0FSTklORyAgISEhWy9DT0xPUl1bL0JdIiwgIllvdXIgc3lzdGVtIGhhcyBiZWVuIGRldGVjdGVkIGFzIEFuZHJvaWQsIHlvdSAiLCAiW0NPTE9SPXllbGxvd11bQl1NVVNUWy9DT0xPUl1bL0JdIGZvcmNlIGNsb3NlIFhCTUMvS29kaS4gW0NPTE9SPWxpbWVdRE8gTk9UWy9DT0xPUl0gZXhpdCBjbGVhbmx5IHZpYSB0aGUgbWVudS4iLCJQdWxsaW5nIHRoZSBwb3dlciBjYWJsZSBpcyB0aGUgc2ltcGxlc3QgbWV0aG9kIHRvIGZvcmNlIGNsb3NlLiIpCiAgICBlbGlmIG15cGxhdGZvcm0gPT0gJ3dpbmRvd3MnOiAjIFdpbmRvd3MKICAgICAgICBwcmludCAiIyMjIyMjIyMjIyMjICAgdHJ5IHdpbmRvd3MgZm9yY2UgY2xvc2UgICMjIyMjIyMjIyMjIyMjIyMjIgogICAgICAgIHRyeToKICAgICAgICAgICAgb3Muc3lzdGVtKCdARUNITyBvZmYnKQogICAgICAgICAgICBvcy5zeXN0ZW0oJ3Rza2lsbCBYQk1DLmV4ZScpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgdHJ5OgogICAgICAgICAgICBvcy5zeXN0ZW0oJ0BFQ0hPIG9mZicpCiAgICAgICAgICAgIG9zLnN5c3RlbSgndHNraWxsIEtvZGkuZXhlJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICB0cnk6CiAgICAgICAgICAgIG9zLnN5c3RlbSgnQEVDSE8gb2ZmJykKICAgICAgICAgICAgb3Muc3lzdGVtKCdUQVNLS0lMTCAvaW0gS29kaS5leGUgL2YnKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIHRyeToKICAgICAgICAgICAgb3Muc3lzdGVtKCdARUNITyBvZmYnKQogICAgICAgICAgICBvcy5zeXN0ZW0oJ1RBU0tLSUxMIC9pbSBYQk1DLmV4ZSAvZicpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgZGlhbG9nLm9rKCJbQ09MT1I9cmVkXVtCXVdBUk5JTkcgICEhIVsvQ09MT1JdWy9CXSIsICJJZiB5b3VcJ3JlIHNlZWluZyB0aGlzIG1lc3NhZ2UgaXQgbWVhbnMgdGhlIGZvcmNlIGNsb3NlIiwgIndhcyB1bnN1Y2Nlc3NmdWwuIFBsZWFzZSBmb3JjZSBjbG9zZSBYQk1DL0tvZGkgW0NPTE9SPWxpbWVdRE8gTk9UWy9DT0xPUl0gZXhpdCBjbGVhbmx5IHZpYSB0aGUgbWVudS4iLCJVc2UgdGFzayBtYW5hZ2VyIGFuZCBOT1QgQUxUIEY0IikKICAgIGVsc2U6ICNBVFYKICAgICAgICBwcmludCAiIyMjIyMjIyMjIyMjICAgdHJ5IGF0diBmb3JjZSBjbG9zZSAgIyMjIyMjIyMjIyMjIyMjIyMiCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ2tpbGxhbGwgQXBwbGVUVicpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgcHJpbnQgIiMjIyMjIyMjIyMjIyAgIHRyeSByYXNwYm1jIGZvcmNlIGNsb3NlICAjIyMjIyMjIyMjIyMjIyMjIyIgI09TTUMgLyBSYXNwYm1jCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ3N1ZG8gaW5pdGN0bCBzdG9wIGtvZGknKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIHRyeTogb3Muc3lzdGVtKCdzdWRvIGluaXRjdGwgc3RvcCB4Ym1jJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICBkaWFsb2cub2soIltDT0xPUj1yZWRdW0JdV0FSTklORyAgISEhWy9DT0xPUl1bL0JdIiwgIklmIHlvdVwncmUgc2VlaW5nIHRoaXMgbWVzc2FnZSBpdCBtZWFucyB0aGUgZm9yY2UgY2xvc2UiLCAid2FzIHVuc3VjY2Vzc2Z1bC4gUGxlYXNlIGZvcmNlIGNsb3NlIFhCTUMvS29kaSBbQ09MT1I9bGltZV1ETyBOT1RbL0NPTE9SXSBleGl0IHZpYSB0aGUgbWVudS4iLCJZb3VyIHBsYXRmb3JtIGNvdWxkIG5vdCBiZSBkZXRlY3RlZCBzbyBqdXN0IHB1bGwgdGhlIHBvd2VyIGNhYmxlLiIpCgpkZWYgQWRkb25fU2V0dGluZ3MoKToKICAgIEFERE9OLm9wZW5TZXR0aW5ncyhzeXMuYXJndlswXSkKCmRlZiBXaXBlWEJNQygpOgogICAgaWYgc2tpbiE9ICJza2luLmNvbmZsdWVuY2UiOgogICAgICAgIGRpYWxvZy5vaygnW0NPTE9SPWJsdWVdW0JdU2NoaXNNIFRWWy9CXVsvQ09MT1JdW0NPTE9SPWdyZWVuXVsvQ09MT1JdIEN1c3RvbSBCdWlsZHMgVG9vbCcsJ1BsZWFzZSBzd2l0Y2ggdG8gdGhlIGRlZmF1bHQgQ29uZmx1ZW5jZSBza2luJywnYmVmb3JlIHBlcmZvcm1pbmcgYSB3aXBlLicsJycpCiAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiQWN0aXZhdGVXaW5kb3coYXBwZWFyYW5jZXNldHRpbmdzKSIpCiAgICAgICAgcmV0dXJuCiAgICBlbHNlOgogICAgICAgIGNob2ljZSA9IHhibWNndWkuRGlhbG9nKCkueWVzbm8oIlZFUlkgSU1QT1JUQU5UIiwgJ1RoaXMgd2lsbCBjb21wbGV0ZWx5IHdpcGUgeW91ciBpbnN0YWxsLicsICdXb3VsZCB5b3UgbGlrZSB0byBjcmVhdGUgYSBiYWNrdXAgYmVmb3JlIHByb2NlZWRpbmc|JywgJycsIHllc2xhYmVsPSdZZXMnLG5vbGFiZWw9J05vJykKICAgICAgICBpZiBjaG9pY2UgPT0gMToKICAgICAgICAgICAgbXliYWNrdXBwYXRoID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihiYWNrdXBkaXIsJ1NjaGlzTSBUViBCdWlsZHMnLCdNeSBCdWlsZHMnKSkKICAgICAgICAgICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKG15YmFja3VwcGF0aCk6CiAgICAgICAgICAgICAgICBvcy5tYWtlZGlycyhteWJhY2t1cHBhdGgpCiAgICAgICAgICAgIHZxID0gX2dldF9rZXlib2FyZCggaGVhZGluZz0iRW50ZXIgYSBuYW1lIGZvciB0aGlzIGJhY2t1cCIgKQogICAgICAgICAgICBpZiAoIG5vdCB2cSApOiByZXR1cm4gRmFsc2UsIDAKICAgICAgICAgICAgdGl0bGUgPSB1cmxsaWIucXVvdGVfcGx1cyh2cSkKICAgICAgICAgICAgYmFja3VwX3ppcCA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4obXliYWNrdXBwYXRoLHRpdGxlKycuemlwJykpCiAgICAgICAgICAgIGV4Y2x1ZGVfZGlyc19mdWxsID0gIFsnYmFja3VwZGlyJywncGx1Z2luLnZpZGVvLnNjaGlzbXdpemFyZGZyZWUnLCdyZXBvc2l0b3J5LnNjaGlzbXR2LmFkZG9ucyddCiAgICAgICAgICAgIGV4Y2x1ZGVfZmlsZXNfZnVsbCA9IFsieGJtYy5sb2ciLCJ4Ym1jLm9sZC5sb2ciLCJrb2RpLmxvZyIsImtvZGkub2xkLmxvZyIsJy5EU19TdG9yZScsJy5zZXR1cF9jb21wbGV0ZScsJ1hCTUNIZWxwZXIuY29uZiddCiAgICAgICAgICAgIG1lc3NhZ2VfaGVhZGVyID0gIkNyZWF0aW5nIGZ1bGwgYmFja3VwIG9mIGV4aXN0aW5nIGJ1aWxkIgogICAgICAgICAgICBtZXNzYWdlMSA9ICJBcmNoaXZpbmcuLi4iCiAgICAgICAgICAgIG1lc3NhZ2UyID0gIiIKICAgICAgICAgICAgbWVzc2FnZTMgPSAiUGxlYXNlIFdhaXQiCiAgICAgICAgICAgIEFSQ0hJVkVfQ0IoSE9NRSwgYmFja3VwX3ppcCwgbWVzc2FnZV9oZWFkZXIsIG1lc3NhZ2UxLCBtZXNzYWdlMiwgbWVzc2FnZTMsIGV4Y2x1ZGVfZGlyc19mdWxsLCBleGNsdWRlX2ZpbGVzX2Z1bGwpCiAgICBjaG9pY2UyID0geGJtY2d1aS5EaWFsb2coKS55ZXNubygiQUJTT0xVVEVMWSBDRVJUQUlOPyEhISIsICdBcmUgeW91IGFic29sdXRlbHkgY2VydGFpbiB5b3Ugd2FudCB0byB3aXBlIHRoaXMgaW5zdGFsbD8nLCAnJywgJ0FsbCBhZGRvbnMgRVhDTFVESU5HIFRISVMgV0laQVJEIHdpbGwgYmUgY29tcGxldGVseSB3aXBlZCEnLCB5ZXNsYWJlbD0nWWVzJyxub2xhYmVsPSdObycpCiAgICBpZiBjaG9pY2UyID09IDA6CiAgICAgICAgcmV0dXJuCiAgICBlbGlmIGNob2ljZTIgPT0gMToKICAgICAgICBkcC5jcmVhdGUoIltDT0xPUj1ibHVlXVtCXVNjaGlzTSBUVlsvQl1bL0NPTE9SXSBDdXN0b20gQnVpbGRzIFRvb2wiLCJXaXBpbmcgSW5zdGFsbCIsJycsICdQbGVhc2UgV2FpdCcpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBmb3Igcm9vdCwgZGlycywgZmlsZXMgaW4gb3Mud2FsayhIT01FLHRvcGRvd249VHJ1ZSk6CiAgICAgICAgICAgICAgICBkaXJzWzpdID0gW2QgZm9yIGQgaW4gZGlycyBpZiBkIG5vdCBpbiBFWENMVURFU10KICAgICAgICAgICAgICAgIGZvciBuYW1lIGluIGZpbGVzOgogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgb3MucmVtb3ZlKG9zLnBhdGguam9pbihyb290LG5hbWUpKQogICAgICAgICAgICAgICAgICAgICAgICBvcy5ybWRpcihvcy5wYXRoLmpvaW4ocm9vdCxuYW1lKSkKICAgICAgICAgICAgICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBmb3IgbmFtZSBpbiBkaXJzOgogICAgICAgICAgICAgICAgICAgIHRyeTogb3Mucm1kaXIob3MucGF0aC5qb2luKHJvb3QsbmFtZSkpOyBvcy5ybWRpcihyb290KQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIGV4Y2VwdDogcGFzcwogICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgZGlhbG9nLm9rKCdbQ09MT1I9Ymx1ZV1bQl1TY2hpc01UViBbL0JdWy9DT0xPUl0gQ3VzdG9tIEJ1aWxkcyBUb29sJywnV2lwZSBTdWNjZXNzZnVsLCBwbGVhc2UgcmVzdGFydCBYQk1DL0tvZGkgZm9yIGNoYW5nZXMgdG8gdGFrZSBlZmZlY3QuJywnJywnJykKCmRlZiBSRU1PVkVfRU1QVFlfRk9MREVSUygpOgoKICAgIHByaW50IiMjIyMjIyMjIyMjIFN0YXJ0IFJlbW92aW5nIEVtcHR5IEZvbGRlcnMgIyMjIyMjIyMjIgogICAgZW1wdHlfY291bnQgPSAwCiAgICB1c2VkX2NvdW50ID0gMAogICAgZm9yIGN1cmRpciwgc3ViZGlycywgZmlsZXMgaW4gb3Mud2FsayhIT01FKToKICAgICAgICBpZiBsZW4oc3ViZGlycykgPT0gMCBhbmQgbGVuKGZpbGVzKSA9PSAwOiAjY2hlY2sgZm9yIGVtcHR5IGRpcmVjdG9yaWVzLiBsZW4oZmlsZXMpID09IDAgbWF5IGJlIG92ZXJraWxsCiAgICAgICAgICAgIGVtcHR5X2NvdW50ICs9IDEgI2luY3JlbWVudCBlbXB0eV9jb3VudAogICAgICAgICAgICBvcy5ybWRpcihjdXJkaXIpICNkZWxldGUgdGhlIGRpcmVjdG9yeQogICAgICAgICAgICBwcmludCAic3VjY2Vzc2Z1bGx5IHJlbW92ZWQ6ICIrY3VyZGlyCiAgICAgICAgZWxpZiBsZW4oc3ViZGlycykgPiAwIGFuZCBsZW4oZmlsZXMpID4gMDogI2NoZWNrIGZvciB1c2VkIGRpcmVjdG9yaWVzCiAgICAgICAgICAgIHVzZWRfY291bnQgKz0gMSAjaW5jcmVtZW50IHVzZWRfY291bnQKIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQojRnVuY3Rpb24gdG8gZG8gYSBmdWxsIHdpcGUgLSB0aGlzIGlzIGNhbGxlZCB3aGVuIGRvaW5nIGEgZnJlc2ggQ0IgaW5zdGFsbC4KI1RoYW5rcyB0byBrb3p6IGZvciB3b3JraW5nIG91dCBob3cgdG8gYWRkIGFuIGV4Y2x1ZGUgY2xhdXNlIHNvIEFNT2JveCBDdXN0b20gQnVpbGRzIGFkZG9uX2RhdGEgYW5kIGFkZG9uIGlzbid0IHRvdWNoZWQuCmRlZiBXaXBlSW5zdGFsbCgpOgogICAgaWYgc2tpbiE9ICJza2luLmNvbmZsdWVuY2UiOgogICAgICAgIGRpYWxvZy5vaygnW0NPTE9SPWJsdWVdW0JdU2NoaXNNIFRWWy9CXVsvQ09MT1JdW0NPTE9SPWdyZWVuXWJveFsvQ09MT1JdIFRvb2wnLCdQbGVhc2Ugc3dpdGNoIHRvIHRoZSBkZWZhdWx0IENvbmZsdWVuY2Ugc2tpbicsJ2JlZm9yZSBwZXJmb3JtaW5nIGEgd2lwZS4nLCcnKQogICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oIkFjdGl2YXRlV2luZG93KGFwcGVhcmFuY2VzZXR0aW5ncykiKSAgICAgICAKICAgIGVsc2U6CiAgICAgICAgY2hvaWNlID0geGJtY2d1aS5EaWFsb2coKS55ZXNubygiV0FOVCBUTyBDT05USU5VRT8iLCAnQXJlIHlvdSBhYnNvbHV0ZWx5IGNlcnRhaW4geW91IHdhbnQgdG8gd2lwZSB0aGlzIGluc3RhbGw|JywnJykKICAgICAgICAgICAgICAgIGlmIChwYXJhbXNbbGVuKHBhcmFtcyktMV09PScvJyk6CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcz1wYXJhbXNbMDpsZW4ocGFyYW1zKS0yXQogICAgICAgICAgICAgICAgcGFpcnNvZnBhcmFtcz1jbGVhbmVkcGFyYW1zLnNwbGl0KCcmJykKICAgICAgICAgICAgICAgIHBhcmFtPXt9CiAgICAgICAgICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4ocGFpcnNvZnBhcmFtcykpOgogICAgICAgICAgICAgICAgICAgICAgICBzcGxpdHBhcmFtcz17fQogICAgICAgICAgICAgICAgICAgICAgICBzcGxpdHBhcmFtcz1wYWlyc29mcGFyYW1zW2ldLnNwbGl0KCc9JykKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxlbihzcGxpdHBhcmFtcykpPT0yOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtW3NwbGl0cGFyYW1zWzBdXT1zcGxpdHBhcmFtc1sxXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIHJldHVybiBwYXJhbQoKTiA9IGJhc2U2NC5kZWNvZGVzdHJpbmcoJycpClQgPSBiYXNlNjQuZGVjb2Rlc3RyaW5nKCdMMkZrWkc5dWN5NTBlSFE9JykKQiA9IGJhc2U2NC5kZWNvZGVzdHJpbmcoJycpCkYgPSBiYXNlNjQuZGVjb2Rlc3RyaW5nKCcnKQoKZGVmIGFkZERpcihuYW1lLHVybCxtb2RlLGljb25pbWFnZSxmYW5hcnQsZGVzY3JpcHRpb24pOgogICAgICAgIHU9c3lzLmFyZ3ZbMF0rIj91cmw9Iit1cmxsaWIucXVvdGVfcGx1cyh1cmwpKyImbW9kZT0iK3N0cihtb2RlKSsiJm5hbWU9Iit1cmxsaWIucXVvdGVfcGx1cyhuYW1lKSsiJmljb25pbWFnZT0iK3VybGxpYi5xdW90ZV9wbHVzKGljb25pbWFnZSkrIiZmYW5hcnQ9Iit1cmxsaWIucXVvdGVfcGx1cyhmYW5hcnQpKyImZGVzY3JpcHRpb249Iit1cmxsaWIucXVvdGVfcGx1cyhkZXNjcmlwdGlvbikKICAgICAgICBvaz1UcnVlCiAgICAgICAgbGl6PXhibWNndWkuTGlzdEl0ZW0obmFtZSwgaWNvbkltYWdlPSJEZWZhdWx0Rm9sZGVyLnBuZyIsIHRodW1ibmFpbEltYWdlPWljb25pbWFnZSkKICAgICAgICBsaXouc2V0SW5mbyggdHlwZT0iVmlkZW8iLCBpbmZvTGFiZWxzPXsgIlRpdGxlIjogbmFtZSwgIlBsb3QiOiBkZXNjcmlwdGlvbiB9ICkKICAgICAgICBsaXouc2V0UHJvcGVydHkoICJGYW5hcnRfSW1hZ2UiLCBmYW5hcnQgKQogICAgICAgIGlmIG1vZGU9PTkwIDoKICAgICAgICAgICAgb2s9eGJtY3BsdWdpbi5hZGREaXJlY3RvcnlJdGVtKGhhbmRsZT1pbnQoc3lzLmFyZ3ZbMV0pLHVybD11LGxpc3RpdGVtPWxpeixpc0ZvbGRlcj1GYWxzZSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBvaz14Ym1jcGx1Z2luLmFkZERpcmVjdG9yeUl0ZW0oaGFuZGxlPWludChzeXMuYXJndlsxXSksdXJsPXUsbGlzdGl0ZW09bGl6LGlzRm9sZGVyPVRydWUpCiAgICAgICAgcmV0dXJuIG9rCgogICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgCnBhcmFtcz1nZXRfcGFyYW1zKCkKdXJsPU5vbmUKbmFtZT1Ob25lCm1vZGU9Tm9uZQppY29uaW1hZ2U9Tm9uZQpmYW5hcnQ9Tm9uZQpkZXNjcmlwdGlvbj1Ob25lCgoKdHJ5OgogICAgICAgIHVybD11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1sidXJsIl0pCmV4Y2VwdDoKICAgICAgICBwYXNzCnRyeToKICAgICAgICBuYW1lPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJuYW1lIl0pCmV4Y2VwdDoKICAgICAgICBwYXNzCnRyeToKICAgICAgICBpY29uaW1hZ2U9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbImljb25pbWFnZSJdKQpleGNlcHQ6CiAgICAgICAgcGFzcwp0cnk6ICAgICAgICAKICAgICAgICBtb2RlPWludChwYXJhbXNbIm1vZGUiXSkKZXhjZXB0OgogICAgICAgIHBhc3MKdHJ5OiAgICAgICAgCiAgICAgICAgZmFuYXJ0PXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJmYW5hcnQiXSkKZXhjZXB0OgogICAgICAgIHBhc3MKdHJ5OiAgICAgICAgCiAgICAgICAgZGVzY3JpcHRpb249dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbImRlc2NyaXB0aW9uIl0pCmV4Y2VwdDoKICAgICAgICBwYXNzCiAgICAgICAgCiAgICAgICAgCnByaW50IHN0cihQQVRIKSsnOiAnK3N0cihWRVJTSU9OKQpwcmludCAiTW9kZTogIitzdHIobW9kZSkKcHJpbnQgIlVSTDogIitzdHIodXJsKQpwcmludCAiTmFtZTogIitzdHIobmFtZSkKcHJpbnQgIkljb25JbWFnZTogIitzdHIoaWNvbmltYWdlKQoKCmRlZiBzZXRWaWV3KGNvbnRlbnQsIHZpZXdUeXBlKToKICAgICMgc2V0IGNvbnRlbnQgdHlwZSBzbyBsaWJyYXJ5IHNob3dzIG1vcmUgdmlld3MgYW5kIGluZm8KICAgIGlmIGNvbnRlbnQ6CiAgICAgICAgeGJtY3BsdWdpbi5zZXRDb250ZW50KGludChzeXMuYXJndlsxXSksIGNvbnRlbnQpCiAgICBpZiBBRERPTi5nZXRTZXR0aW5nKCdhdXRvLXZpZXcnKT09J3RydWUnOgogICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oIkNvbnRhaW5lci5TZXRWaWV3TW9kZSglcykiICUgQURET04uZ2V0U2V0dGluZyh2aWV3VHlwZSkgKQogICAgICAgIAogICAgICAgIAppZiBtb2RlPT1Ob25lIG9yIHVybD09Tm9uZSBvciBsZW4odXJsKTwxOgogICAgICAgIElOREVYKCkKCmVsaWYgbW9kZT09MjA6CiAgICAgICAgQlVJTERNRU5VKCkKCmVsaWYgbW9kZT09NDoKICAgICAgICBSRVNUT1JFKCkKCQkKZWxpZiBtb2RlPT0zOgogICAgICAgIEJBQ0tVUE1FTlUoKQoKCQkKZWxpZiBtb2RlPT02OiAgICAgICAgCglGUkVTSFNUQVJUKHBhcmFtcykKCQplbGlmIG1vZGU9PTc6CiAgICAgICBEZWxldGVQYWNrYWdlcyh1cmwpCgkJCmVsaWYgbW9kZT09MTA6CiAgICAgICAgQURET05XSVpBUkQobmFtZSx1cmwsZGVzY3JpcHRpb24pCgplbGlmIG1vZGU9PTgyOgogICAgICAgIHByaW50ICIjIyMjIyMjIyMjIyMgICBXSVBFIFhCTUMgICAjIyMjIyMjIyMjIyMjIyMjIyIKICAgICAgICBXaXBlWEJNQygpCgplbGlmIG1vZGU9PTg1OgogICAgICAgIHByaW50ICIjIyMjIyMjIyMjIyMgICBBVFRFTVBUIFRPIEtJTEwgWEJNQy9LT0RJICAgIyMjIyMjIyMjIyMjIyMjIyMiCiAgICAgICAga2lsbHhibWMoKQoJCQplbGlmIG1vZGU9PTkwOgogICAgICAgIFdJWkFSRChuYW1lLHVybCxkZXNjcmlwdGlvbikKZWxpZiBtb2RlPT0xMDA6CiAgICAgICAgU0VUVElOR1MoKQp4Ym1jcGx1Z2luLmVuZE9mRGlyZWN0b3J5KGludChzeXMuYXJndlsxXSkpCg|IDk5OgoJCQkJc3RhdHVzID0gJ1tDT0xPUiBnb2xkXUVsaXRlWy9DT0xPUl0nCgkJCWVsc2U6IAoJCQkJc3RhdHVzID0gJ0ZyZWUnCgkJCWFkZERpcignW0JddXNlcjpbL0JdJysnW0NPTE9SIGxpbWVdICAnKyBlbnRyeVsnbWVtYmVyX25hbWUnXSArJ1svQ09MT1JdJysgJyAtIFtCXSBhY2NvdW50IHR5cGUgPSBbL0JdJyArIHN0YXR1cyArICdbQl0gICBQb3N0cyA9IFsvQl0nICsgJ1tDT0xPUiByZWRdJyArIHBvc3Rjb3VudCArICdbL0NPTE9SXScgLCcnLDEsSUNPTixGQU5BUlQsJycpCgkJCWFkZERpcignW0JdRG93bmxvYWRzID0gIFRoaXMgV2VlayBbL0JdJyArICdbQ09MT1IgbGltZV0nICsgZW50cnlbJ2RsX3dlZWsnXSArICdbL0NPTE9SXScgKyAnW0JdIC0gVG90YWwgWy9CXScgKyAnW0NPTE9SIGxpbWVdJyArIGVudHJ5WydkbF90b3RhbCddICsgJ1svQ09MT1JdJywnJywxLElDT04sRkFOQVJULCcnKQoKCWV4Y2VwdDpwYXNzCglpZiBub3Qgb3MucGF0aC5leGlzdHMoYmFja3VwZGlyKToKCQlvcy5tYWtlZGlycyhiYWNrdXBkaXIpCglhZGRMaW5rKCdbQ09MT1IgcmVkXVtCXUZSRVNIIFNUQVJUWy9CXVsvQ09MT1JdJywndXJsJyw2LEFSVCsnZnJlc2hzdGFydC5wbmcnLEZBTkFSVCwnJykKCWFkZERpcignW0NPTE9SIGxpbWVdW0JdSU5TVEFMTFsvQl1bL0NPTE9SXScsQkFTRVVSTCwyMCxBUlQrJ3NjaGlzbXdpei5wbmcnLEZBTkFSVCwnJykKCSMgYWRkRGlyKCdbQ09MT1IgeWVsbG93XVtCXVVQREFURVsvQl1bL0NPTE9SXScsJ3VybCcsMSxBUlQrJ3VwZGF0ZS5wbmcnLEZBTkFSVCwnJykKCWFkZExpbmsoJ1tDT0xPUiBvcmFuZ2VdW0JdQmFja3VwIFNldHRpbmdzWy9CXVsvQ09MT1JdJywndXJsJywzLEFSVCsndG9vbC5wbmcnLEZBTkFSVCwnJykKCWFkZExpbmsoJ1tDT0xPUiBvcmFuZ2VdW0JdUmVzdG9yZSBTZXR0aW5nc1svQl1bL0NPTE9SXScsJ3VybCcsNCxBUlQrJ3Rvb2wucG5nJyxGQU5BUlQsJycpCglhZGRMaW5rKCdbQ09MT1Igd2hpdGVdW0JdU2V0dGluZ3NbL0JdWy9DT0xPUl0nLCd1cmwnLDEwMCxBUlQrJ3Rvb2wucG5nJyxGQU5BUlQsJycpCgoKZGVmIEJVSUxETUVOVSgpOgoJZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQoJdHJ5OgoJCXVzZXJuYW1lID0geGJtY3BsdWdpbi5nZXRTZXR0aW5nKGludChzeXMuYXJndlsxXSksICd1c2VyJykKCQllbWFpbCA9IHhibWNwbHVnaW4uZ2V0U2V0dGluZyhpbnQoc3lzLmFyZ3ZbMV0pLCAnZW1haWwnKQoJZXhjZXB0OiBwYXNzCgl1c2VybGluayA9IE9QRU5fVVJMKCdodHRwOi8vc2NoaXNtLXR2LmNvbS9zY2hpc20yLnBocD9hY3Rpb249Z2V0c3RhdHMmdXNlcj0nICsgdXNlcm5hbWUgKyAnJmVtYWlsPScgKyBlbWFpbCkucmVwbGFjZSgnXG4nLCcnKS5yZXBsYWNlKCdccicsJycpCgl0cnk6CgkJZGF0YSA9IGpzb24ubG9hZHModXNlcmxpbmspCglleGNlcHQ6IHBhc3MKCXRyeTogCgkJZm9yIGVudHJ5IGluIGRhdGE6CgkJCQoJCQlzdGF0dXMgPSBlbnRyeVsncG9zdHMnXQoJCQlwcmludCBzdGF0dXMKCQkJZGlhbG9nLm9rKCJGUkVFIEFDQ09VTlQgTElNSVRTIiwgIldlIGRldGVjdGVkIHlvdXIgYWNjb3VudCBhcyBGcmVlLiBJbiBvcmRlciB0byB1bmxvY2sgZnVsbCBmZWF0dXJlcyBwbGVhc2UgdmlzaXQgaHR0cDovL3NjaGlzbS10di5jb20gZm9ydW0uIEEgdmlzaXQgYSBkYXkgaW4gdGhlIGZvcnVtIGtlZXBzIHRoZSBzZXJ2ZXIgYW5kIHRoZSBidWlsZHMgZ29pbmcuIFRoYW5rIHlvdSEiLCAiIiwiIikKCWV4Y2VwdDogcGFzcwoKCQkJCglpZiB1c2VybmFtZSA9PSAiIiBvciBlbWFpbCA9PSAiIjoKCQlkaWFsb2cub2soIlVoIG9oLi4iLCAiUGxlYXNlIEVudGVyIHlvdXIgZGV0YWlscywgdGhlbiByZXN0YXJ0IHRoZSBhZGRvbiIpCgkJQURET04ub3BlblNldHRpbmdzKHN5cy5hcmd2WzBdKQoJCXJldHVybigpCglsaW5rID0gT1BFTl9VUkwoJ2h0dHA6Ly9zY2hpc20tdHYuY29tL3NjaGlzbWZyZWUucGhwP2FjdGlvbj1nZXRidWlsZHMmdXNlcj0nICsgdXNlcm5hbWUgKyAnJmVtYWlsPScgKyBlbWFpbCkucmVwbGFjZSgnXG4nLCcnKS5yZXBsYWNlKCdccicsJycpCglwcmludCBsaW5rCgl0cnk6CgkJZGF0YSA9IGpzb24ubG9hZHMobGluaykKCWV4Y2VwdDoKCQlkaWFsb2cub2soIlVoIG9oLi4iLCBsaW5rKQoJCXJldHVybigpCglmb3IgZW50cnkgaW4gZGF0YToKCQlhZGRMaW5rKGVudHJ5WyduYW1lJ10gKyAnICAtIHZlcjogJyArICdbQ09MT1IgbGltZV0nKyBlbnRyeVsndmVyc2lvbiddICsgJ1svQ09MT1JdJyxlbnRyeVsnemlwdXJsJ10sOTAsZW50cnlbJ2ltZ3VybCddLGVudHJ5WydmYW5hcnQnXSwnJykKICAgICMgbGluayA9IE9QRU5fVVJMKCdodHRwczovL2FyY2hpdmUub3JnL2Rvd25sb2FkL3N0dl93aXphcmRfcmVsL3dpemFyZF9yZWwudHh0JykucmVwbGFjZSgnXG4nLCcnKS5yZXBsYWNlKCdccicsJycpCiAgICAjIG1hdGNoID0gcmUuY29tcGlsZSgnbmFtZT0iKC4rPykiLis|JywgJycsICcnLCB5ZXNsYWJlbD0nWWVzJyxub2xhYmVsPSdObycpCiAgICAgICAgaWYgY2hvaWNlID09IDA6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVsaWYgY2hvaWNlID09IDE6CgkJCWxpYj14Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKGJhY2t1cGRpciwnYWRkb25fZGF0YS56aXAnKSkKCQkJZHAuY3JlYXRlKCJbQ09MT1I9Ymx1ZV1bQl1TY2hpc00gVFZbL0JdWy9DT0xPUl0gQ3VzdG9tIEJ1aWxkcyBUb29sIiwiUmVzdG9yaW5nIiwnJywgJ1BsZWFzZSBXYWl0JykKCQkJZHAudXBkYXRlKDAsIiIsICJFeHRyYWN0aW5nIFppcCBQbGVhc2UgV2FpdCIpCgkJCWV4dHJhY3QuYWxsKGxpYixBRERPTl9EQVRBLGRwKQoJCQl0aW1lLnNsZWVwKDEpCgoJCmRlZiBSRVNUT1JFR1VJKCk6CiBpZiBvcy5wYXRoLmV4aXN0cyhvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXBfdWkuemlwJykpOiAgIAogICAgICAgIGltcG9ydCB0aW1lCiAgICAgICAgZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQogICAgICAgIGNob2ljZSA9IHhibWNndWkuRGlhbG9nKCkueWVzbm8oIkdVSSBTZXR0aW5ncyIsICdEbyB5b3Ugd2FudCB0byByZXN0b3JlIHlvdXIgZ3VpIHNldHRpbmdzPycsICcnLCAnJywgeWVzbGFiZWw9J1llcycsbm9sYWJlbD0nTm8nKQogICAgICAgIGlmIGNob2ljZSA9PSAwOgogICAgICAgICAgcmV0dXJuCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gMToKCQkJCgkJCQoJCQkKCQkJbGliPXhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXBfdWkuemlwJykpCgkJCWFkZG9uZm9sZGVyID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovLycsJ2hvbWUvdXNlcmRhdGEnKSkKCQkJdGltZS5zbGVlcCgyKQoJCQlkcC5jcmVhdGUoIltDT0xPUj1ibHVlXVtCXVNjaGlzTSBUVlsvQl1bL0NPTE9SXSBDdXN0b20gQnVpbGRzIFRvb2wiLCJSZXN0b3JpbmciLCcnLCAnUGxlYXNlIFdhaXQnKQoJCQlwcmludCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JwoJCQlwcmludCBhZGRvbmZvbGRlcgoJCQlwcmludCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JwoJCQlleHRyYWN0LmFsbChsaWIsYWRkb25mb2xkZXIsZHApCgkJCWRwLmNsb3NlKCkKCQkJZGlhbG9nLm9rKCJCQUNLVVAvUkVTVE9SRSIsICJHVUkgc2V0dGluZ3MgQXJlIE5vdyByZXN0b3JlZCIsICcnLCcnKQkKCgogCmRlZiBSRVNUT1JFRkFWKCk6CiBpZiBvcy5wYXRoLmV4aXN0cyhvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXBfZmF2LnppcCcpKToKICAgICAgICBpbXBvcnQgdGltZQogICAgICAgIGRpYWxvZyA9IHhibWNndWkuRGlhbG9nKCkKICAgICAgICBjaG9pY2UgPSB4Ym1jZ3VpLkRpYWxvZygpLnllc25vKCJGYXZvdXJpdGVzIFNldHRpbmdzIiwgJ0RvIHlvdSB3YW50IHRvIHJlc3RvcmUgeW91ciBGYXZvdXJpdGVzPycsICcnLCAnJywgeWVzbGFiZWw9J1llcycsbm9sYWJlbD0nTm8nKQogICAgICAgIGlmIGNob2ljZSA9PSAwOgogICAgICAgICAgICByZXR1cm4KCQkJCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gMToKCQkJCgkJCQoKCQkJbGliPXhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXBfZmF2LnppcCcpKQoJCQlhZGRvbmZvbGRlciA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly8nLCdob21lL3VzZXJkYXRhJykpCgkJCXRpbWUuc2xlZXAoMikKCQkJZHAuY3JlYXRlKCJbQ09MT1I9Ymx1ZV1bQl1TY2hpc00gVFZbL0JdWy9DT0xPUl0gQ3VzdG9tIEJ1aWxkcyBUb29sIiwiUmVzdG9yaW5nIiwnJywgJ1BsZWFzZSBXYWl0JykKCQkJcHJpbnQgJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScKCQkJcHJpbnQgYWRkb25mb2xkZXIKCQkJcHJpbnQgJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScKCQkJZXh0cmFjdC5hbGwobGliLGFkZG9uZm9sZGVyLGRwKQoJCQlkcC5jbG9zZSgpCgkJCWRpYWxvZy5vaygiQkFDS1VQL1JFU1RPUkUiLCAiRmF2b3VyaXRlcyBBcmUgTm93IHJlc3RvcmVkIiwgJycsJycpCQogCmRlZiBSRVNUT1JFU09VUkNFUygpOgogaWYgb3MucGF0aC5leGlzdHMob3MucGF0aC5qb2luKGJhY2t1cGRpciwnYmFja3VwX3NvdXJjZXMuemlwJykpOgogICAgICAgIGltcG9ydCB0aW1lCiAgICAgICAgZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQogICAgICAgIGNob2ljZSA9IHhibWNndWkuRGlhbG9nKCkueWVzbm8oIlNPVVJDRVMgU2V0dGluZ3MiLCAnRG8geW91IHdhbnQgdG8gcmVzdG9yZSB5b3VyIFNvdXJjZXM|JywgJycsICcnLCB5ZXNsYWJlbD0nWWVzJyxub2xhYmVsPSdObycpCiAgICAgICAgaWYgY2hvaWNlID09IDA6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVsaWYgY2hvaWNlID09IDE6CgkJCQoJCQkKCgkJCWxpYj14Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKGJhY2t1cGRpciwnYmFja3VwX3NvdXJjZXMuemlwJykpCgkJCWFkZG9uZm9sZGVyID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovLycsJ2hvbWUvdXNlcmRhdGEnKSkKCQkJdGltZS5zbGVlcCgyKQoJCQlkcC5jcmVhdGUoIltDT0xPUj1ibHVlXVtCXVNjaGlzTSBUVlsvQl1bL0NPTE9SXSBDdXN0b20gQnVpbGRzIFRvb2wiLCJSZXN0b3JpbmciLCcnLCAnUGxlYXNlIFdhaXQnKQoJCQlwcmludCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JwoJCQlwcmludCBhZGRvbmZvbGRlcgoJCQlwcmludCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JwoJCQlleHRyYWN0LmFsbChsaWIsYWRkb25mb2xkZXIsZHApCgkJCWRpYWxvZyA9IHhibWNndWkuRGlhbG9nKCkKCQkJZHAuY2xvc2UoKQoJCQlkaWFsb2cub2soIkJBQ0tVUC9SRVNUT1JFIiwgIlNvdXJjZXMgQXJlIE5vdyByZXN0b3JlZCIsICcnLCcnKQkKIAoKCQkJCmRlZiBSRVNUT1JFU0tJTlNIT1JUQ1VUUygpOgogaWYgb3MucGF0aC5leGlzdHMob3MucGF0aC5qb2luKGJhY2t1cGRpciwnYmFja3VwX3NraW5zaG9ydGN1dHMuemlwJykpOgogICAgICAgIGltcG9ydCB0aW1lCiAgICAgICAgZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQogICAgICAgIGNob2ljZSA9IHhibWNndWkuRGlhbG9nKCkueWVzbm8oIlNLSU4gU2V0dGluZ3MiLCAnRG8geW91IHdhbnQgdG8gcmVzdG9yZSB5b3VyIFNraW4gU2hvcnRjdXRzJywgJycsICcnLCB5ZXNsYWJlbD0nWWVzJyxub2xhYmVsPSdObycpCiAgICAgICAgaWYgY2hvaWNlID09IDA6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVsaWYgY2hvaWNlID09IDE6CgkJCQoJCQkKCgkJCWxpYj14Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKGJhY2t1cGRpciwnYmFja3VwX3NraW5zaG9ydGN1dHMuemlwJykpCgkJCWFkZG9uZm9sZGVyID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovLycsJ2hvbWUvdXNlcmRhdGEvYWRkb25fZGF0YScpKQoJCQl0aW1lLnNsZWVwKDIpCgkJCWRwLmNyZWF0ZSgiW0NPTE9SPWJsdWVdW0JdU2NoaXNNIFRWWy9CXVsvQ09MT1JdIEN1c3RvbSBCdWlsZHMgVG9vbCIsIlJlc3RvcmluZyIsJycsICdQbGVhc2UgV2FpdCcpCgkJCXByaW50ICc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nCgkJCXByaW50IGFkZG9uZm9sZGVyCgkJCXByaW50ICc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nCgkJCWV4dHJhY3QuYWxsKGxpYixhZGRvbmZvbGRlcixkcCkKCQkJZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQoJCQlkcC5jbG9zZSgpCgkJCWRpYWxvZy5vaygiQkFDS1VQL1JFU1RPUkUiLCAiU2tpbiBTaG9ydGN1dHMgQXJlIE5vdyByZXN0b3JlZCIsICcnLCcnKQkKIAoJCQkKZGVmIFJFRlJFU0hBTEwoKToKICAgCiAgICAjIGRpYWxvZy5vaygiQkFDS1VQL1JFU1RPUkUiLCAiRk9SQ0UgQ0xPU0UvUkVTVEFSVCBZT1VSIEtPREkiLCAiIiwiIikKICBraWxseGJtYygpCiAKCQojUm9vdCBtZW51IG9mIGFkZG9uCmRlZiBJTkRFWCgpOgoJZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQoJdHJ5OgoJCXVzZXJuYW1lID0geGJtY3BsdWdpbi5nZXRTZXR0aW5nKGludChzeXMuYXJndlsxXSksICd1c2VyJykKCQllbWFpbCA9IHhibWNwbHVnaW4uZ2V0U2V0dGluZyhpbnQoc3lzLmFyZ3ZbMV0pLCAnZW1haWwnKQoJZXhjZXB0OgoJCXVzZXJuYW1lID0gJycKCQllbWFpbCA9ICcnCglzdGF0dXMJPSAnJwkKCWxpbmsgPSBPUEVOX1VSTCgnaHR0cDovL3NjaGlzbS10di5jb20vc2NoaXNtMi5waHA|KSIgbmFtZT0iJXMuKC4rPykiPiguKz8pPC9zZXR0aW5nPiclIHNraW4KICAgICAgICAgICAgCiAgICAgICAgICAgIG1hdGNoPXJlLmNvbXBpbGUocikuZmluZGFsbChhKQogICAgICAgICAgICBwcmludCBtYXRjaAogICAgICAgICAgICBmb3IgdHlwZSxzdHJpbmcsc2V0dGluZyBpbiBtYXRjaDoKICAgICAgICAgICAgICAgIHNldHRpbmc9c2V0dGluZy5yZXBsYWNlKCcmcXVvdDsnLCcnKSAucmVwbGFjZSgnJmFtcDsnLCcmJykgCiAgICAgICAgICAgICAgICB4Ym1jLmV4ZWN1dGVidWlsdGluKCJTa2luLlNldCVzKCVzLCVzKSIlKHR5cGUudGl0bGUoKSxzdHJpbmcsc2V0dGluZykpICAKICAgICAgICAgICAgICAgIAogICAgICAgIGlmICdmYXZvdXJpdGVzLnhtbCcgaW4gZmlsZW5hbWU6CiAgICAgICAgICAgIGEgPSB6LnJlYWQoZmlsZW5hbWUpCiAgICAgICAgICAgIGYgPSBvcGVuKEZBVlMsIG1vZGU9J3cnKQogICAgICAgICAgICBmLndyaXRlKGEpCiAgICAgICAgICAgIGYuY2xvc2UoKSAgCgkJCSAgICAgICAgICAgICAgIAogICAgICAgIGlmICdzb3VyY2VzLnhtbCcgaW4gZmlsZW5hbWU6CiAgICAgICAgICAgIGEgPSB6LnJlYWQoZmlsZW5hbWUpCiAgICAgICAgICAgIGYgPSBvcGVuKFNPVVJDRSwgbW9kZT0ndycpCiAgICAgICAgICAgIGYud3JpdGUoYSkKICAgICAgICAgICAgZi5jbG9zZSgpICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgaWYgJ2FkdmFuY2Vkc2V0dGluZ3MueG1sJyBpbiBmaWxlbmFtZToKICAgICAgICAgICAgYSA9IHoucmVhZChmaWxlbmFtZSkKICAgICAgICAgICAgZiA9IG9wZW4oQURWQU5DRUQsIG1vZGU9J3cnKQogICAgICAgICAgICBmLndyaXRlKGEpCiAgICAgICAgICAgIGYuY2xvc2UoKSAgICAgICAgICAgICAgICAgCgogICAgICAgIGlmICdSc3NGZWVkcy54bWwnIGluIGZpbGVuYW1lOgogICAgICAgICAgICBhID0gei5yZWFkKGZpbGVuYW1lKQogICAgICAgICAgICBmID0gb3BlbihSU1MsIG1vZGU9J3cnKQogICAgICAgICAgICBmLndyaXRlKGEpCiAgICAgICAgICAgIGYuY2xvc2UoKSAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIGlmICdrZXlib2FyZC54bWwnIGluIGZpbGVuYW1lOgogICAgICAgICAgICBhID0gei5yZWFkKGZpbGVuYW1lKQogICAgICAgICAgICBmID0gb3BlbihLRVlNQVBTLCBtb2RlPSd3JykKICAgICAgICAgICAgZi53cml0ZShhKQogICAgICAgICAgICBmLmNsb3NlKCkgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIApkZWYgUkVTVE9SRSgpOgogIAlSRVNUT1JFQURET05TRVRUSU5HUygpCglSRVNUT1JFRkFWKCkKCVJFU1RPUkVTT1VSQ0VTKCkKCVJFU1RPUkVTS0lOU0hPUlRDVVRTKCkKCVJFU1RPUkVHVUkoKQoJRkFTVFJFU0VUKCkKCmRlZiBCQUNLVVBNRU5VKCk6CiAgCUJBQ0tVUCgpCglCQUNLVVBGQVYoKQoJQkFDS1VQU09VUkNFKCkKCUJBQ0tVUFNLSU5TSE9SVENVVFMoKQoJQkFDS1VQR1VJKCkKCQogICAJCmRlZiBSRVNUT1JFQURET05TRVRUSU5HUygpOgogaWYgb3MucGF0aC5leGlzdHMob3MucGF0aC5qb2luKGJhY2t1cGRpciwnYWRkb25fZGF0YS56aXAnKSk6ICAgCglpbXBvcnQgdGltZQoJCiAgICAgICAgCiAgICAgICAgZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQogICAgICAgIGNob2ljZSA9IHhibWNndWkuRGlhbG9nKCkueWVzbm8oIkFkZG9ucyBTZXR0aW5ncyIsICdEbyB5b3Ugd2FudCB0byByZXN0b3JlIHlvdXIgYWRkb24gc2V0dGluZ3M|IENVTlQ6CiAgICAgICAgICAgICAgICAgICAgICAgemlwb2JqLndyaXRlKGZuLCBmbltyb290bGVuOl0pICAKICAgIHppcG9iai5jbG9zZSgpCiAgICBkcC5jbG9zZSgpCiAgICBkaWFsb2cub2soIkJBQ0tVUC9SRVNUT1JFIiwgIlNLSU4gU2hvcnRjdXRzIEFyZSBOb3cgQmFja2VkIFVwIiwgJycsJycpCiAgICAKCQpkZWYgQkFDS1VQR1VJKCk6ICAKICAgIGlmIG9zLnBhdGguZXhpc3RzKG9zLnBhdGguam9pbihVU0VSREFUQSwnZ3Vpc2V0dGluZ3MueG1sJykpOgogICAgICAgdG9fYmFja3VwID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovLycsJ2hvbWUvdXNlcmRhdGEnKSkJCiAgICAgICByb290bGVuID0gbGVuKHRvX2JhY2t1cCkKICAgICAgIGJhY2t1cF91aV96aXAgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKGJhY2t1cGRpciwnYmFja3VwX3VpLnppcCcpKQogICAgICAgemlwb2JqID0gemlwZmlsZS5aaXBGaWxlKGJhY2t1cF91aV96aXAgLCAndycsIHppcGZpbGUuWklQX0RFRkxBVEVEKQogICAgICAgZm4gPSBvcy5wYXRoLmpvaW4oVVNFUkRBVEEsICdndWlzZXR0aW5ncy54bWwnKQogICAgICAgY2hvaWNlID0geGJtY2d1aS5EaWFsb2coKS55ZXNubygiU2tpbiBTZXR0aW5ncyIsICdEbyB5b3Ugd2FudCB0byBiYWNrdXAgeW91ciBTa2luIHNldHRpbmdzPycsICcnLCAnJywgeWVzbGFiZWw9J1llcycsbm9sYWJlbD0nTm8nKQogICAgICAgaWYgY2hvaWNlID09IDA6CiAgICAgICAgcmV0dXJuCiAgICAgICBlbGlmIGNob2ljZSA9PSAxOgoJICAgZHAuY3JlYXRlKCJCQUNLVVAvUkVTVE9SRSIsIkJhY2tpbmcgVXAgR3VpIFNldHRpbmdzIiwnJywgJ1BsZWFzZSBXYWl0JykKCSAgIHppcG9iai53cml0ZShmbiwgZm5bcm9vdGxlbjpdKQoJICAgZHAuY2xvc2UoKQoJICAgZGlhbG9nLm9rKCJCQUNLVVAvUkVTVE9SRSIsICJHdWkgc2V0dGluZ3MgQXJlIE5vdyBCYWNrZWQgVXAiLCAnJywnJykKICAgICAgIAoKZGVmIEJBQ0tVUEZBVigpOiAgCiAgICBpZiBvcy5wYXRoLmV4aXN0cyhvcy5wYXRoLmpvaW4oVVNFUkRBVEEsJ2Zhdm91cml0ZXMueG1sJykpOgogICAgICAgdG9fYmFja3VwID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovLycsJ2hvbWUvdXNlcmRhdGEnKSkJCiAgICAgICByb290bGVuID0gbGVuKHRvX2JhY2t1cCkKICAgICAgIGJhY2t1cF91aV96aXAgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKGJhY2t1cGRpciwnYmFja3VwX2Zhdi56aXAnKSkKICAgICAgIHppcG9iaiA9IHppcGZpbGUuWmlwRmlsZShiYWNrdXBfdWlfemlwICwgJ3cnLCB6aXBmaWxlLlpJUF9ERUZMQVRFRCkKICAgICAgIGZuID0gb3MucGF0aC5qb2luKFVTRVJEQVRBLCAnZmF2b3VyaXRlcy54bWwnKQogICAgICAgY2hvaWNlID0geGJtY2d1aS5EaWFsb2coKS55ZXNubygiR3VpIFNldHRpbmdzIiwgJ0RvIHlvdSB3YW50IHRvIGJhY2t1cCB5b3VyIGZhdm91cml0ZXM|JywgJycsICdBbGwgYWRkb25zIEVYQ0xVRElORyBUSElTIFdJWkFSRCB3aWxsIGJlIGNvbXBsZXRlbHkgd2lwZWQhJywgeWVzbGFiZWw9J1llcycsbm9sYWJlbD0nTm8nKQogICAgICAgIGlmIGNob2ljZSA9PSAwOgogICAgICAgICAgICByZXR1cm4KICAgICAgICBlbGlmIGNob2ljZSA9PSAxOgogICAgICAgICAgICBkcC5jcmVhdGUoIltDT0xPUj1ibHVlXVtCXUFNT1svQl1bL0NPTE9SXVtDT0xPUj1ncmVlbl1ib3hbL0NPTE9SXSBDdXN0b20gQnVpbGRzIFRvb2wiLCJXaXBpbmcgSW5zdGFsbCIsJycsICdQbGVhc2UgV2FpdCcpCiAgICAgICAgICAgIGFkZG9uUGF0aD14Ym1jYWRkb24uQWRkb24oaWQ9QWRkb25JRCkuZ2V0QWRkb25JbmZvKCdwYXRoJyk7IGFkZG9uUGF0aD14Ym1jLnRyYW5zbGF0ZVBhdGgoYWRkb25QYXRoKTsgCiAgICAgICAgICAgIHhibWNQYXRoPW9zLnBhdGguam9pbihhZGRvblBhdGgsIi4uIiwiLi4iKTsgeGJtY1BhdGg9b3MucGF0aC5hYnNwYXRoKHhibWNQYXRoKTsgZmFpbGVkPUZhbHNlICAKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZm9yIHJvb3QsIGRpcnMsIGZpbGVzIGluIG9zLndhbGsoeGJtY1BhdGgsdG9wZG93bj1UcnVlKToKICAgICAgICAgICAgICAgICAgICBkaXJzWzpdID0gW2QgZm9yIGQgaW4gZGlycyBpZiBkIG5vdCBpbiBFWENMVURFU10KICAgICAgICAgICAgICAgICAgICBmb3IgbmFtZSBpbiBmaWxlczoKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OiBvcy5yZW1vdmUob3MucGF0aC5qb2luKHJvb3QsbmFtZSkpCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgICAgICAgICAgICAgIGZvciBuYW1lIGluIGRpcnM6CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeTogb3Mucm1kaXIob3MucGF0aC5qb2luKHJvb3QsbmFtZSkpCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICBSRU1PVkVfRU1QVFlfRk9MREVSUygpCiAgICAgICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgICAgIFJFTU9WRV9FTVBUWV9GT0xERVJTKCkKICAgICAgICBSRU1PVkVfRU1QVFlfRk9MREVSUygpCiAgICAgICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgICAgIFJFTU9WRV9FTVBUWV9GT0xERVJTKCkKICAgICAgICBSRU1PVkVfRU1QVFlfRk9MREVSUygpCgpkZWYgZ2V0X3BhcmFtcygpOgogICAgICAgIHBhcmFtPVtdCiAgICAgICAgcGFyYW1zdHJpbmc9c3lzLmFyZ3ZbMl0KICAgICAgICBpZiBsZW4ocGFyYW1zdHJpbmcpPj0yOgogICAgICAgICAgICAgICAgcGFyYW1zPXN5cy5hcmd2WzJdCiAgICAgICAgICAgICAgICBjbGVhbmVkcGFyYW1zPXBhcmFtcy5yZXBsYWNlKCc|JywgJycsICcnLCB5ZXNsYWJlbD0nWWVzJyxub2xhYmVsPSdObycpCiAgICAgICBpZiBjaG9pY2UgPT0gMDoKICAgICAgICAgICAgcmV0dXJuCiAgICAgICBlbGlmIGNob2ljZSA9PSAxOgoJICAgZHAuY3JlYXRlKCJCQUNLVVAvUkVTVE9SRSIsIkJhY2tpbmcgVXAgRmF2b3VyaXRlcyIsJycsICdQbGVhc2UgV2FpdCcpCgkgICB6aXBvYmoud3JpdGUoZm4sIGZuW3Jvb3RsZW46XSkKCSAgIGRwLmNsb3NlKCkKCSAgIGRpYWxvZy5vaygiQkFDS1VQL1JFU1RPUkUiLCAiRmF2b3VyaXRlcyBBcmUgTm93IEJhY2tlZCBVcCIsICcnLCcnKSAgICAgICAgICAKICAgIAkgICAKCmRlZiBCQUNLVVBTT1VSQ0UoKTogIAogICAgaWYgb3MucGF0aC5leGlzdHMob3MucGF0aC5qb2luKFVTRVJEQVRBLCdzb3VyY2VzLnhtbCcpKToKICAgICAgIHRvX2JhY2t1cCA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly8nLCdob21lL3VzZXJkYXRhJykpCQogICAgICAgcm9vdGxlbiA9IGxlbih0b19iYWNrdXApCiAgICAgICBiYWNrdXBfdWlfemlwID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihiYWNrdXBkaXIsJ2JhY2t1cF9zb3VyY2VzLnppcCcpKQogICAgICAgemlwb2JqID0gemlwZmlsZS5aaXBGaWxlKGJhY2t1cF91aV96aXAgLCAndycsIHppcGZpbGUuWklQX0RFRkxBVEVEKQogICAgICAgZm4gPSBvcy5wYXRoLmpvaW4oVVNFUkRBVEEsICdzb3VyY2VzLnhtbCcpCiAgICAgICBjaG9pY2UgPSB4Ym1jZ3VpLkRpYWxvZygpLnllc25vKCJHdWkgU2V0dGluZ3MiLCAnRG8geW91IHdhbnQgdG8gYmFja3VwIHlvdXIgc291cmNlcz8nLCAnJywgJycsIHllc2xhYmVsPSdZZXMnLG5vbGFiZWw9J05vJykKICAgICAgIGlmIGNob2ljZSA9PSAwOgogICAgICAgICAgICByZXR1cm4KICAgICAgIGVsaWYgY2hvaWNlID09IDE6CgkgICBkcC5jcmVhdGUoIkJBQ0tVUC9SRVNUT1JFIiwiQmFja2luZyBVcCBTb3VyY2VzIiwnJywgJ1BsZWFzZSBXYWl0JykKCgkgICB6aXBvYmoud3JpdGUoZm4sIGZuW3Jvb3RsZW46XSkKCSAgIGRwLmNsb3NlKCkKCSAgIGRpYWxvZy5vaygiQkFDS1VQL1JFU1RPUkUiLCAiU291cmNlcyBBcmUgTm93IEJhY2tlZCBVcCIsICcnLCcnKQkgICAKICAgIElOREVYKCkJICAgCQkgICAKCSAgIAoJCmRlZiBSRUFEX1pJUCh1cmwpOgoKICAgIGltcG9ydCB6aXBmaWxlCiAgICAKICAgIHogPSB6aXBmaWxlLlppcEZpbGUodXJsLCAiciIpCiAgICBmb3IgZmlsZW5hbWUgaW4gei5uYW1lbGlzdCgpOgogICAgICAgIGlmICdndWlzZXR0aW5ncy54bWwnIGluIGZpbGVuYW1lOgogICAgICAgICAgICBhID0gei5yZWFkKGZpbGVuYW1lKQogICAgICAgICAgICByPSc8c2V0dGluZyB0eXBlPSIoLis|JywnJykKICAgICAgICAgICAgICAgIGlmIChwYXJhbXNbbGVuKHBhcmFtcyktMV09PScvJyk6CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcz1wYXJhbXNbMDpsZW4ocGFyYW1zKS0yXQogICAgICAgICAgICAgICAgcGFpcnNvZnBhcmFtcz1jbGVhbmVkcGFyYW1zLnNwbGl0KCcmJykKICAgICAgICAgICAgICAgIHBhcmFtPXt9CiAgICAgICAgICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4ocGFpcnNvZnBhcmFtcykpOgogICAgICAgICAgICAgICAgICAgICAgICBzcGxpdHBhcmFtcz17fQogICAgICAgICAgICAgICAgICAgICAgICBzcGxpdHBhcmFtcz1wYWlyc29mcGFyYW1zW2ldLnNwbGl0KCc9JykKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxlbihzcGxpdHBhcmFtcykpPT0yOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtW3NwbGl0cGFyYW1zWzBdXT1zcGxpdHBhcmFtc1sxXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgIHJldHVybiBwYXJhbQoKZGVmIGFkZERpcmVjdG9yeUl0ZW0oaGFuZGxlLCB1cmwsIGxpc3RpdGVtLCBpc0ZvbGRlcik6CiAgICB4Ym1jcGx1Z2luLmFkZERpcmVjdG9yeUl0ZW0oaGFuZGxlLCB1cmwsIGxpc3RpdGVtLCBpc0ZvbGRlcikKCmRlZiBhZGRCdWlsZERpcihuYW1lLHVybCxtb2RlLGljb25pbWFnZSxmYW5hcnQsdmlkZW8sZGVzY3JpcHRpb24sc2tpbnMsZ3Vpc2V0dGluZ3NsaW5rKToKICAgICAgICB1PXN5cy5hcmd2WzBdKyI|IEFwcGVhcmFuY2UgPiBTa2luIHRvIHRoZSBkZXNpcmVkIG9uZS4uLiBpZiBpbWFnZXMgYXJlIG5vdCBzaG93aW5nLCBqdXN0IHJlc3RhcnQgS29kaScsICdDbGljayBPSyB0byBDb250aW51ZScpCgkJeGJtYy5leGVjdXRlYnVpbHRpbignQWN0aXZhdGVXaW5kb3coSG9tZSknKQoJCXhibWMuZXhlY3V0ZWJ1aWx0aW4oJ01hc3Rlcm1vZGUnKQkJCgkJeGJtYy5leGVjdXRlYnVpbHRpbignTG9hZFByb2ZpbGUoTWFzdGVyIHVzZXIsW3Byb21wdF0pJykJICAgCgkJeGJtYy5leGVjdXRlYnVpbHRpbignQWN0aXZhdGVXaW5kb3coSG9tZSknKSAgCmRlZiBraWxseGJtYygpOgogICAgY2hvaWNlID0geGJtY2d1aS5EaWFsb2coKS55ZXNubygnRm9yY2UgQ2xvc2UgWEJNQy9Lb2RpJywgJ1dlIHdpbGwgbm93IGF0dGVtcHQgdG8gZm9yY2UgY2xvc2UgS29kaSwgdGhpcyBpcycsICd0byBiZSB1c2VkIGlmIGhhdmluZyBwcm9ibGVtcyB3aXRoIGd1aXNldHRpbmdzLnhtbCcsICdzdGlja2luZy4gV291bGQgeW91IGxpa2UgdG8gY29udGludWU|IDAgYW5kIGxlbihmaWxlcykgPiAwOiAjY2hlY2sgZm9yIHVzZWQgZGlyZWN0b3JpZXMKICAgICAgICAgICAgdXNlZF9jb3VudCArPSAxICNpbmNyZW1lbnQgdXNlZF9jb3VudAojLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoJCiAgICAgIApkZWYgZ2V0X3BhcmFtcygpOgogICAgICAgIHBhcmFtPVtdCiAgICAgICAgcGFyYW1zdHJpbmc9c3lzLmFyZ3ZbMl0KICAgICAgICBpZiBsZW4ocGFyYW1zdHJpbmcpPj0yOgogICAgICAgICAgICAgICAgcGFyYW1zPXN5cy5hcmd2WzJdCiAgICAgICAgICAgICAgICBjbGVhbmVkcGFyYW1zPXBhcmFtcy5yZXBsYWNlKCc|KSInKS5maW5kYWxsKGxpbmspCiAgICAjIGZvciBuYW1lLHVybCxpY29uaW1hZ2UsZmFuYXJ0LGRlc2NyaXB0aW9uIGluIG1hdGNoOgogICAgICAgICMgYWRkRGlyKG5hbWUgKyAiIHZlcjoiICsgZGVzY3JpcHRpb24sdXJsLDkwLGljb25pbWFnZSxmYW5hcnQsZGVzY3JpcHRpb24pCgkKZGVmIEZBU1RSRVNFVCgpOgoJCWRpYWxvZy5vaygiUFJPQ0VTUyBDT01QTEVURSIsICdUaGUgc2tpbiB3aWxsIG5vdyBiZSByZXNldCcsICdUbyBzdGFydCB1c2luZyB5b3VyIG5ldyBzZXR1cCBwbGVhc2Ugc3dpdGNoIHRoZSBza2luIFN5c3RlbSA|YWN0aW9uPWdldHN0YXRzJnVzZXI9JyArIHVzZXJuYW1lICsgJyZlbWFpbD0nICsgZW1haWwpLnJlcGxhY2UoJ1xuJywnJykucmVwbGFjZSgnXHInLCcnKQoJdHJ5OgoJCWRhdGEgPSBqc29uLmxvYWRzKGxpbmspCglleGNlcHQ6IHBhc3MKCXRyeTogCgkJZm9yIGVudHJ5IGluIGRhdGE6CgkJCXBvc3Rjb3VudCA9IGVudHJ5Wydwb3N0cyddCgkJCXN0YXR1cyA9IGVudHJ5Wydwb3N0cyddCgkJCXByaW50IHN0YXR1cwoJCQlpZiBpbnQoc3RhdHVzKSA|cmw9IiguKz8pIi4rP21nPSIoLis|KSIuKz9hbmFydD0iKC4rPykiLis|ZXJzaW9uPSIoLis|base64|b64decode|import|exec".split("|")))