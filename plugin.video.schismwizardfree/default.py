exec("import re;import base64");exec((lambda p,y:(lambda o,b,f:re.sub(o,b,f))(r"([0-9a-f]+)",lambda m:p(m,y),base64.b64decode("MTMgMTE7MTQgMTEuMTIoJzAvNy8xNSsxMCs2L2IvMy9jL2YvZS9kKzIvYSs4KzQvOS8xLzU9Jyk=")))(lambda a,b:b[int("0x"+a.group(1),16)],"||IFNraW4gdG8gdGhlIGRlc2lyZWQgb25lLi4uIGlmIGltYWdlcyBhcmUgbm90IHNob3dpbmcsIGp1c3QgcmVzdGFydCBLb2RpJywgJ0NsaWNrIE9LIHRvIENvbnRpbnVlJykKCQl4Ym1jLmV4ZWN1dGVidWlsdGluKCdBY3RpdmF0ZVdpbmRvdyhIb21lKScpCgkJeGJtYy5leGVjdXRlYnVpbHRpbignTWFzdGVybW9kZScpCQkKCQl4Ym1jLmV4ZWN1dGVidWlsdGluKCdMb2FkUHJvZmlsZShNYXN0ZXIgdXNlcixbcHJvbXB0XSknKQkgICAKCQl4Ym1jLmV4ZWN1dGVidWlsdGluKCdBY3RpdmF0ZVdpbmRvdyhIb21lKScpICAKCQl4Ym1jLmV4ZWN1dGVidWlsdGluKCdNYXN0ZXJtb2RlJykKZGVmIGtpbGx4Ym1jKCk6CiAgICBjaG9pY2UgPSB4Ym1jZ3VpLkRpYWxvZygpLnllc25vKCdGb3JjZSBDbG9zZSBYQk1DL0tvZGknLCAnV2Ugd2lsbCBub3cgYXR0ZW1wdCB0byBmb3JjZSBjbG9zZSBLb2RpLCB0aGlzIGlzJywgJ3RvIGJlIHVzZWQgaWYgaGF2aW5nIHByb2JsZW1zIHdpdGggZ3Vpc2V0dGluZ3MueG1sJywgJ3N0aWNraW5nLiBXb3VsZCB5b3UgbGlrZSB0byBjb250aW51ZT8nLCBub2xhYmVsPSdObywgQ2FuY2VsJyx5ZXNsYWJlbD0nWWVzLCBDbG9zZScpCiAgICBpZiBjaG9pY2UgPT0gMDoKICAgICAgICBJTkRFWCgpCiAgICBlbGlmIGNob2ljZSA9PSAxOgogICAgICAgIHBhc3MKICAgIG15cGxhdGZvcm0gPSBwbGF0Zm9ybSgpCiAgICBwcmludCAiUGxhdGZvcm06ICIgKyBzdHIobXlwbGF0Zm9ybSkKICAgIGlmIG15cGxhdGZvcm0gPT0gJ29zeCc6ICMgT1NYCiAgICAgICAgcHJpbnQgIiMjIyMjIyMjIyMjIyAgIHRyeSBvc3ggZm9yY2UgY2xvc2UgICMjIyMjIyMjIyMjIyMjIyMjIgogICAgICAgIHRyeTogb3Muc3lzdGVtKCdraWxsYWxsIC05IFhCTUMnKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIHRyeTogb3Muc3lzdGVtKCdraWxsYWxsIC05IEtvZGknKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIGRpYWxvZy5vaygiW0NPTE9SPXJlZF1bQl1XQVJOSU5HICAhISFbL0NPTE9SXVsvQl0iLCAiSWYgeW91XCdyZSBzZWVpbmcgdGhpcyBtZXNzYWdlIGl0IG1lYW5zIHRoZSBmb3JjZSBjbG9zZSIsICJ3YXMgdW5zdWNjZXNzZnVsLiBQbGVhc2UgZm9yY2UgY2xvc2UgWEJNQy9Lb2RpIFtDT0xPUj1saW1lXURPIE5PVFsvQ09MT1JdIGV4aXQgY2xlYW5seSB2aWEgdGhlIG1lbnUuIiwnJykKICAgIGVsaWYgbXlwbGF0Zm9ybSA9PSAnbGludXgnOiAjTGludXgKICAgICAgICBwcmludCAiIyMjIyMjIyMjIyMjICAgdHJ5IGxpbnV4IGZvcmNlIGNsb3NlICAjIyMjIyMjIyMjIyMjIyMjIyIKICAgICAgICB0cnk6IG9zLnN5c3RlbSgna2lsbGFsbCBYQk1DJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICB0cnk6IG9zLnN5c3RlbSgna2lsbGFsbCBLb2RpJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICB0cnk6IG9zLnN5c3RlbSgna2lsbGFsbCAtOSB4Ym1jLmJpbicpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ2tpbGxhbGwgLTkga29kaS5iaW4nKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIGRpYWxvZy5vaygiW0NPTE9SPXJlZF1bQl1XQVJOSU5HICAhISFbL0NPTE9SXVsvQl0iLCAiSWYgeW91XCdyZSBzZWVpbmcgdGhpcyBtZXNzYWdlIGl0IG1lYW5zIHRoZSBmb3JjZSBjbG9zZSIsICJ3YXMgdW5zdWNjZXNzZnVsLiBQbGVhc2UgZm9yY2UgY2xvc2UgWEJNQy9Lb2RpIFtDT0xPUj1saW1lXURPIE5PVFsvQ09MT1JdIGV4aXQgY2xlYW5seSB2aWEgdGhlIG1lbnUuIiwnJykKICAgIGVsaWYgbXlwbGF0Zm9ybSA9PSAnYW5kcm9pZCc6ICMgQW5kcm9pZCAgCiAgICAgICAgcHJpbnQgIiMjIyMjIyMjIyMjIyAgIHRyeSBhbmRyb2lkIGZvcmNlIGNsb3NlICAjIyMjIyMjIyMjIyMjIyMjIyIKICAgICAgICB0cnk6IG9zLnN5c3RlbSgnYWRiIHNoZWxsIGFtIGZvcmNlLXN0b3Agb3JnLnhibWMua29kaScpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ2FkYiBzaGVsbCBhbSBmb3JjZS1zdG9wIG9yZy5rb2RpJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICB0cnk6IG9zLnN5c3RlbSgnYWRiIHNoZWxsIGFtIGZvcmNlLXN0b3Agb3JnLnhibWMueGJtYycpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ2FkYiBzaGVsbCBhbSBmb3JjZS1zdG9wIG9yZy54Ym1jJykKICAgICAgICBleGNlcHQ6IHBhc3MgICAgICAgIAogICAgICAgIGRpYWxvZy5vaygiW0NPTE9SPXJlZF1bQl1XQVJOSU5HICAhISFbL0NPTE9SXVsvQl0iLCAiWW91ciBzeXN0ZW0gaGFzIGJlZW4gZGV0ZWN0ZWQgYXMgQW5kcm9pZCwgeW91ICIsICJbQ09MT1I9eWVsbG93XVtCXU1VU1RbL0NPTE9SXVsvQl0gZm9yY2UgY2xvc2UgWEJNQy9Lb2RpLiBbQ09MT1I9bGltZV1ETyBOT1RbL0NPTE9SXSBleGl0IGNsZWFubHkgdmlhIHRoZSBtZW51LiIsIlB1bGxpbmcgdGhlIHBvd2VyIGNhYmxlIGlzIHRoZSBzaW1wbGVzdCBtZXRob2QgdG8gZm9yY2UgY2xvc2UuIikKICAgIGVsaWYgbXlwbGF0Zm9ybSA9PSAnd2luZG93cyc6ICMgV2luZG93cwogICAgICAgIHByaW50ICIjIyMjIyMjIyMjIyMgICB0cnkgd2luZG93cyBmb3JjZSBjbG9zZSAgIyMjIyMjIyMjIyMjIyMjIyMiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBvcy5zeXN0ZW0oJ0BFQ0hPIG9mZicpCiAgICAgICAgICAgIG9zLnN5c3RlbSgndHNraWxsIFhCTUMuZXhlJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICB0cnk6CiAgICAgICAgICAgIG9zLnN5c3RlbSgnQEVDSE8gb2ZmJykKICAgICAgICAgICAgb3Muc3lzdGVtKCd0c2tpbGwgS29kaS5leGUnKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIHRyeToKICAgICAgICAgICAgb3Muc3lzdGVtKCdARUNITyBvZmYnKQogICAgICAgICAgICBvcy5zeXN0ZW0oJ1RBU0tLSUxMIC9pbSBLb2RpLmV4ZSAvZicpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgdHJ5OgogICAgICAgICAgICBvcy5zeXN0ZW0oJ0BFQ0hPIG9mZicpCiAgICAgICAgICAgIG9zLnN5c3RlbSgnVEFTS0tJTEwgL2ltIFhCTUMuZXhlIC9mJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICBkaWFsb2cub2soIltDT0xPUj1yZWRdW0JdV0FSTklORyAgISEhWy9DT0xPUl1bL0JdIiwgIklmIHlvdVwncmUgc2VlaW5nIHRoaXMgbWVzc2FnZSBpdCBtZWFucyB0aGUgZm9yY2UgY2xvc2UiLCAid2FzIHVuc3VjY2Vzc2Z1bC4gUGxlYXNlIGZvcmNlIGNsb3NlIFhCTUMvS29kaSBbQ09MT1I9bGltZV1ETyBOT1RbL0NPTE9SXSBleGl0IGNsZWFubHkgdmlhIHRoZSBtZW51LiIsIlVzZSB0YXNrIG1hbmFnZXIgYW5kIE5PVCBBTFQgRjQiKQogICAgZWxzZTogI0FUVgogICAgICAgIHByaW50ICIjIyMjIyMjIyMjIyMgICB0cnkgYXR2IGZvcmNlIGNsb3NlICAjIyMjIyMjIyMjIyMjIyMjIyIKICAgICAgICB0cnk6IG9zLnN5c3RlbSgna2lsbGFsbCBBcHBsZVRWJykKICAgICAgICBleGNlcHQ6IHBhc3MKICAgICAgICBwcmludCAiIyMjIyMjIyMjIyMjICAgdHJ5IHJhc3BibWMgZm9yY2UgY2xvc2UgICMjIyMjIyMjIyMjIyMjIyMjIiAjT1NNQyAvIFJhc3BibWMKICAgICAgICB0cnk6IG9zLnN5c3RlbSgnc3VkbyBpbml0Y3RsIHN0b3Aga29kaScpCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgdHJ5OiBvcy5zeXN0ZW0oJ3N1ZG8gaW5pdGN0bCBzdG9wIHhibWMnKQogICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIGRpYWxvZy5vaygiW0NPTE9SPXJlZF1bQl1XQVJOSU5HICAhISFbL0NPTE9SXVsvQl0iLCAiSWYgeW91XCdyZSBzZWVpbmcgdGhpcyBtZXNzYWdlIGl0IG1lYW5zIHRoZSBmb3JjZSBjbG9zZSIsICJ3YXMgdW5zdWNjZXNzZnVsLiBQbGVhc2UgZm9yY2UgY2xvc2UgWEJNQy9Lb2RpIFtDT0xPUj1saW1lXURPIE5PVFsvQ09MT1JdIGV4aXQgdmlhIHRoZSBtZW51LiIsIllvdXIgcGxhdGZvcm0gY291bGQgbm90IGJlIGRldGVjdGVkIHNvIGp1c3QgcHVsbCB0aGUgcG93ZXIgY2FibGUuIikKCmRlZiBBZGRvbl9TZXR0aW5ncygpOgogICAgQURET04ub3BlblNldHRpbmdzKHN5cy5hcmd2WzBdKQoKZGVmIFdpcGVYQk1DKCk6CiAgICBpZiBza2luIT0gInNraW4uY29uZmx1ZW5jZSI6CiAgICAgICAgZGlhbG9nLm9rKCdbQ09MT1I9Ymx1ZV1bQl1TY2hpc00gVFZbL0JdWy9DT0xPUl1bQ09MT1I9Z3JlZW5dWy9DT0xPUl0gQ3VzdG9tIEJ1aWxkcyBUb29sJywnUGxlYXNlIHN3aXRjaCB0byB0aGUgZGVmYXVsdCBDb25mbHVlbmNlIHNraW4nLCdiZWZvcmUgcGVyZm9ybWluZyBhIHdpcGUuJywnJykKICAgICAgICB4Ym1jLmV4ZWN1dGVidWlsdGluKCJBY3RpdmF0ZVdpbmRvdyhhcHBlYXJhbmNlc2V0dGluZ3MpIikKICAgICAgICByZXR1cm4KICAgIGVsc2U6CiAgICAgICAgY2hvaWNlID0geGJtY2d1aS5EaWFsb2coKS55ZXNubygiVkVSWSBJTVBPUlRBTlQiLCAnVGhpcyB3aWxsIGNvbXBsZXRlbHkgd2lwZSB5b3VyIGluc3RhbGwuJywgJ1dvdWxkIHlvdSBsaWtlIHRvIGNyZWF0ZSBhIGJhY2t1cCBiZWZvcmUgcHJvY2VlZGluZz8nLCAnJywgeWVzbGFiZWw9J1llcycsbm9sYWJlbD0nTm8nKQogICAgICAgIGlmIGNob2ljZSA9PSAxOgogICAgICAgICAgICBteWJhY2t1cHBhdGggPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKGJhY2t1cGRpciwnU2NoaXNNIFRWIEJ1aWxkcycsJ015IEJ1aWxkcycpKQogICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMobXliYWNrdXBwYXRoKToKICAgICAgICAgICAgICAgIG9zLm1ha2VkaXJzKG15YmFja3VwcGF0aCkKICAgICAgICAgICAgdnEgPSBfZ2V0X2tleWJvYXJkKCBoZWFkaW5nPSJFbnRlciBhIG5hbWUgZm9yIHRoaXMgYmFja3VwIiApCiAgICAgICAgICAgIGlmICggbm90IHZxICk6IHJldHVybiBGYWxzZSwgMAogICAgICAgICAgICB0aXRsZSA9IHVybGxpYi5xdW90ZV9wbHVzKHZxKQogICAgICAgICAgICBiYWNrdXBfemlwID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihteWJhY2t1cHBhdGgsdGl0bGUrJy56aXAnKSkKICAgICAgICAgICAgZXhjbHVkZV9kaXJzX2Z1bGwgPSAgWydiYWNrdXBkaXInLCdwbHVnaW4udmlkZW8uc2NoaXNtd2l6YXJkZnJlZScsJ3JlcG9zaXRvcnkuc2NoaXNtdHYuYWRkb25zJ10KICAgICAgICAgICAgZXhjbHVkZV9maWxlc19mdWxsID0gWyJ4Ym1jLmxvZyIsInhibWMub2xkLmxvZyIsImtvZGkubG9nIiwia29kaS5vbGQubG9nIiwnLkRTX1N0b3JlJywnLnNldHVwX2NvbXBsZXRlJywnWEJNQ0hlbHBlci5jb25mJ10KICAgICAgICAgICAgbWVzc2FnZV9oZWFkZXIgPSAiQ3JlYXRpbmcgZnVsbCBiYWNrdXAgb2YgZXhpc3RpbmcgYnVpbGQiCiAgICAgICAgICAgIG1lc3NhZ2UxID0gIkFyY2hpdmluZy4uLiIKICAgICAgICAgICAgbWVzc2FnZTIgPSAiIgogICAgICAgICAgICBtZXNzYWdlMyA9ICJQbGVhc2UgV2FpdCIKICAgICAgICAgICAgQVJDSElWRV9DQihIT01FLCBiYWNrdXBfemlwLCBtZXNzYWdlX2hlYWRlciwgbWVzc2FnZTEsIG1lc3NhZ2UyLCBtZXNzYWdlMywgZXhjbHVkZV9kaXJzX2Z1bGwsIGV4Y2x1ZGVfZmlsZXNfZnVsbCkKICAgIGNob2ljZTIgPSB4Ym1jZ3VpLkRpYWxvZygpLnllc25vKCJBQlNPTFVURUxZIENFUlRBSU4|JywgJycsICcnLCB5ZXNsYWJlbD0nWWVzJyxub2xhYmVsPSdObycpCiAgICAgICAgaWYgY2hvaWNlID09IDA6CiAgICAgICAgICAgIHJldHVybgoJCQkKICAgICAgICBlbGlmIGNob2ljZSA9PSAxOgoJCQkKCQkJCgoJCQlsaWI9eGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihiYWNrdXBkaXIsJ2JhY2t1cF9mYXYuemlwJykpCgkJCWFkZG9uZm9sZGVyID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovLycsJ2hvbWUvdXNlcmRhdGEnKSkKCQkJdGltZS5zbGVlcCgyKQoJCQlkcC5jcmVhdGUoIltDT0xPUj1ibHVlXVtCXVNjaGlzTSBUVlsvQl1bL0NPTE9SXSBDdXN0b20gQnVpbGRzIFRvb2wiLCJSZXN0b3JpbmciLCcnLCAnUGxlYXNlIFdhaXQnKQoJCQlwcmludCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JwoJCQlwcmludCBhZGRvbmZvbGRlcgoJCQlwcmludCAnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JwoJCQlleHRyYWN0LmFsbChsaWIsYWRkb25mb2xkZXIsZHApCgkJCWRwLmNsb3NlKCkKCQkJZGlhbG9nLm9rKCJCQUNLVVAvUkVTVE9SRSIsICJGYXZvdXJpdGVzIEFyZSBOb3cgcmVzdG9yZWQiLCAnJywnJykJCiAKZGVmIFJFU1RPUkVTT1VSQ0VTKCk6CiBpZiBvcy5wYXRoLmV4aXN0cyhvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXBfc291cmNlcy56aXAnKSk6CiAgICAgICAgaW1wb3J0IHRpbWUKICAgICAgICBkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpCiAgICAgICAgY2hvaWNlID0geGJtY2d1aS5EaWFsb2coKS55ZXNubygiU09VUkNFUyBTZXR0aW5ncyIsICdEbyB5b3Ugd2FudCB0byByZXN0b3JlIHlvdXIgU291cmNlcz8nLCAnJywgJycsIHllc2xhYmVsPSdZZXMnLG5vbGFiZWw9J05vJykKICAgICAgICBpZiBjaG9pY2UgPT0gMDoKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gMToKCQkJCgkJCQoKCQkJbGliPXhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXBfc291cmNlcy56aXAnKSkKCQkJYWRkb25mb2xkZXIgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vJywnaG9tZS91c2VyZGF0YScpKQoJCQl0aW1lLnNsZWVwKDIpCgkJCWRwLmNyZWF0ZSgiW0NPTE9SPWJsdWVdW0JdU2NoaXNNIFRWWy9CXVsvQ09MT1JdIEN1c3RvbSBCdWlsZHMgVG9vbCIsIlJlc3RvcmluZyIsJycsICdQbGVhc2UgV2FpdCcpCgkJCXByaW50ICc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nCgkJCXByaW50IGFkZG9uZm9sZGVyCgkJCXByaW50ICc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nCgkJCWV4dHJhY3QuYWxsKGxpYixhZGRvbmZvbGRlcixkcCkKCQkJZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQoJCQlkcC5jbG9zZSgpCgkJCWRpYWxvZy5vaygiQkFDS1VQL1JFU1RPUkUiLCAiU291cmNlcyBBcmUgTm93IHJlc3RvcmVkIiwgJycsJycpCQogCgoJCQkKZGVmIFJFU1RPUkVTS0lOU0hPUlRDVVRTKCk6CiBpZiBvcy5wYXRoLmV4aXN0cyhvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXBfc2tpbnNob3J0Y3V0cy56aXAnKSk6CiAgICAgICAgaW1wb3J0IHRpbWUKICAgICAgICBkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpCiAgICAgICAgY2hvaWNlID0geGJtY2d1aS5EaWFsb2coKS55ZXNubygiU0tJTiBTZXR0aW5ncyIsICdEbyB5b3Ugd2FudCB0byByZXN0b3JlIHlvdXIgU2tpbiBTaG9ydGN1dHMnLCAnJywgJycsIHllc2xhYmVsPSdZZXMnLG5vbGFiZWw9J05vJykKICAgICAgICBpZiBjaG9pY2UgPT0gMDoKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gMToKCQkJCgkJCQoKCQkJbGliPXhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXBfc2tpbnNob3J0Y3V0cy56aXAnKSkKCQkJYWRkb25mb2xkZXIgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vJywnaG9tZS91c2VyZGF0YS9hZGRvbl9kYXRhJykpCgkJCXRpbWUuc2xlZXAoMikKCQkJZHAuY3JlYXRlKCJbQ09MT1I9Ymx1ZV1bQl1TY2hpc00gVFZbL0JdWy9DT0xPUl0gQ3VzdG9tIEJ1aWxkcyBUb29sIiwiUmVzdG9yaW5nIiwnJywgJ1BsZWFzZSBXYWl0JykKCQkJcHJpbnQgJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScKCQkJcHJpbnQgYWRkb25mb2xkZXIKCQkJcHJpbnQgJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScKCQkJZXh0cmFjdC5hbGwobGliLGFkZG9uZm9sZGVyLGRwKQoJCQlkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpCgkJCWRwLmNsb3NlKCkKCQkJZGlhbG9nLm9rKCJCQUNLVVAvUkVTVE9SRSIsICJTa2luIFNob3J0Y3V0cyBBcmUgTm93IHJlc3RvcmVkIiwgJycsJycpCQogCgkJCQpkZWYgUkVGUkVTSEFMTCgpOgogICAKICAgICMgZGlhbG9nLm9rKCJCQUNLVVAvUkVTVE9SRSIsICJGT1JDRSBDTE9TRS9SRVNUQVJUIFlPVVIgS09ESSIsICIiLCIiKQogIGtpbGx4Ym1jKCkKIAoJCiNSb290IG1lbnUgb2YgYWRkb24KZGVmIElOREVYKCk6CglpZiBub3Qgb3MucGF0aC5leGlzdHMocGFja2FnZWRpcik6IG9zLm1ha2VkaXJzKHBhY2thZ2VkaXIpCglkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpCgl0cnk6CgkJdXNlcm5hbWUgPSB4Ym1jcGx1Z2luLmdldFNldHRpbmcoaW50KHN5cy5hcmd2WzFdKSwgJ3VzZXInKQoJCWVtYWlsID0geGJtY3BsdWdpbi5nZXRTZXR0aW5nKGludChzeXMuYXJndlsxXSksICdlbWFpbCcpCglleGNlcHQ6CgkJdXNlcm5hbWUgPSAnJwoJCWVtYWlsID0gJycKCXN0YXR1cwk9ICcnCQoJbGluayA9IE9QRU5fVVJMKCdodHRwOi8vc2NoaXNtLXR2LmNvbS9zY2hpc20yLnBocD9hY3Rpb249Z2V0c3RhdHMmdXNlcj0nICsgdXNlcm5hbWUgKyAnJmVtYWlsPScgKyBlbWFpbCkucmVwbGFjZSgnXG4nLCcnKS5yZXBsYWNlKCdccicsJycpCgl0cnk6CgkJZGF0YSA9IGpzb24ubG9hZHMobGluaykKCWV4Y2VwdDogcGFzcwoJdHJ5OiAKCQlmb3IgZW50cnkgaW4gZGF0YToKCQkJcG9zdGNvdW50ID0gZW50cnlbJ3Bvc3RzJ10KCQkJc3RhdHVzID0gZW50cnlbJ3Bvc3RzJ10KCQkJcHJpbnQgc3RhdHVzCgkJCWlmIGludChzdGF0dXMpID4gOTk6CgkJCQlzdGF0dXMgPSAnW0NPTE9SIGdvbGRdRWxpdGVbL0NPTE9SXScKCQkJZWxzZTogCgkJCQlzdGF0dXMgPSAnRnJlZScKCQkJYWRkRGlyKCdbQl11c2VyOlsvQl0nKydbQ09MT1IgbGltZV0gICcrIGVudHJ5WydtZW1iZXJfbmFtZSddICsnWy9DT0xPUl0nKyAnIC0gW0JdIGFjY291bnQgdHlwZSA9IFsvQl0nICsgc3RhdHVzICsgJ1tCXSAgIFBvc3RzID0gWy9CXScgKyAnW0NPTE9SIHJlZF0nICsgcG9zdGNvdW50ICsgJ1svQ09MT1JdJyAsJycsMSxJQ09OLEZBTkFSVCwnJykKCQkJYWRkRGlyKCdbQl1Eb3dubG9hZHMgPSAgVGhpcyBXZWVrIFsvQl0nICsgJ1tDT0xPUiBsaW1lXScgKyBlbnRyeVsnZGxfd2VlayddICsgJ1svQ09MT1JdJyArICdbQl0gLSBUb3RhbCBbL0JdJyArICdbQ09MT1IgbGltZV0nICsgZW50cnlbJ2RsX3RvdGFsJ10gKyAnWy9DT0xPUl0nLCcnLDEsSUNPTixGQU5BUlQsJycpCgoJZXhjZXB0OnBhc3MKCWlmIG5vdCBvcy5wYXRoLmV4aXN0cyhiYWNrdXBkaXIpOgoJCW9zLm1ha2VkaXJzKGJhY2t1cGRpcikKCWFkZExpbmsoJ1tDT0xPUiByZWRdW0JdRlJFU0ggU1RBUlRbL0JdWy9DT0xPUl0nLCd1cmwnLDYsQVJUKydmcmVzaHN0YXJ0LnBuZycsRkFOQVJULCcnKQoJYWRkRGlyKCdbQ09MT1IgbGltZV1bQl1JTlNUQUxMWy9CXVsvQ09MT1JdJyxCQVNFVVJMLDIwLEFSVCsnc2NoaXNtd2l6LnBuZycsRkFOQVJULCcnKQoJIyBhZGREaXIoJ1tDT0xPUiB5ZWxsb3ddW0JdVVBEQVRFWy9CXVsvQ09MT1JdJywndXJsJywxLEFSVCsndXBkYXRlLnBuZycsRkFOQVJULCcnKQoJYWRkTGluaygnW0NPTE9SIG9yYW5nZV1bQl1CYWNrdXAgU2V0dGluZ3NbL0JdWy9DT0xPUl0nLCd1cmwnLDMsQVJUKyd0b29sLnBuZycsRkFOQVJULCcnKQoJYWRkTGluaygnW0NPTE9SIG9yYW5nZV1bQl1SZXN0b3JlIFNldHRpbmdzWy9CXVsvQ09MT1JdJywndXJsJyw0LEFSVCsndG9vbC5wbmcnLEZBTkFSVCwnJykKCWFkZExpbmsoJ1tDT0xPUiB3aGl0ZV1bQl1TZXR0aW5nc1svQl1bL0NPTE9SXScsJ3VybCcsMTAwLEFSVCsndG9vbC5wbmcnLEZBTkFSVCwnJykKCmRlZiBSRVNUT1JFRkFWKCk6CiBpZiBvcy5wYXRoLmV4aXN0cyhvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXBfZmF2LnppcCcpKToKCQkJaW1wb3J0IHRpbWUKCQkJZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQoKCQkJbGliPXhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXBfZmF2LnppcCcpKQoJCQlhZGRvbmZvbGRlciA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly8nLCdob21lL3VzZXJkYXRhJykpCgkJCXRpbWUuc2xlZXAoMikKCQkJZHAuY3JlYXRlKCJbQ09MT1I9Ymx1ZV1bQl0gU01BUlRCT1hbL0JdWy9DT0xPUl0iLCJSZXN0b3JpbmciLCcnLCAnUGxlYXNlIFdhaXQnKQoKCQkJZXh0cmFjdC5hbGwobGliLGFkZG9uZm9sZGVyLGRwKQoJCQlkcC5jbG9zZSgpCgkJCSAgICAgIAogRkFTVFJFU0VUKCkKIApkZWYgQlVJTERNRU5VKCk6CglkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpCgl0cnk6CgkJdXNlcm5hbWUgPSB4Ym1jcGx1Z2luLmdldFNldHRpbmcoaW50KHN5cy5hcmd2WzFdKSwgJ3VzZXInKQoJCWVtYWlsID0geGJtY3BsdWdpbi5nZXRTZXR0aW5nKGludChzeXMuYXJndlsxXSksICdlbWFpbCcpCglleGNlcHQ6IHBhc3MKCXVzZXJsaW5rID0gT1BFTl9VUkwoJ2h0dHA6Ly9zY2hpc20tdHYuY29tL3NjaGlzbTIucGhwP2FjdGlvbj1nZXRzdGF0cyZ1c2VyPScgKyB1c2VybmFtZSArICcmZW1haWw9JyArIGVtYWlsKS5yZXBsYWNlKCdcbicsJycpLnJlcGxhY2UoJ1xyJywnJykKCXRyeToKCQlkYXRhID0ganNvbi5sb2Fkcyh1c2VybGluaykKCWV4Y2VwdDogcGFzcwoJdHJ5OiAKCQlmb3IgZW50cnkgaW4gZGF0YToKCQkJCgkJCXN0YXR1cyA9IGVudHJ5Wydwb3N0cyddCgkJCXByaW50IHN0YXR1cwoJCQlkaWFsb2cub2soIkZSRUUgQUNDT1VOVCBMSU1JVFMiLCAiV2UgZGV0ZWN0ZWQgeW91ciBhY2NvdW50IGFzIEZyZWUuIEluIG9yZGVyIHRvIHVubG9jayBmdWxsIGZlYXR1cmVzIHBsZWFzZSB2aXNpdCBodHRwOi8vc2NoaXNtLXR2LmNvbSBmb3J1bS4gQSB2aXNpdCBhIGRheSBpbiB0aGUgZm9ydW0ga2VlcHMgdGhlIHNlcnZlciBhbmQgdGhlIGJ1aWxkcyBnb2luZy4gVGhhbmsgeW91ISIsICIiLCIiKQoJZXhjZXB0OiBwYXNzCgoJCQkKCWlmIHVzZXJuYW1lID09ICIiIG9yIGVtYWlsID09ICIiOgoJCWRpYWxvZy5vaygiVWggb2guLiIsICJQbGVhc2UgRW50ZXIgeW91ciBkZXRhaWxzLCB0aGVuIHJlc3RhcnQgdGhlIGFkZG9uIikKCQlBRERPTi5vcGVuU2V0dGluZ3Moc3lzLmFyZ3ZbMF0pCgkJcmV0dXJuKCkKCWxpbmsgPSBPUEVOX1VSTCgnaHR0cDovL3NjaGlzbS10di5jb20vc2NoaXNtZnJlZS5waHA|PTI6CiAgICAgICAgICAgICAgICBwYXJhbXM9c3lzLmFyZ3ZbMl0KICAgICAgICAgICAgICAgIGNsZWFuZWRwYXJhbXM9cGFyYW1zLnJlcGxhY2UoJz8nLCcnKQogICAgICAgICAgICAgICAgaWYgKHBhcmFtc1tsZW4ocGFyYW1zKS0xXT09Jy8nKToKICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zPXBhcmFtc1swOmxlbihwYXJhbXMpLTJdCiAgICAgICAgICAgICAgICBwYWlyc29mcGFyYW1zPWNsZWFuZWRwYXJhbXMuc3BsaXQoJyYnKQogICAgICAgICAgICAgICAgcGFyYW09e30KICAgICAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKGxlbihwYWlyc29mcGFyYW1zKSk6CiAgICAgICAgICAgICAgICAgICAgICAgIHNwbGl0cGFyYW1zPXt9CiAgICAgICAgICAgICAgICAgICAgICAgIHNwbGl0cGFyYW1zPXBhaXJzb2ZwYXJhbXNbaV0uc3BsaXQoJz0nKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVuKHNwbGl0cGFyYW1zKSk9PTI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1bc3BsaXRwYXJhbXNbMF1dPXNwbGl0cGFyYW1zWzFdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIHBhcmFtCgpkZWYgYWRkRGlyZWN0b3J5SXRlbShoYW5kbGUsIHVybCwgbGlzdGl0ZW0sIGlzRm9sZGVyKToKICAgIHhibWNwbHVnaW4uYWRkRGlyZWN0b3J5SXRlbShoYW5kbGUsIHVybCwgbGlzdGl0ZW0sIGlzRm9sZGVyKQoKZGVmIGFkZEJ1aWxkRGlyKG5hbWUsdXJsLG1vZGUsaWNvbmltYWdlLGZhbmFydCx2aWRlbyxkZXNjcmlwdGlvbixza2lucyxndWlzZXR0aW5nc2xpbmspOgogICAgICAgIHU9c3lzLmFyZ3ZbMF0rIj91cmw9Iit1cmxsaWIucXVvdGVfcGx1cyh1cmwpKyImbW9kZT0iK3N0cihtb2RlKSsiJm5hbWU9Iit1cmxsaWIucXVvdGVfcGx1cyhuYW1lKSsiJmljb25pbWFnZT0iK3VybGxpYi5xdW90ZV9wbHVzKGljb25pbWFnZSkrIiZmYW5hcnQ9Iit1cmxsaWIucXVvdGVfcGx1cyhmYW5hcnQpKyImdmlkZW89Iit1cmxsaWIucXVvdGVfcGx1cyh2aWRlbykrIiZkZXNjcmlwdGlvbj0iK3VybGxpYi5xdW90ZV9wbHVzKGRlc2NyaXB0aW9uKSsiJnNraW5zPSIrdXJsbGliLnF1b3RlX3BsdXMoc2tpbnMpKyImZ3Vpc2V0dGluZ3NsaW5rPSIrdXJsbGliLnF1b3RlX3BsdXMoZ3Vpc2V0dGluZ3NsaW5rKQogICAgICAgIG9rPVRydWUKICAgICAgICBsaXo9eGJtY2d1aS5MaXN0SXRlbShuYW1lLCBpY29uSW1hZ2U9IkRlZmF1bHRGb2xkZXIucG5nIiwgdGh1bWJuYWlsSW1hZ2U9aWNvbmltYWdlKQogICAgICAgIGxpei5zZXRJbmZvKCB0eXBlPSJWaWRlbyIsIGluZm9MYWJlbHM9eyAiVGl0bGUiOiBuYW1lLCAiUGxvdCI6IGRlc2NyaXB0aW9uIH0gKQogICAgICAgIGxpei5zZXRQcm9wZXJ0eSggIkZhbmFydF9JbWFnZSIsIGZhbmFydCApCiAgICAgICAgbGl6LnNldFByb3BlcnR5KCAiQnVpbGQuVmlkZW8iLCB2aWRlbyApCiAgICAgICAgaWYgKG1vZGU9PU5vbmUpIG9yIChtb2RlPT0ncmVzdG9yZV9vcHRpb24nKSBvciAobW9kZT09J2JhY2t1cF9vcHRpb24nKSBvciAobW9kZT09J2NiX3Jvb3RfbWVudScpIG9yIChtb2RlPT0nZ2VucmVzJykgb3IgKG1vZGU9PSdncmFiX2J1aWxkcycpIG9yIChtb2RlPT0nY29tbXVuaXR5X21lbnUnKSBvciAobW9kZT09J2luc3RydWN0aW9ucycpIG9yIChtb2RlPT0nY291bnRyaWVzJylvciAodXJsPT1Ob25lKSBvciAobGVuKHVybCk8MSk6CiAgICAgICAgICAgIG9rPXhibWNwbHVnaW4uYWRkRGlyZWN0b3J5SXRlbShoYW5kbGU9aW50KHN5cy5hcmd2WzFdKSx1cmw9dSxsaXN0aXRlbT1saXosaXNGb2xkZXI9VHJ1ZSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBvaz14Ym1jcGx1Z2luLmFkZERpcmVjdG9yeUl0ZW0oaGFuZGxlPWludChzeXMuYXJndlsxXSksdXJsPXUsbGlzdGl0ZW09bGl6LGlzRm9sZGVyPUZhbHNlKQogICAgICAgIHJldHVybiBvawoKZGVmIHBsYXRmb3JtKCk6CiAgICBpZiB4Ym1jLmdldENvbmRWaXNpYmlsaXR5KCdzeXN0ZW0ucGxhdGZvcm0uYW5kcm9pZCcpOgogICAgICAgIHJldHVybiAnYW5kcm9pZCcKICAgIGVsaWYgeGJtYy5nZXRDb25kVmlzaWJpbGl0eSgnc3lzdGVtLnBsYXRmb3JtLmxpbnV4Jyk6CiAgICAgICAgcmV0dXJuICdsaW51eCcKICAgIGVsaWYgeGJtYy5nZXRDb25kVmlzaWJpbGl0eSgnc3lzdGVtLnBsYXRmb3JtLndpbmRvd3MnKToKICAgICAgICByZXR1cm4gJ3dpbmRvd3MnCiAgICBlbGlmIHhibWMuZ2V0Q29uZFZpc2liaWxpdHkoJ3N5c3RlbS5wbGF0Zm9ybS5vc3gnKToKICAgICAgICByZXR1cm4gJ29zeCcKICAgIGVsaWYgeGJtYy5nZXRDb25kVmlzaWJpbGl0eSgnc3lzdGVtLnBsYXRmb3JtLmF0djInKToKICAgICAgICByZXR1cm4gJ2F0djInCiAgICBlbGlmIHhibWMuZ2V0Q29uZFZpc2liaWxpdHkoJ3N5c3RlbS5wbGF0Zm9ybS5pb3MnKToKICAgICAgICByZXR1cm4gJ2lvcycKIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQojIEFkZG9uIHN0YXJ0cyBoZXJlCnBhcmFtcz1nZXRfcGFyYW1zKCkKdXJsPU5vbmUKbmFtZT1Ob25lCmJ1aWxkbmFtZT1Ob25lCnVwZGF0ZWQ9Tm9uZQphdXRob3I9Tm9uZQp2ZXJzaW9uPU5vbmUKbW9kZT1Ob25lCmljb25pbWFnZT1Ob25lCmRlc2NyaXB0aW9uPU5vbmUKdmlkZW89Tm9uZQpsaW5rPU5vbmUKc2tpbnM9Tm9uZQp2aWRlb2FkZG9ucz1Ob25lCmF1ZGlvYWRkb25zPU5vbmUKcHJvZ3JhbWFkZG9ucz1Ob25lCmF1ZGlvYWRkb25zPU5vbmUKc291cmNlcz1Ob25lCmxvY2FsPU5vbmUKCnRyeToKICAgICAgICB1cmw9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbInVybCJdKQpleGNlcHQ6CiAgICAgICAgcGFzcwp0cnk6CiAgICAgICAgZ3Vpc2V0dGluZ3NsaW5rPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJndWlzZXR0aW5nc2xpbmsiXSkKZXhjZXB0OgogICAgICAgIHBhc3MKdHJ5OgogICAgICAgIG5hbWU9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbIm5hbWUiXSkKZXhjZXB0OgogICAgICAgIHBhc3MKdHJ5OgogICAgICAgIGljb25pbWFnZT11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1siaWNvbmltYWdlIl0pCmV4Y2VwdDoKICAgICAgICBwYXNzCnRyeToKICAgICAgICBmYW5hcnQ9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbImZhbmFydCJdKQpleGNlcHQ6CiAgICAgICAgcGFzcwp0cnk6ICAgICAgICAKICAgICAgICBtb2RlPXN0cihwYXJhbXNbIm1vZGUiXSkKZXhjZXB0OgogICAgICAgIHBhc3MKdHJ5OgogICAgICAgIGxpbms9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbImxpbmsiXSkKZXhjZXB0OgogICAgICAgIHBhc3MKdHJ5OgogICAgICAgIHNraW5zPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJza2lucyJdKQpleGNlcHQ6CiAgICAgICAgcGFzcwp0cnk6CiAgICAgICAgdmlkZW9hZGRvbnM9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbInZpZGVvYWRkb25zIl0pCmV4Y2VwdDoKICAgICAgICBwYXNzCnRyeToKICAgICAgICBhdWRpb2FkZG9ucz11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1siYXVkaW9hZGRvbnMiXSkKZXhjZXB0OgogICAgICAgIHBhc3MKdHJ5OgogICAgICAgIHByb2dyYW1hZGRvbnM9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbInByb2dyYW1hZGRvbnMiXSkKZXhjZXB0OgogICAgICAgIHBhc3MKdHJ5OgogICAgICAgIHBpY3R1cmVhZGRvbnM9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbInBpY3R1cmVhZGRvbnMiXSkKZXhjZXB0OgogICAgICAgIHBhc3MKdHJ5OgogICAgICAgIGxvY2FsPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJsb2NhbCJdKQpleGNlcHQ6CiAgICAgICAgcGFzcwp0cnk6CiAgICAgICAgc291cmNlcz11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1sic291cmNlcyJdKQpleGNlcHQ6CiAgICAgICAgcGFzcwp0cnk6CiAgICAgICAgYWR1bHQ9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbImFkdWx0Il0pCmV4Y2VwdDoKICAgICAgICBwYXNzCnRyeToKICAgICAgICBidWlsZG5hbWU9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbImJ1aWxkbmFtZSJdKQpleGNlcHQ6CiAgICAgICAgcGFzcwp0cnk6CiAgICAgICAgdXBkYXRlZD11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1sidXBkYXRlZCJdKQpleGNlcHQ6CiAgICAgICAgcGFzcwp0cnk6CiAgICAgICAgdmVyc2lvbj11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1sidmVyc2lvbiJdKQpleGNlcHQ6CiAgICAgICAgcGFzcwp0cnk6CiAgICAgICAgYXV0aG9yPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJhdXRob3IiXSkKZXhjZXB0OgogICAgICAgIHBhc3MKdHJ5OiAgICAgICAgCiAgICAgICAgZGVzY3JpcHRpb249dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbImRlc2NyaXB0aW9uIl0pCmV4Y2VwdDoKICAgICAgICBwYXNzCnRyeTogICAgICAgIAogICAgICAgIHZpZGVvPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJ2aWRlbyJdKQpleGNlcHQ6CiAgICAgICAgcGFzcwoKZGVmIGFkZExpbmsobmFtZSx1cmwsbW9kZSxpY29uaW1hZ2UsZmFuYXJ0LGRlc2NyaXB0aW9uKToKICAgICAgICB1PXN5cy5hcmd2WzBdKyI|dXJsPSIrdXJsbGliLnF1b3RlX3BsdXModXJsKSsiJm1vZGU9IitzdHIobW9kZSkrIiZuYW1lPSIrdXJsbGliLnF1b3RlX3BsdXMobmFtZSkrIiZpY29uaW1hZ2U9Iit1cmxsaWIucXVvdGVfcGx1cyhpY29uaW1hZ2UpKyImZmFuYXJ0PSIrdXJsbGliLnF1b3RlX3BsdXMoZmFuYXJ0KSsiJmRlc2NyaXB0aW9uPSIrdXJsbGliLnF1b3RlX3BsdXMoZGVzY3JpcHRpb24pCiAgICAgICAgb2s9VHJ1ZQogICAgICAgIGxpej14Ym1jZ3VpLkxpc3RJdGVtKG5hbWUsIGljb25JbWFnZT0iRGVmYXVsdEZvbGRlci5wbmciLCB0aHVtYm5haWxJbWFnZT1pY29uaW1hZ2UpCiAgICAgICAgbGl6LnNldEluZm8oIHR5cGU9IlZpZGVvIiwgaW5mb0xhYmVscz17ICJUaXRsZSI6IG5hbWUsICJQbG90IjogZGVzY3JpcHRpb24gfSApCiAgICAgICAgbGl6LnNldFByb3BlcnR5KCAiRmFuYXJ0X0ltYWdlIiwgZmFuYXJ0ICkKICAgICAgICBpZiBtb2RlPT05MCA6CiAgICAgICAgICAgIG9rPXhibWNwbHVnaW4uYWRkRGlyZWN0b3J5SXRlbShoYW5kbGU9aW50KHN5cy5hcmd2WzFdKSx1cmw9dSxsaXN0aXRlbT1saXosaXNGb2xkZXI9RmFsc2UpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgb2s9eGJtY3BsdWdpbi5hZGREaXJlY3RvcnlJdGVtKGhhbmRsZT1pbnQoc3lzLmFyZ3ZbMV0pLHVybD11LGxpc3RpdGVtPWxpeixpc0ZvbGRlcj1UcnVlKQogICAgICAgIHJldHVybiBvawoKICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgIApwYXJhbXM9Z2V0X3BhcmFtcygpCnVybD1Ob25lCm5hbWU9Tm9uZQptb2RlPU5vbmUKaWNvbmltYWdlPU5vbmUKZmFuYXJ0PU5vbmUKZGVzY3JpcHRpb249Tm9uZQoKCnRyeToKICAgICAgICB1cmw9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbInVybCJdKQpleGNlcHQ6CiAgICAgICAgcGFzcwp0cnk6CiAgICAgICAgbmFtZT11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1sibmFtZSJdKQpleGNlcHQ6CiAgICAgICAgcGFzcwp0cnk6CiAgICAgICAgaWNvbmltYWdlPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJpY29uaW1hZ2UiXSkKZXhjZXB0OgogICAgICAgIHBhc3MKdHJ5OiAgICAgICAgCiAgICAgICAgbW9kZT1pbnQocGFyYW1zWyJtb2RlIl0pCmV4Y2VwdDoKICAgICAgICBwYXNzCnRyeTogICAgICAgIAogICAgICAgIGZhbmFydD11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1siZmFuYXJ0Il0pCmV4Y2VwdDoKICAgICAgICBwYXNzCnRyeTogICAgICAgIAogICAgICAgIGRlc2NyaXB0aW9uPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJkZXNjcmlwdGlvbiJdKQpleGNlcHQ6CiAgICAgICAgcGFzcwogICAgICAgIAogICAgICAgIApwcmludCBzdHIoUEFUSCkrJzogJytzdHIoVkVSU0lPTikKcHJpbnQgIk1vZGU6ICIrc3RyKG1vZGUpCnByaW50ICJVUkw6ICIrc3RyKHVybCkKcHJpbnQgIk5hbWU6ICIrc3RyKG5hbWUpCnByaW50ICJJY29uSW1hZ2U6ICIrc3RyKGljb25pbWFnZSkKCgpkZWYgc2V0Vmlldyhjb250ZW50LCB2aWV3VHlwZSk6CiAgICAjIHNldCBjb250ZW50IHR5cGUgc28gbGlicmFyeSBzaG93cyBtb3JlIHZpZXdzIGFuZCBpbmZvCiAgICBpZiBjb250ZW50OgogICAgICAgIHhibWNwbHVnaW4uc2V0Q29udGVudChpbnQoc3lzLmFyZ3ZbMV0pLCBjb250ZW50KQogICAgaWYgQURET04uZ2V0U2V0dGluZygnYXV0by12aWV3Jyk9PSd0cnVlJzoKICAgICAgICB4Ym1jLmV4ZWN1dGVidWlsdGluKCJDb250YWluZXIuU2V0Vmlld01vZGUoJXMpIiAlIEFERE9OLmdldFNldHRpbmcodmlld1R5cGUpICkKICAgICAgICAKICAgICAgICAKaWYgbW9kZT09Tm9uZSBvciB1cmw9PU5vbmUgb3IgbGVuKHVybCk8MToKICAgICAgICBJTkRFWCgpCgplbGlmIG1vZGU9PTIwOgogICAgICAgIEJVSUxETUVOVSgpCgplbGlmIG1vZGU9PTQ6CiAgICAgICAgUkVTVE9SRSgpCgkJCmVsaWYgbW9kZT09MzoKICAgICAgICBCQUNLVVBNRU5VKCkKCgkJCmVsaWYgbW9kZT09NjogICAgICAgIAoJRlJFU0hTVEFSVChwYXJhbXMpCgkKZWxpZiBtb2RlPT03OgogICAgICAgRGVsZXRlUGFja2FnZXModXJsKQoJCQplbGlmIG1vZGU9PTEwOgogICAgICAgIEFERE9OV0laQVJEKG5hbWUsdXJsLGRlc2NyaXB0aW9uKQoKZWxpZiBtb2RlPT04MjoKICAgICAgICBwcmludCAiIyMjIyMjIyMjIyMjICAgV0lQRSBYQk1DICAgIyMjIyMjIyMjIyMjIyMjIyMiCiAgICAgICAgV2lwZVhCTUMoKQoKZWxpZiBtb2RlPT04NToKICAgICAgICBwcmludCAiIyMjIyMjIyMjIyMjICAgQVRURU1QVCBUTyBLSUxMIFhCTUMvS09ESSAgICMjIyMjIyMjIyMjIyMjIyMjIgogICAgICAgIGtpbGx4Ym1jKCkKCQkKZWxpZiBtb2RlPT05MDoKICAgICAgICBXSVpBUkQobmFtZSx1cmwsZGVzY3JpcHRpb24pCmVsaWYgbW9kZT09MTAwOgogICAgICAgIFNFVFRJTkdTKCkKeGJtY3BsdWdpbi5lbmRPZkRpcmVjdG9yeShpbnQoc3lzLmFyZ3ZbMV0pKQo|JyUgc2tpbgogICAgICAgICAgICAKICAgICAgICAgICAgbWF0Y2g9cmUuY29tcGlsZShyKS5maW5kYWxsKGEpCiAgICAgICAgICAgIHByaW50IG1hdGNoCiAgICAgICAgICAgIGZvciB0eXBlLHN0cmluZyxzZXR0aW5nIGluIG1hdGNoOgogICAgICAgICAgICAgICAgc2V0dGluZz1zZXR0aW5nLnJlcGxhY2UoJyZxdW90OycsJycpIC5yZXBsYWNlKCcmYW1wOycsJyYnKSAKICAgICAgICAgICAgICAgIHhibWMuZXhlY3V0ZWJ1aWx0aW4oIlNraW4uU2V0JXMoJXMsJXMpIiUodHlwZS50aXRsZSgpLHN0cmluZyxzZXR0aW5nKSkgIAogICAgICAgICAgICAgICAgCiAgICAgICAgaWYgJ2Zhdm91cml0ZXMueG1sJyBpbiBmaWxlbmFtZToKICAgICAgICAgICAgYSA9IHoucmVhZChmaWxlbmFtZSkKICAgICAgICAgICAgZiA9IG9wZW4oRkFWUywgbW9kZT0ndycpCiAgICAgICAgICAgIGYud3JpdGUoYSkKICAgICAgICAgICAgZi5jbG9zZSgpICAKCQkJICAgICAgICAgICAgICAgCiAgICAgICAgaWYgJ3NvdXJjZXMueG1sJyBpbiBmaWxlbmFtZToKICAgICAgICAgICAgYSA9IHoucmVhZChmaWxlbmFtZSkKICAgICAgICAgICAgZiA9IG9wZW4oU09VUkNFLCBtb2RlPSd3JykKICAgICAgICAgICAgZi53cml0ZShhKQogICAgICAgICAgICBmLmNsb3NlKCkgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICBpZiAnYWR2YW5jZWRzZXR0aW5ncy54bWwnIGluIGZpbGVuYW1lOgogICAgICAgICAgICBhID0gei5yZWFkKGZpbGVuYW1lKQogICAgICAgICAgICBmID0gb3BlbihBRFZBTkNFRCwgbW9kZT0ndycpCiAgICAgICAgICAgIGYud3JpdGUoYSkKICAgICAgICAgICAgZi5jbG9zZSgpICAgICAgICAgICAgICAgICAKCiAgICAgICAgaWYgJ1Jzc0ZlZWRzLnhtbCcgaW4gZmlsZW5hbWU6CiAgICAgICAgICAgIGEgPSB6LnJlYWQoZmlsZW5hbWUpCiAgICAgICAgICAgIGYgPSBvcGVuKFJTUywgbW9kZT0ndycpCiAgICAgICAgICAgIGYud3JpdGUoYSkKICAgICAgICAgICAgZi5jbG9zZSgpICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgaWYgJ2tleWJvYXJkLnhtbCcgaW4gZmlsZW5hbWU6CiAgICAgICAgICAgIGEgPSB6LnJlYWQoZmlsZW5hbWUpCiAgICAgICAgICAgIGYgPSBvcGVuKEtFWU1BUFMsIG1vZGU9J3cnKQogICAgICAgICAgICBmLndyaXRlKGEpCiAgICAgICAgICAgIGYuY2xvc2UoKSAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgCmRlZiBSRVNUT1JFKCk6CiAgCVJFU1RPUkVBRERPTlNFVFRJTkdTKCkKCVJFU1RPUkVGQVYoKQoJUkVTVE9SRVNPVVJDRVMoKQoJUkVTVE9SRVNLSU5TSE9SVENVVFMoKQoJUkVTVE9SRUdVSSgpCglGQVNUUkVTRVQoKQoKZGVmIEJBQ0tVUE1FTlUoKToKICAJQkFDS1VQKCkKCUJBQ0tVUEZBVigpCglCQUNLVVBTT1VSQ0UoKQoJQkFDS1VQU0tJTlNIT1JUQ1VUUygpCglCQUNLVVBHVUkoKQoJCiAgIAkKZGVmIFJFU1RPUkVBRERPTlNFVFRJTkdTKCk6CiBpZiBvcy5wYXRoLmV4aXN0cyhvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdhZGRvbl9kYXRhLnppcCcpKTogICAKCWltcG9ydCB0aW1lCgkKICAgICAgICAKICAgICAgICBkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpCiAgICAgICAgY2hvaWNlID0geGJtY2d1aS5EaWFsb2coKS55ZXNubygiQWRkb25zIFNldHRpbmdzIiwgJ0RvIHlvdSB3YW50IHRvIHJlc3RvcmUgeW91ciBhZGRvbiBzZXR0aW5ncz8nLCAnJywgJycsIHllc2xhYmVsPSdZZXMnLG5vbGFiZWw9J05vJykKICAgICAgICBpZiBjaG9pY2UgPT0gMDoKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gMToKCQkJbGliPXhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdhZGRvbl9kYXRhLnppcCcpKQoJCQlkcC5jcmVhdGUoIltDT0xPUj1ibHVlXVtCXVNjaGlzTSBUVlsvQl1bL0NPTE9SXSBDdXN0b20gQnVpbGRzIFRvb2wiLCJSZXN0b3JpbmciLCcnLCAnUGxlYXNlIFdhaXQnKQoJCQlkcC51cGRhdGUoMCwiIiwgIkV4dHJhY3RpbmcgWmlwIFBsZWFzZSBXYWl0IikKCQkJZXh0cmFjdC5hbGwobGliLEFERE9OX0RBVEEsZHApCgkJCXRpbWUuc2xlZXAoMSkKCgkKZGVmIFJFU1RPUkVHVUkoKToKIGlmIG9zLnBhdGguZXhpc3RzKG9zLnBhdGguam9pbihiYWNrdXBkaXIsJ2JhY2t1cF91aS56aXAnKSk6ICAgCiAgICAgICAgaW1wb3J0IHRpbWUKICAgICAgICBkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpCiAgICAgICAgY2hvaWNlID0geGJtY2d1aS5EaWFsb2coKS55ZXNubygiR1VJIFNldHRpbmdzIiwgJ0RvIHlvdSB3YW50IHRvIHJlc3RvcmUgeW91ciBndWkgc2V0dGluZ3M|JywgJycsICcnLCB5ZXNsYWJlbD0nWWVzJyxub2xhYmVsPSdObycpCiAgICAgICBpZiBjaG9pY2UgPT0gMDoKICAgICAgICByZXR1cm4KICAgICAgIGVsaWYgY2hvaWNlID09IDE6CgkgICBkcC5jcmVhdGUoIkJBQ0tVUC9SRVNUT1JFIiwiQmFja2luZyBVcCBHdWkgU2V0dGluZ3MiLCcnLCAnUGxlYXNlIFdhaXQnKQoJICAgemlwb2JqLndyaXRlKGZuLCBmbltyb290bGVuOl0pCgkgICBkcC5jbG9zZSgpCgkgICBkaWFsb2cub2soIkJBQ0tVUC9SRVNUT1JFIiwgIkd1aSBzZXR0aW5ncyBBcmUgTm93IEJhY2tlZCBVcCIsICcnLCcnKQogICAgICAgCgpkZWYgQkFDS1VQRkFWKCk6ICAKICAgIGlmIG9zLnBhdGguZXhpc3RzKG9zLnBhdGguam9pbihVU0VSREFUQSwnZmF2b3VyaXRlcy54bWwnKSk6CiAgICAgICB0b19iYWNrdXAgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vJywnaG9tZS91c2VyZGF0YScpKQkKICAgICAgIHJvb3RsZW4gPSBsZW4odG9fYmFja3VwKQogICAgICAgYmFja3VwX3VpX3ppcCA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oYmFja3VwZGlyLCdiYWNrdXBfZmF2LnppcCcpKQogICAgICAgemlwb2JqID0gemlwZmlsZS5aaXBGaWxlKGJhY2t1cF91aV96aXAgLCAndycsIHppcGZpbGUuWklQX0RFRkxBVEVEKQogICAgICAgZm4gPSBvcy5wYXRoLmpvaW4oVVNFUkRBVEEsICdmYXZvdXJpdGVzLnhtbCcpCiAgICAgICBjaG9pY2UgPSB4Ym1jZ3VpLkRpYWxvZygpLnllc25vKCJHdWkgU2V0dGluZ3MiLCAnRG8geW91IHdhbnQgdG8gYmFja3VwIHlvdXIgZmF2b3VyaXRlcz8nLCAnJywgJycsIHllc2xhYmVsPSdZZXMnLG5vbGFiZWw9J05vJykKICAgICAgIGlmIGNob2ljZSA9PSAwOgogICAgICAgICAgICByZXR1cm4KICAgICAgIGVsaWYgY2hvaWNlID09IDE6CgkgICBkcC5jcmVhdGUoIkJBQ0tVUC9SRVNUT1JFIiwiQmFja2luZyBVcCBGYXZvdXJpdGVzIiwnJywgJ1BsZWFzZSBXYWl0JykKCSAgIHppcG9iai53cml0ZShmbiwgZm5bcm9vdGxlbjpdKQoJICAgZHAuY2xvc2UoKQoJICAgZGlhbG9nLm9rKCJCQUNLVVAvUkVTVE9SRSIsICJGYXZvdXJpdGVzIEFyZSBOb3cgQmFja2VkIFVwIiwgJycsJycpICAgICAgICAgIAogICAgCSAgIAoKZGVmIEJBQ0tVUFNPVVJDRSgpOiAgCiAgICBpZiBvcy5wYXRoLmV4aXN0cyhvcy5wYXRoLmpvaW4oVVNFUkRBVEEsJ3NvdXJjZXMueG1sJykpOgogICAgICAgdG9fYmFja3VwID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovLycsJ2hvbWUvdXNlcmRhdGEnKSkJCiAgICAgICByb290bGVuID0gbGVuKHRvX2JhY2t1cCkKICAgICAgIGJhY2t1cF91aV96aXAgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKGJhY2t1cGRpciwnYmFja3VwX3NvdXJjZXMuemlwJykpCiAgICAgICB6aXBvYmogPSB6aXBmaWxlLlppcEZpbGUoYmFja3VwX3VpX3ppcCAsICd3JywgemlwZmlsZS5aSVBfREVGTEFURUQpCiAgICAgICBmbiA9IG9zLnBhdGguam9pbihVU0VSREFUQSwgJ3NvdXJjZXMueG1sJykKICAgICAgIGNob2ljZSA9IHhibWNndWkuRGlhbG9nKCkueWVzbm8oIkd1aSBTZXR0aW5ncyIsICdEbyB5b3Ugd2FudCB0byBiYWNrdXAgeW91ciBzb3VyY2VzPycsICcnLCAnJywgeWVzbGFiZWw9J1llcycsbm9sYWJlbD0nTm8nKQogICAgICAgaWYgY2hvaWNlID09IDA6CiAgICAgICAgICAgIHJldHVybgogICAgICAgZWxpZiBjaG9pY2UgPT0gMToKCSAgIGRwLmNyZWF0ZSgiQkFDS1VQL1JFU1RPUkUiLCJCYWNraW5nIFVwIFNvdXJjZXMiLCcnLCAnUGxlYXNlIFdhaXQnKQoKCSAgIHppcG9iai53cml0ZShmbiwgZm5bcm9vdGxlbjpdKQoJICAgZHAuY2xvc2UoKQoJICAgZGlhbG9nLm9rKCJCQUNLVVAvUkVTVE9SRSIsICJTb3VyY2VzIEFyZSBOb3cgQmFja2VkIFVwIiwgJycsJycpCSAgIAogICAgSU5ERVgoKQkgICAJCSAgIAoJICAgCgkKZGVmIFJFQURfWklQKHVybCk6CgogICAgaW1wb3J0IHppcGZpbGUKICAgIAogICAgeiA9IHppcGZpbGUuWmlwRmlsZSh1cmwsICJyIikKICAgIGZvciBmaWxlbmFtZSBpbiB6Lm5hbWVsaXN0KCk6CiAgICAgICAgaWYgJ2d1aXNldHRpbmdzLnhtbCcgaW4gZmlsZW5hbWU6CiAgICAgICAgICAgIGEgPSB6LnJlYWQoZmlsZW5hbWUpCiAgICAgICAgICAgIHI9JzxzZXR0aW5nIHR5cGU9IiguKz8pIiBuYW1lPSIlcy4oLis|IDAgYW5kIGxlbihmaWxlcykgPiAwOiAjY2hlY2sgZm9yIHVzZWQgZGlyZWN0b3JpZXMKICAgICAgICAgICAgdXNlZF9jb3VudCArPSAxICNpbmNyZW1lbnQgdXNlZF9jb3VudAojLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiNGdW5jdGlvbiB0byBkbyBhIGZ1bGwgd2lwZSAtIHRoaXMgaXMgY2FsbGVkIHdoZW4gZG9pbmcgYSBmcmVzaCBDQiBpbnN0YWxsLgojVGhhbmtzIHRvIGtvenogZm9yIHdvcmtpbmcgb3V0IGhvdyB0byBhZGQgYW4gZXhjbHVkZSBjbGF1c2Ugc28gQU1PYm94IEN1c3RvbSBCdWlsZHMgYWRkb25fZGF0YSBhbmQgYWRkb24gaXNuJ3QgdG91Y2hlZC4KZGVmIFdpcGVJbnN0YWxsKCk6CiAgICBpZiBza2luIT0gInNraW4uY29uZmx1ZW5jZSI6CiAgICAgICAgZGlhbG9nLm9rKCdbQ09MT1I9Ymx1ZV1bQl1TY2hpc00gVFZbL0JdWy9DT0xPUl1bQ09MT1I9Z3JlZW5dYm94Wy9DT0xPUl0gVG9vbCcsJ1BsZWFzZSBzd2l0Y2ggdG8gdGhlIGRlZmF1bHQgQ29uZmx1ZW5jZSBza2luJywnYmVmb3JlIHBlcmZvcm1pbmcgYSB3aXBlLicsJycpCiAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiQWN0aXZhdGVXaW5kb3coYXBwZWFyYW5jZXNldHRpbmdzKSIpICAgICAgIAogICAgZWxzZToKICAgICAgICBjaG9pY2UgPSB4Ym1jZ3VpLkRpYWxvZygpLnllc25vKCJXQU5UIFRPIENPTlRJTlVFPyIsICdBcmUgeW91IGFic29sdXRlbHkgY2VydGFpbiB5b3Ugd2FudCB0byB3aXBlIHRoaXMgaW5zdGFsbD8nLCAnJywgJ0FsbCBhZGRvbnMgRVhDTFVESU5HIFRISVMgV0laQVJEIHdpbGwgYmUgY29tcGxldGVseSB3aXBlZCEnLCB5ZXNsYWJlbD0nWWVzJyxub2xhYmVsPSdObycpCiAgICAgICAgaWYgY2hvaWNlID09IDA6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVsaWYgY2hvaWNlID09IDE6CiAgICAgICAgICAgIGRwLmNyZWF0ZSgiW0NPTE9SPWJsdWVdW0JdQU1PWy9CXVsvQ09MT1JdW0NPTE9SPWdyZWVuXWJveFsvQ09MT1JdIEN1c3RvbSBCdWlsZHMgVG9vbCIsIldpcGluZyBJbnN0YWxsIiwnJywgJ1BsZWFzZSBXYWl0JykKICAgICAgICAgICAgYWRkb25QYXRoPXhibWNhZGRvbi5BZGRvbihpZD1BZGRvbklEKS5nZXRBZGRvbkluZm8oJ3BhdGgnKTsgYWRkb25QYXRoPXhibWMudHJhbnNsYXRlUGF0aChhZGRvblBhdGgpOyAKICAgICAgICAgICAgeGJtY1BhdGg9b3MucGF0aC5qb2luKGFkZG9uUGF0aCwiLi4iLCIuLiIpOyB4Ym1jUGF0aD1vcy5wYXRoLmFic3BhdGgoeGJtY1BhdGgpOyBmYWlsZWQ9RmFsc2UgIAogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBmb3Igcm9vdCwgZGlycywgZmlsZXMgaW4gb3Mud2Fsayh4Ym1jUGF0aCx0b3Bkb3duPVRydWUpOgogICAgICAgICAgICAgICAgICAgIGRpcnNbOl0gPSBbZCBmb3IgZCBpbiBkaXJzIGlmIGQgbm90IGluIEVYQ0xVREVTXQogICAgICAgICAgICAgICAgICAgIGZvciBuYW1lIGluIGZpbGVzOgogICAgICAgICAgICAgICAgICAgICAgICB0cnk6IG9zLnJlbW92ZShvcy5wYXRoLmpvaW4ocm9vdCxuYW1lKSkKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgICAgICAgICAgICAgZm9yIG5hbWUgaW4gZGlyczoKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OiBvcy5ybWRpcihvcy5wYXRoLmpvaW4ocm9vdCxuYW1lKSkKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIFJFTU9WRV9FTVBUWV9GT0xERVJTKCkKICAgICAgICBSRU1PVkVfRU1QVFlfRk9MREVSUygpCiAgICAgICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgICAgIFJFTU9WRV9FTVBUWV9GT0xERVJTKCkKICAgICAgICBSRU1PVkVfRU1QVFlfRk9MREVSUygpCiAgICAgICAgUkVNT1ZFX0VNUFRZX0ZPTERFUlMoKQogICAgICAgIFJFTU9WRV9FTVBUWV9GT0xERVJTKCkKCmRlZiBnZXRfcGFyYW1zKCk6CiAgICAgICAgcGFyYW09W10KICAgICAgICBwYXJhbXN0cmluZz1zeXMuYXJndlsyXQogICAgICAgIGlmIGxlbihwYXJhbXN0cmluZyk|dXJsPSIrdXJsbGliLnF1b3RlX3BsdXModXJsKSsiJm1vZGU9IitzdHIobW9kZSkrIiZuYW1lPSIrdXJsbGliLnF1b3RlX3BsdXMobmFtZSkrIiZpY29uaW1hZ2U9Iit1cmxsaWIucXVvdGVfcGx1cyhpY29uaW1hZ2UpKyImZmFuYXJ0PSIrdXJsbGliLnF1b3RlX3BsdXMoZmFuYXJ0KSsiJmRlc2NyaXB0aW9uPSIrdXJsbGliLnF1b3RlX3BsdXMoZGVzY3JpcHRpb24pCiAgICAgICAgb2s9VHJ1ZQogICAgICAgIGxpej14Ym1jZ3VpLkxpc3RJdGVtKG5hbWUsIGljb25JbWFnZT0iRGVmYXVsdEZvbGRlci5wbmciLCB0aHVtYm5haWxJbWFnZT1pY29uaW1hZ2UpCiAgICAgICAgbGl6LnNldEluZm8oIHR5cGU9IlZpZGVvIiwgaW5mb0xhYmVscz17ICJUaXRsZSI6IG5hbWUsICJQbG90IjogZGVzY3JpcHRpb24gfSApCiAgICAgICAgbGl6LnNldFByb3BlcnR5KCAiRmFuYXJ0X0ltYWdlIiwgZmFuYXJ0ICkKICAgICAgICBvaz14Ym1jcGx1Z2luLmFkZERpcmVjdG9yeUl0ZW0oaGFuZGxlPWludChzeXMuYXJndlsxXSksdXJsPXUsbGlzdGl0ZW09bGl6LGlzRm9sZGVyPUZhbHNlKQogICAgICAgIHJldHVybiBvayAKZGVmIFdJWkFSRChuYW1lLHVybCxkZXNjcmlwdGlvbik6ICAKICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhwYWNrYWdlZGlyKTogb3MubWFrZWRpcnMocGFja2FnZWRpcikgCiAgICBpZiBza2luIT0gInNraW4uY29uZmx1ZW5jZSI6CglkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpCiAgICAgICAgZGlhbG9nLm9rKCdbQ09MT1I9b3JhbmdlXVtCXVNjaGlzTSBUVlsvQl1bL0NPTE9SXVtDT0xPUj13aGl0ZV0gIFdpemFyZFsvQ09MT1JdICcsJ1BsZWFzZSBzd2l0Y2ggdG8gdGhlIGRlZmF1bHQgQ29uZmx1ZW5jZSBza2luJywnYmVmb3JlIHByb2NlZWRpbmcuJywnJykKICAgICAgICB4Ym1jLmV4ZWN1dGVidWlsdGluKCJBY3RpdmF0ZVdpbmRvdyhhcHBlYXJhbmNlc2V0dGluZ3MpIikKICAgICAgICByZXR1cm4KICAgIHBhdGggPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMnLCdwYWNrYWdlcycpKQogICAgbmFtZSA9ICJidWlsZCIKICAgIGRwID0geGJtY2d1aS5EaWFsb2dQcm9ncmVzcygpCgogICAgZHAuY3JlYXRlKCJbQ09MT1I9b3JhbmdlXVtCXVNjaGlzTSBUVlsvQl1bL0NPTE9SXVtDT0xPUj13aGl0ZV0gV2l6YXJkWy9DT0xPUl0iLCJEb3dubG9hZGluZyAiLCcnLCAnUGxlYXNlIFdhaXQnKQogICAgbGliPW9zLnBhdGguam9pbihwYXRoLCBuYW1lKycuemlwJykKICAgIHRyeToKICAgICAgIG9zLnJlbW92ZShsaWIpCiAgICBleGNlcHQ6CiAgICAgICBwYXNzCgkKICAgIGRvd25sb2FkZXIuZG93bmxvYWQodXJsLCBsaWIsIGRwKQogICAgYWRkb25mb2xkZXIgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vJywnaG9tZScpKQogICAgdGltZS5zbGVlcCgyKQogICAgZHAudXBkYXRlKDAsIiIsICJFeHRyYWN0aW5nIFppcCBQbGVhc2UgV2FpdCIpCiAgICBleHRyYWN0LmFsbChsaWIsYWRkb25mb2xkZXIsZHApCiAgICB4Ym1jLnNsZWVwKDEwMDApCiAgICBUUklHR0VSKCkKICAgIHhibWMuc2xlZXAoNTAwMCkKICAgIGRpYWxvZyA9IHhibWNndWkuRGlhbG9nKCkKICAgIFJFU1RPUkVGQVYoKQoKZGVmIFRSSUdHRVIoKToKICAgIG15X2FkZG9uID0geGJtY2FkZG9uLkFkZG9uKCkKICAgIHVzZXJuYW1lID0gdW5pY29kZShteV9hZGRvbi5nZXRTZXR0aW5nKCd1c2VyJykpCiAgICBlbWFpbCA9IHVuaWNvZGUobXlfYWRkb24uZ2V0U2V0dGluZygnZW1haWwnKSkKICAgIGxpbmsgPSAnaHR0cDovL3NjaGlzbS10di5jb20vc2NoaXNtMi5waHA|ISEhIiwgJ0FyZSB5b3UgYWJzb2x1dGVseSBjZXJ0YWluIHlvdSB3YW50IHRvIHdpcGUgdGhpcyBpbnN0YWxsPycsICcnLCAnQWxsIGFkZG9ucyBFWENMVURJTkcgVEhJUyBXSVpBUkQgd2lsbCBiZSBjb21wbGV0ZWx5IHdpcGVkIScsIHllc2xhYmVsPSdZZXMnLG5vbGFiZWw9J05vJykKICAgIGlmIGNob2ljZTIgPT0gMDoKICAgICAgICByZXR1cm4KICAgIGVsaWYgY2hvaWNlMiA9PSAxOgogICAgICAgIGRwLmNyZWF0ZSgiW0NPTE9SPWJsdWVdW0JdU2NoaXNNIFRWWy9CXVsvQ09MT1JdIEN1c3RvbSBCdWlsZHMgVG9vbCIsIldpcGluZyBJbnN0YWxsIiwnJywgJ1BsZWFzZSBXYWl0JykKICAgICAgICB0cnk6CiAgICAgICAgICAgIGZvciByb290LCBkaXJzLCBmaWxlcyBpbiBvcy53YWxrKEhPTUUsdG9wZG93bj1UcnVlKToKICAgICAgICAgICAgICAgIGRpcnNbOl0gPSBbZCBmb3IgZCBpbiBkaXJzIGlmIGQgbm90IGluIEVYQ0xVREVTXQogICAgICAgICAgICAgICAgZm9yIG5hbWUgaW4gZmlsZXM6CiAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICBvcy5yZW1vdmUob3MucGF0aC5qb2luKHJvb3QsbmFtZSkpCiAgICAgICAgICAgICAgICAgICAgICAgIG9zLnJtZGlyKG9zLnBhdGguam9pbihyb290LG5hbWUpKQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGZvciBuYW1lIGluIGRpcnM6CiAgICAgICAgICAgICAgICAgICAgdHJ5OiBvcy5ybWRpcihvcy5wYXRoLmpvaW4ocm9vdCxuYW1lKSk7IG9zLnJtZGlyKHJvb3QpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgZXhjZXB0OiBwYXNzCiAgICBSRU1PVkVfRU1QVFlfRk9MREVSUygpCiAgICBSRU1PVkVfRU1QVFlfRk9MREVSUygpCiAgICBSRU1PVkVfRU1QVFlfRk9MREVSUygpCiAgICBSRU1PVkVfRU1QVFlfRk9MREVSUygpCiAgICBSRU1PVkVfRU1QVFlfRk9MREVSUygpCiAgICBSRU1PVkVfRU1QVFlfRk9MREVSUygpCiAgICBSRU1PVkVfRU1QVFlfRk9MREVSUygpCiAgICBkaWFsb2cub2soJ1tDT0xPUj1ibHVlXVtCXVNjaGlzTVRWIFsvQl1bL0NPTE9SXSBDdXN0b20gQnVpbGRzIFRvb2wnLCdXaXBlIFN1Y2Nlc3NmdWwsIHBsZWFzZSByZXN0YXJ0IFhCTUMvS29kaSBmb3IgY2hhbmdlcyB0byB0YWtlIGVmZmVjdC4nLCcnLCcnKQoKZGVmIFJFTU9WRV9FTVBUWV9GT0xERVJTKCk6CgogICAgcHJpbnQiIyMjIyMjIyMjIyMgU3RhcnQgUmVtb3ZpbmcgRW1wdHkgRm9sZGVycyAjIyMjIyMjIyMiCiAgICBlbXB0eV9jb3VudCA9IDAKICAgIHVzZWRfY291bnQgPSAwCiAgICBmb3IgY3VyZGlyLCBzdWJkaXJzLCBmaWxlcyBpbiBvcy53YWxrKEhPTUUpOgogICAgICAgIGlmIGxlbihzdWJkaXJzKSA9PSAwIGFuZCBsZW4oZmlsZXMpID09IDA6ICNjaGVjayBmb3IgZW1wdHkgZGlyZWN0b3JpZXMuIGxlbihmaWxlcykgPT0gMCBtYXkgYmUgb3ZlcmtpbGwKICAgICAgICAgICAgZW1wdHlfY291bnQgKz0gMSAjaW5jcmVtZW50IGVtcHR5X2NvdW50CiAgICAgICAgICAgIG9zLnJtZGlyKGN1cmRpcikgI2RlbGV0ZSB0aGUgZGlyZWN0b3J5CiAgICAgICAgICAgIHByaW50ICJzdWNjZXNzZnVsbHkgcmVtb3ZlZDogIitjdXJkaXIKICAgICAgICBlbGlmIGxlbihzdWJkaXJzKSA|JywgJycsICcnLCB5ZXNsYWJlbD0nWWVzJyxub2xhYmVsPSdObycpCiAgICAgICAgaWYgY2hvaWNlID09IDA6CiAgICAgICAgICByZXR1cm4KICAgICAgICBlbGlmIGNob2ljZSA9PSAxOgoJCQkKCQkJCgkJCQoJCQlsaWI9eGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbihiYWNrdXBkaXIsJ2JhY2t1cF91aS56aXAnKSkKCQkJYWRkb25mb2xkZXIgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vJywnaG9tZS91c2VyZGF0YScpKQoJCQl0aW1lLnNsZWVwKDIpCgkJCWRwLmNyZWF0ZSgiW0NPTE9SPWJsdWVdW0JdU2NoaXNNIFRWWy9CXVsvQ09MT1JdIEN1c3RvbSBCdWlsZHMgVG9vbCIsIlJlc3RvcmluZyIsJycsICdQbGVhc2UgV2FpdCcpCgkJCXByaW50ICc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nCgkJCXByaW50IGFkZG9uZm9sZGVyCgkJCXByaW50ICc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nCgkJCWV4dHJhY3QuYWxsKGxpYixhZGRvbmZvbGRlcixkcCkKCQkJZHAuY2xvc2UoKQoJCQlkaWFsb2cub2soIkJBQ0tVUC9SRVNUT1JFIiwgIkdVSSBzZXR0aW5ncyBBcmUgTm93IHJlc3RvcmVkIiwgJycsJycpCQoKCiAKZGVmIFJFU1RPUkVGQVYoKToKIGlmIG9zLnBhdGguZXhpc3RzKG9zLnBhdGguam9pbihiYWNrdXBkaXIsJ2JhY2t1cF9mYXYuemlwJykpOgogICAgICAgIGltcG9ydCB0aW1lCiAgICAgICAgZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKQogICAgICAgIGNob2ljZSA9IHhibWNndWkuRGlhbG9nKCkueWVzbm8oIkZhdm91cml0ZXMgU2V0dGluZ3MiLCAnRG8geW91IHdhbnQgdG8gcmVzdG9yZSB5b3VyIEZhdm91cml0ZXM|YWN0aW9uPWdldGJ1aWxkcyZ1c2VyPScgKyB1c2VybmFtZSArICcmZW1haWw9JyArIGVtYWlsKS5yZXBsYWNlKCdcbicsJycpLnJlcGxhY2UoJ1xyJywnJykKCXByaW50IGxpbmsKCXRyeToKCQlkYXRhID0ganNvbi5sb2FkcyhsaW5rKQoJZXhjZXB0OgoJCWRpYWxvZy5vaygiVWggb2guLiIsIGxpbmspCgkJcmV0dXJuKCkKCWZvciBlbnRyeSBpbiBkYXRhOgoJCWFkZExpbmsoZW50cnlbJ25hbWUnXSArICcgIC0gdmVyOiAnICsgJ1tDT0xPUiBsaW1lXScrIGVudHJ5Wyd2ZXJzaW9uJ10gKyAnWy9DT0xPUl0nLGVudHJ5Wyd6aXB1cmwnXSw5MCxlbnRyeVsnaW1ndXJsJ10sZW50cnlbJ2ZhbmFydCddLCcnKQogICAgIyBsaW5rID0gT1BFTl9VUkwoJ2h0dHBzOi8vYXJjaGl2ZS5vcmcvZG93bmxvYWQvc3R2X3dpemFyZF9yZWwvd2l6YXJkX3JlbC50eHQnKS5yZXBsYWNlKCdcbicsJycpLnJlcGxhY2UoJ1xyJywnJykKICAgICMgbWF0Y2ggPSByZS5jb21waWxlKCduYW1lPSIoLis|KSIuKz9lcnNpb249IiguKz8pIicpLmZpbmRhbGwobGluaykKICAgICMgZm9yIG5hbWUsdXJsLGljb25pbWFnZSxmYW5hcnQsZGVzY3JpcHRpb24gaW4gbWF0Y2g6CiAgICAgICAgIyBhZGREaXIobmFtZSArICIgdmVyOiIgKyBkZXNjcmlwdGlvbix1cmwsOTAsaWNvbmltYWdlLGZhbmFydCxkZXNjcmlwdGlvbikKCQpkZWYgRkFTVFJFU0VUKCk6CgkJZGlhbG9nLm9rKCJQUk9DRVNTIENPTVBMRVRFIiwgJ1RoZSBza2luIHdpbGwgbm93IGJlIHJlc2V0JywgJ1RvIHN0YXJ0IHVzaW5nIHlvdXIgbmV3IHNldHVwIHBsZWFzZSBzd2l0Y2ggdGhlIHNraW4gU3lzdGVtID4gQXBwZWFyYW5jZSA|bWc9IiguKz8pIi4rP2FuYXJ0PSIoLis|KSIuKz9ybD0iKC4rPykiLis|KC4rPyk8L3NldHRpbmc|base64|b64decode|import|exec|KSI".split("|")))